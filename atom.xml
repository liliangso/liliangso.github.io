<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-20T15:29:59.452Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JVM调优(一)</title>
    <link href="http://example.com/2022/04/19/JVM-JVM%E8%B0%83%E4%BC%9801/"/>
    <id>http://example.com/2022/04/19/JVM-JVM%E8%B0%83%E4%BC%9801/</id>
    <published>2022-04-19T13:04:08.398Z</published>
    <updated>2022-04-20T15:29:59.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-JVM基础"><a href="#一-JVM基础" class="headerlink" title="一 JVM基础"></a>一 JVM基础</h3><p>JVM只是一个规范 具体会有很多类型的JVM实现 比如Hotspot、J9、Microsoft VM、TaobaoVM等等</p><p><strong>JDK JRE JVM的关系</strong></p><p>JDK &gt; JRE &gt; JVM</p><p><strong>java文件从编码到执行的顺序</strong></p><p><img src="/images/0092.png" alt="图1"></p><h3 id="二-Class-文件格式"><a href="#二-Class-文件格式" class="headerlink" title="二 Class 文件格式"></a>二 Class 文件格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ClassFile &#123;</span><br><span class="line">  u4              magic; <span class="comment">//魔数 占4个字节  u4表示4个字节 内容统一为 CA FE BA BE</span></span><br><span class="line">  u2              minor_version; <span class="comment">//小版本号 JDK的小版本 2个字节</span></span><br><span class="line">  u2              major_version; <span class="comment">//大版本号 JDK的大版本 2个字节</span></span><br><span class="line">  u2              constant_pool_count; <span class="comment">//常量池中常量的数量 2个字节</span></span><br><span class="line">  cp_info         constant_pool[constant_pool_count-<span class="number">1</span>]; <span class="comment">//常量池的具体内容</span></span><br><span class="line">  u2              access_flags; <span class="comment">//class文件的权限修饰符 public final 这些修饰符 等等</span></span><br><span class="line">  u2              this_class; <span class="comment">//class文件的全限定名</span></span><br><span class="line">  u2              super_class; <span class="comment">//父类的全限定名</span></span><br><span class="line">  u2              interfaces_count; <span class="comment">//这个类实现/继承的接口的数量</span></span><br><span class="line">  u2              interfaces[interfaces_count]; <span class="comment">// 接口的具体内容</span></span><br><span class="line">  u2              fields_count; <span class="comment">//全局变量的数量</span></span><br><span class="line">  field_info      fields[fields_count];</span><br><span class="line">  u2              methods_count; <span class="comment">//方法的数量</span></span><br><span class="line">  method_info     methods[methods_count];</span><br><span class="line">  u2              attributes_count;</span><br><span class="line">  attribute_info  attributes[attributes_count];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>反编译clas文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -v xxx.class</span><br></pre></td></tr></table></figure><p><strong>jclasslib Bytecode Viewer</strong> 这是idea的插件 安装好这个插件后 可以用来分析class文件的构成 如下图</p><p>首先光标选择某个class文件 然后邮件</p><p><img src="/images/0093.png" alt="图2"></p><p><strong>常量池的具体内容</strong> 对应class文件中的 cp_info 具体常量池信息看下图</p><p><img src="/images/0094.png" alt="图3"></p><h3 id="三-JVM指令集"><a href="#三-JVM指令集" class="headerlink" title="三 JVM指令集"></a>三 JVM指令集</h3><ul><li><p><strong>操作数栈相关指令</strong></p><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>iload</td><td>将指定的int型本地变量推送至栈顶</td></tr><tr><td>iload_x</td><td>将第x个int型本地变量推送至栈顶，x范围：[0, 3]</td></tr><tr><td>lload</td><td>将指定的long型本地变量推送至栈顶</td></tr><tr><td>lload_x</td><td>将第x个long型本地变量推送至栈顶，x范围：[0, 3]</td></tr><tr><td>fload</td><td>将指定的float型本地变量推送至栈顶</td></tr><tr><td>fload_x</td><td>将第x个flaot型本地变量推送至栈顶，x范围：[0, 3]</td></tr><tr><td>dload</td><td>将指定的double型本地变量推送至栈顶</td></tr><tr><td>dload_x</td><td>将第x个double型本地变量推送至栈顶，x范围：[0, 3]</td></tr><tr><td>aload</td><td>将指定的引用类型本地变量推送至栈顶</td></tr><tr><td>aload_x</td><td>将第x个引用类型本地变量推送至栈顶，x范围：[0, 3]</td></tr><tr><td>istore</td><td>将栈顶int型数值存入指定本地变量</td></tr><tr><td>istore_x</td><td>将栈顶int型数值存入第x个本地变量，x范围：[0, 3]</td></tr><tr><td>lstore</td><td>将栈顶long型数值存入指定本地变量</td></tr><tr><td>lstore_x</td><td>将栈顶long型数值存入第x个本地变量，x范围：[0, 3]</td></tr><tr><td>fstore</td><td>将栈顶float型数值存入指定本地变量</td></tr><tr><td>fstore_x</td><td>将栈顶float型数值存入第x个本地变量，x范围：[0, 3]</td></tr><tr><td>dstore</td><td>将栈顶double型数值存入指定本地变量</td></tr><tr><td>dstore_x</td><td>将栈顶double型数值存入第x个本地变量，x范围：[0, 3]</td></tr><tr><td>astore</td><td>将栈顶引用类型存入指定本地变量</td></tr><tr><td>astore_x</td><td>将栈顶引用类型存入第x个本地变量，x范围：[0, 3]</td></tr></tbody></table><p>可以看到：i开头的指令操作数类型是integer类型，l开头的指令操作数类型是long类型，f开头的指令操作数类型是float类型，d开头的指令操作数类型是double，a开头的指令操作数类型是引用类型(reference)</p><p><strong>常数操作相关指令</strong></p><table><thead><tr><th align="center">指令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">bipush</td><td align="center">将单字节的常量值(-128~127)推送至栈顶</td></tr><tr><td align="center">sipush</td><td align="center">将一个短整型常量值(-32768~32767)推送至栈顶</td></tr><tr><td align="center">ldc</td><td align="center">将int, float或String型常量值从常量池中推送至栈顶</td></tr><tr><td align="center">ldc_w</td><td align="center">将int, float或String型常量值从常量池中推送至栈顶（宽索引）</td></tr><tr><td align="center">aconst_null</td><td align="center">将null推送至栈顶</td></tr><tr><td align="center">iconst_m1</td><td align="center">将int型-1推送至栈顶</td></tr><tr><td align="center">iconst_x</td><td align="center">将int型x推送至栈顶，x范围：[0, 5]</td></tr><tr><td align="center">lconst_x</td><td align="center">将long型x推送至栈顶，x范围：[0, 1]</td></tr><tr><td align="center">fconst_x</td><td align="center">将float型x推送至栈顶，x范围：[0, 1]</td></tr><tr><td align="center">dconst_x</td><td align="center">将double型x推送至栈顶，x范围：[0, 1]</td></tr></tbody></table><p><strong>数组操作相关指令</strong></p><table><thead><tr><th align="center">指令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">iaload</td><td align="center">将int型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">laload</td><td align="center">将long型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">faload</td><td align="center">将float型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">daload</td><td align="center">将double型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">aaload</td><td align="center">将引用型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">baload</td><td align="center">将boolean或byte型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">caload</td><td align="center">将char型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">saload</td><td align="center">将short型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">iastore</td><td align="center">将栈顶int型数值存入指定数组的指定索引位置</td></tr><tr><td align="center">lastore</td><td align="center">将栈顶long型数值存入指定数组的指定索引位置</td></tr><tr><td align="center">fastore</td><td align="center">将栈顶float型数值存入指定数组的指定索引位置</td></tr><tr><td align="center">dastore</td><td align="center">将栈顶double型数值存入指定数组的指定索引位置</td></tr><tr><td align="center">aastore</td><td align="center">将栈顶引用型数值存入指定数组的指定索引位置</td></tr><tr><td align="center">bastore</td><td align="center">将栈顶boolean或byte型数值存入指定数组的指定索引位置</td></tr><tr><td align="center">castore</td><td align="center">将栈顶char型数值存入指定数组的指定索引位置</td></tr><tr><td align="center">sastore</td><td align="center">将栈顶short型数值存入指定数组的指定索引位置</td></tr></tbody></table><p><strong>操作数栈其他常用指令</strong></p><table><thead><tr><th align="center">指令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">pop</td><td align="center">将栈顶数值弹出 (数值不能是long或double类型的)</td></tr><tr><td align="center">pop2</td><td align="center">将栈顶的一个（long或double类型的)或两个数值弹出（其它）</td></tr><tr><td align="center">dup</td><td align="center">复制栈顶数值并将复制值压入栈顶</td></tr><tr><td align="center">dup_x1</td><td align="center">复制栈顶数值并将两个复制值压入栈顶</td></tr><tr><td align="center">dup_x2</td><td align="center">复制栈顶数值并将三个（或两个）复制值压入栈顶</td></tr><tr><td align="center">dup2</td><td align="center">复制栈顶一个（long或double类型的)或两个（其它）数值并将复制值压入栈顶</td></tr><tr><td align="center">dup2_x1</td><td align="center">复制栈顶2个数值，并压入栈顶2次</td></tr><tr><td align="center">dup2_x2</td><td align="center">复制栈顶2个数值，并压入栈顶3次</td></tr><tr><td align="center">swap</td><td align="center">将栈最顶端的两个数值互换(数值不能是long或double类型的)</td></tr></tbody></table></li><li><p><strong>运算相关</strong></p><table><thead><tr><th align="center">功能</th><th align="center">指令</th></tr></thead><tbody><tr><td align="center">加</td><td align="center">iadd,ladd,fadd,dadd</td></tr><tr><td align="center">减</td><td align="center">is,ls,fs,ds</td></tr><tr><td align="center">乘</td><td align="center">imul,lmul,fmul,dmul</td></tr><tr><td align="center">除</td><td align="center">idiv,ldiv,fdiv,ddiv</td></tr><tr><td align="center">余数</td><td align="center">irem,lrem,frem,drem</td></tr><tr><td align="center">取负</td><td align="center">ineg,lneg,fneg,dneg</td></tr><tr><td align="center">移位</td><td align="center">ishl,lshr,iushr,lshl,lshr,lushr</td></tr><tr><td align="center">按位或</td><td align="center">ior,lor</td></tr><tr><td align="center">按位与</td><td align="center">iand,land</td></tr><tr><td align="center">按位异或</td><td align="center">ixor,lxor</td></tr><tr><td align="center">类型转换</td><td align="center">i2l,i2f,i2d,l2f,l2d,f2d(放宽数值转换)；i2b,i2c,i2s,l2i,f2i,f2l,d2i,d2l,d2f(缩窄数值转换)</td></tr></tbody></table></li><li><h3 id="条件转移"><a href="#条件转移" class="headerlink" title="条件转移"></a><strong>条件转移</strong></h3><table><thead><tr><th align="center">功能</th><th align="center">指令</th></tr></thead><tbody><tr><td align="center">有条件转移</td><td align="center">ifeq,iflt,ifle,ifne,ifgt,ifge,ifnull,ifnonnull,if_icmpeq,if_icmpene, if_icmplt,if_icmpgt,if_icmple,if_icmpge,if_acmpeq,if_acmpne,lcmp,fcmpl,fcmpg,dcmpl,dcmpg</td></tr><tr><td align="center">复合条件转移</td><td align="center">tableswitch,lookupswitch</td></tr><tr><td align="center">无条件转移</td><td align="center">goto,goto_w,jsr,jsr_w,ret</td></tr></tbody></table></li><li><h3 id="类和数组"><a href="#类和数组" class="headerlink" title="类和数组"></a><strong>类和数组</strong></h3><table><thead><tr><th align="center">功能</th><th align="center">指令</th></tr></thead><tbody><tr><td align="center">创建类</td><td align="center">new</td></tr><tr><td align="center">创建新数组</td><td align="center">newarray,anewarray,multianwarray</td></tr><tr><td align="center">访问类的域和类实例域</td><td align="center">getfield,putfield,getstatic,putstatic</td></tr><tr><td align="center">获取数组长度</td><td align="center">arraylength</td></tr><tr><td align="center">检相类实例或数组属性</td><td align="center">instanceof,checkcast</td></tr></tbody></table></li><li><h3 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a><strong>其他指令</strong></h3><table><thead><tr><th align="center">功能</th><th align="center">指令</th></tr></thead><tbody><tr><td align="center">调度对象的实便方法</td><td align="center">invokevirtual</td></tr><tr><td align="center">调用由接口实现的方法</td><td align="center">invokeinterface</td></tr><tr><td align="center">调用需要特殊处理的实例方法</td><td align="center">invokespecial</td></tr><tr><td align="center">调用命名类中的静态方法</td><td align="center">invokestatic</td></tr><tr><td align="center">方法返回</td><td align="center">ireturn,lreturn,freturn,dreturn,areturn,return</td></tr><tr><td align="center">异常</td><td align="center">athrow</td></tr><tr><td align="center">finally关键字的实现使用</td><td align="center">jsr,jsr_w,ret</td></tr><tr><td align="center">synchronized锁</td><td align="center">monitorenter,monitorexit</td></tr></tbody></table></li><li><p><strong>全部指令集</strong></p><table><thead><tr><th align="center">指令码(16进制)</th><th align="center">助记符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">0×00</td><td align="center">nop</td><td align="center">什么都不做</td></tr><tr><td align="center">0×01</td><td align="center">aconst_null</td><td align="center">将null推送至栈顶</td></tr><tr><td align="center">0×02</td><td align="center">iconst_m1</td><td align="center">将int型-1推送至栈顶</td></tr><tr><td align="center">0×03</td><td align="center">iconst_0</td><td align="center">将int型0推送至栈顶</td></tr><tr><td align="center">0×04</td><td align="center">iconst_1</td><td align="center">将int型1推送至栈顶</td></tr><tr><td align="center">0×05</td><td align="center">iconst_2</td><td align="center">将int型2推送至栈顶</td></tr><tr><td align="center">0×06</td><td align="center">iconst_3</td><td align="center">将int型3推送至栈顶</td></tr><tr><td align="center">0×07</td><td align="center">iconst_4</td><td align="center">将int型4推送至栈顶</td></tr><tr><td align="center">0×08</td><td align="center">iconst_5</td><td align="center">将int型5推送至栈顶</td></tr><tr><td align="center">0×09</td><td align="center">lconst_0</td><td align="center">将long型0推送至栈顶</td></tr><tr><td align="center">0x0a</td><td align="center">lconst_1</td><td align="center">将long型1推送至栈顶</td></tr><tr><td align="center">0x0b</td><td align="center">fconst_0</td><td align="center">将float型0推送至栈顶</td></tr><tr><td align="center">0x0c</td><td align="center">fconst_1</td><td align="center">将float型1推送至栈顶</td></tr><tr><td align="center">0x0d</td><td align="center">fconst_2</td><td align="center">将float型2推送至栈顶</td></tr><tr><td align="center">0x0e</td><td align="center">dconst_0</td><td align="center">将double型0推送至栈顶</td></tr><tr><td align="center">0x0f</td><td align="center">dconst_1</td><td align="center">将double型1推送至栈顶</td></tr><tr><td align="center">0×10</td><td align="center">bipush</td><td align="center">将单字节的常量值(-128~127)推送至栈顶</td></tr><tr><td align="center">0×11</td><td align="center">sipush</td><td align="center">将一个短整型常量值(-32768~32767)推送至栈顶</td></tr><tr><td align="center">0×12</td><td align="center">ldc</td><td align="center">将int, float或String型常量值从常量池中推送至栈顶</td></tr><tr><td align="center">0×13</td><td align="center">ldc_w</td><td align="center">将int, float或String型常量值从常量池中推送至栈顶（宽索引）</td></tr><tr><td align="center">0×14</td><td align="center">ldc2_w</td><td align="center">将long或double型常量值从常量池中推送至栈顶（宽索引）</td></tr><tr><td align="center">0×15</td><td align="center">iload</td><td align="center">将指定的int型本地变量推送至栈顶</td></tr><tr><td align="center">0×16</td><td align="center">lload</td><td align="center">将指定的long型本地变量推送至栈顶</td></tr><tr><td align="center">0×17</td><td align="center">fload</td><td align="center">将指定的float型本地变量推送至栈顶</td></tr><tr><td align="center">0×18</td><td align="center">dload</td><td align="center">将指定的double型本地变量推送至栈顶</td></tr><tr><td align="center">0×19</td><td align="center">aload</td><td align="center">将指定的引用类型本地变量推送至栈顶</td></tr><tr><td align="center">0x1a</td><td align="center">iload_0</td><td align="center">将第0个int型本地变量推送至栈顶</td></tr><tr><td align="center">0x1b</td><td align="center">iload_1</td><td align="center">将第1个int型本地变量推送至栈顶</td></tr><tr><td align="center">0x1c</td><td align="center">iload_2</td><td align="center">将第2个int型本地变量推送至栈顶</td></tr><tr><td align="center">0x1d</td><td align="center">iload_3</td><td align="center">将第3个int型本地变量推送至栈顶</td></tr><tr><td align="center">0x1e</td><td align="center">lload_0</td><td align="center">将第0个long型本地变量推送至栈顶</td></tr><tr><td align="center">0x1f</td><td align="center">lload_1</td><td align="center">将第1个long型本地变量推送至栈顶</td></tr><tr><td align="center">0×20</td><td align="center">lload_2</td><td align="center">将第2个long型本地变量推送至栈顶</td></tr><tr><td align="center">0×21</td><td align="center">lload_3</td><td align="center">将第3个long型本地变量推送至栈顶</td></tr><tr><td align="center">0×22</td><td align="center">fload_0</td><td align="center">将第0个float型本地变量推送至栈顶</td></tr><tr><td align="center">0×23</td><td align="center">fload_1</td><td align="center">将第1个float型本地变量推送至栈顶</td></tr><tr><td align="center">0×24</td><td align="center">fload_2</td><td align="center">将第2个float型本地变量推送至栈顶</td></tr><tr><td align="center">0×25</td><td align="center">fload_3</td><td align="center">将第3个float型本地变量推送至栈顶</td></tr><tr><td align="center">0×26</td><td align="center">dload_0</td><td align="center">将第0个double型本地变量推送至栈顶</td></tr><tr><td align="center">0×27</td><td align="center">dload_1</td><td align="center">将第1个double型本地变量推送至栈顶</td></tr><tr><td align="center">0×28</td><td align="center">dload_2</td><td align="center">将第2个double型本地变量推送至栈顶</td></tr><tr><td align="center">0×29</td><td align="center">dload_3</td><td align="center">将第3个double型本地变量推送至栈顶</td></tr><tr><td align="center">0x2a</td><td align="center">aload_0</td><td align="center">将第0个引用类型本地变量推送至栈顶</td></tr><tr><td align="center">0x2b</td><td align="center">aload_1</td><td align="center">将第1个引用类型本地变量推送至栈顶</td></tr><tr><td align="center">0x2c</td><td align="center">aload_2</td><td align="center">将第2个引用类型本地变量推送至栈顶</td></tr><tr><td align="center">0x2d</td><td align="center">aload_3</td><td align="center">将第3个引用类型本地变量推送至栈顶</td></tr><tr><td align="center">0x2e</td><td align="center">iaload</td><td align="center">将int型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">0x2f</td><td align="center">laload</td><td align="center">将long型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">0×30</td><td align="center">faload</td><td align="center">将float型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">0×31</td><td align="center">daload</td><td align="center">将double型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">0×32</td><td align="center">aaload</td><td align="center">将引用型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">0×33</td><td align="center">baload</td><td align="center">将boolean或byte型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">0×34</td><td align="center">caload</td><td align="center">将char型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">0×35</td><td align="center">saload</td><td align="center">将short型数组指定索引的值推送至栈顶</td></tr><tr><td align="center">0×36</td><td align="center">istore</td><td align="center">将栈顶int型数值存入指定本地变量</td></tr><tr><td align="center">0×37</td><td align="center">lstore</td><td align="center">将栈顶long型数值存入指定本地变量</td></tr><tr><td align="center">0×38</td><td align="center">fstore</td><td align="center">将栈顶float型数值存入指定本地变量</td></tr><tr><td align="center">0×39</td><td align="center">dstore</td><td align="center">将栈顶double型数值存入指定本地变量</td></tr><tr><td align="center">0x3a</td><td align="center">astore</td><td align="center">将栈顶引用型数值存入指定本地变量</td></tr><tr><td align="center">0x3b</td><td align="center">istore_0</td><td align="center">将栈顶int型数值存入第0个本地变量</td></tr><tr><td align="center">0x3c</td><td align="center">istore_1</td><td align="center">将栈顶int型数值存入第1个本地变量</td></tr><tr><td align="center">0x3d</td><td align="center">istore_2</td><td align="center">将栈顶int型数值存入第2个本地变量</td></tr><tr><td align="center">0x3e</td><td align="center">istore_3</td><td align="center">将栈顶int型数值存入第3个本地变量</td></tr><tr><td align="center">0x3f</td><td align="center">lstore_0</td><td align="center">将栈顶long型数值存入第0个本地变量</td></tr><tr><td align="center">0×40</td><td align="center">lstore_1</td><td align="center">将栈顶long型数值存入第1个本地变量</td></tr><tr><td align="center">0×41</td><td align="center">lstore_2</td><td align="center">将栈顶long型数值存入第2个本地变量</td></tr><tr><td align="center">0×42</td><td align="center">lstore_3</td><td align="center">将栈顶long型数值存入第3个本地变量</td></tr><tr><td align="center">0×43</td><td align="center">fstore_0</td><td align="center">将栈顶float型数值存入第0个本地变量</td></tr><tr><td align="center">0×44</td><td align="center">fstore_1</td><td align="center">将栈顶float型数值存入第1个本地变量</td></tr><tr><td align="center">0×45</td><td align="center">fstore_2</td><td align="center">将栈顶float型数值存入第2个本地变量</td></tr><tr><td align="center">0×46</td><td align="center">fstore_3</td><td align="center">将栈顶float型数值存入第3个本地变量</td></tr><tr><td align="center">0×47</td><td align="center">dstore_0</td><td align="center">将栈顶double型数值存入第0个本地变量</td></tr><tr><td align="center">0×48</td><td align="center">dstore_1</td><td align="center">将栈顶double型数值存入第1个本地变量</td></tr><tr><td align="center">0×49</td><td align="center">dstore_2</td><td align="center">将栈顶double型数值存入第2个本地变量</td></tr><tr><td align="center">0x4a</td><td align="center">dstore_3</td><td align="center">将栈顶double型数值存入第3个本地变量</td></tr><tr><td align="center">0x4b</td><td align="center">astore_0</td><td align="center">将栈顶引用型数值存入第0个本地变量</td></tr><tr><td align="center">0x4c</td><td align="center">astore_1</td><td align="center">将栈顶引用型数值存入第1个本地变量</td></tr><tr><td align="center">0x4d</td><td align="center">astore_2</td><td align="center">将栈顶引用型数值存入第2个本地变量</td></tr><tr><td align="center">0x4e</td><td align="center">astore_3</td><td align="center">将栈顶引用型数值存入第3个本地变量</td></tr><tr><td align="center">0x4f</td><td align="center">iastore</td><td align="center">将栈顶int型数值存入指定数组的指定索引位置</td></tr><tr><td align="center">0×50</td><td align="center">lastore</td><td align="center">将栈顶long型数值存入指定数组的指定索引位置</td></tr><tr><td align="center">0×51</td><td align="center">fastore</td><td align="center">将栈顶float型数值存入指定数组的指定索引位置</td></tr><tr><td align="center">0×52</td><td align="center">dastore</td><td align="center">将栈顶double型数值存入指定数组的指定索引位置</td></tr><tr><td align="center">0×53</td><td align="center">aastore</td><td align="center">将栈顶引用型数值存入指定数组的指定索引位置</td></tr><tr><td align="center">0×54</td><td align="center">bastore</td><td align="center">将栈顶boolean或byte型数值存入指定数组的指定索引位置</td></tr><tr><td align="center">0×55</td><td align="center">castore</td><td align="center">将栈顶char型数值存入指定数组的指定索引位置</td></tr><tr><td align="center">0×56</td><td align="center">sastore</td><td align="center">将栈顶short型数值存入指定数组的指定索引位置</td></tr><tr><td align="center">0×57</td><td align="center">pop</td><td align="center">将栈顶数值弹出 (数值不能是long或double类型的)</td></tr><tr><td align="center">0×58</td><td align="center">pop2</td><td align="center">将栈顶的一个（long或double类型的)或两个数值弹出（其它）</td></tr><tr><td align="center">0×59</td><td align="center">dup</td><td align="center">复制栈顶数值并将复制值压入栈顶</td></tr><tr><td align="center">0x5a</td><td align="center">dup_x1</td><td align="center">复制栈顶数值并将两个复制值压入栈顶</td></tr><tr><td align="center">0x5b</td><td align="center">dup_x2</td><td align="center">复制栈顶数值并将三个（或两个）复制值压入栈顶</td></tr><tr><td align="center">0x5c</td><td align="center">dup2</td><td align="center">复制栈顶一个（long或double类型的)或两个（其它）数值并将复制值压入栈顶</td></tr><tr><td align="center">0x5d</td><td align="center">dup2_x1</td><td align="center">复制栈顶2个数值，并压入栈顶2次</td></tr><tr><td align="center">0x5e</td><td align="center">dup2_x2</td><td align="center">复制栈顶2个数值，并压入栈顶3次</td></tr><tr><td align="center">0x5f</td><td align="center">swap</td><td align="center">将栈最顶端的两个数值互换(数值不能是long或double类型的)</td></tr><tr><td align="center">0×60</td><td align="center">iadd</td><td align="center">将栈顶两int型数值相加并将结果压入栈顶</td></tr><tr><td align="center">0×61</td><td align="center">ladd</td><td align="center">将栈顶两long型数值相加并将结果压入栈顶</td></tr><tr><td align="center">0×62</td><td align="center">fadd</td><td align="center">将栈顶两float型数值相加并将结果压入栈顶</td></tr><tr><td align="center">0×63</td><td align="center">dadd</td><td align="center">将栈顶两double型数值相加并将结果压入栈顶</td></tr><tr><td align="center">0×64</td><td align="center">isub</td><td align="center">将栈顶两int型数值相减并将结果压入栈顶</td></tr><tr><td align="center">0×65</td><td align="center">lsub</td><td align="center">将栈顶两long型数值相减并将结果压入栈顶</td></tr><tr><td align="center">0×66</td><td align="center">fsub</td><td align="center">将栈顶两float型数值相减并将结果压入栈顶</td></tr><tr><td align="center">0×67</td><td align="center">dsub</td><td align="center">将栈顶两double型数值相减并将结果压入栈顶</td></tr><tr><td align="center">0×68</td><td align="center">imul</td><td align="center">将栈顶两int型数值相乘并将结果压入栈顶</td></tr><tr><td align="center">0×69</td><td align="center">lmul</td><td align="center">将栈顶两long型数值相乘并将结果压入栈顶</td></tr><tr><td align="center">0x6a</td><td align="center">fmul</td><td align="center">将栈顶两float型数值相乘并将结果压入栈顶</td></tr><tr><td align="center">0x6b</td><td align="center">dmul</td><td align="center">将栈顶两double型数值相乘并将结果压入栈顶</td></tr><tr><td align="center">0x6c</td><td align="center">idiv</td><td align="center">将栈顶两int型数值相除并将结果压入栈顶</td></tr><tr><td align="center">0x6d</td><td align="center">ldiv</td><td align="center">将栈顶两long型数值相除并将结果压入栈顶</td></tr><tr><td align="center">0x6e</td><td align="center">fdiv</td><td align="center">将栈顶两float型数值相除并将结果压入栈顶</td></tr><tr><td align="center">0x6f</td><td align="center">ddiv</td><td align="center">将栈顶两double型数值相除并将结果压入栈顶</td></tr><tr><td align="center">0×70</td><td align="center">irem</td><td align="center">将栈顶两int型数值作取模运算并将结果压入栈顶</td></tr><tr><td align="center">0×71</td><td align="center">lrem</td><td align="center">将栈顶两long型数值作取模运算并将结果压入栈顶</td></tr><tr><td align="center">0×72</td><td align="center">frem</td><td align="center">将栈顶两float型数值作取模运算并将结果压入栈顶</td></tr><tr><td align="center">0×73</td><td align="center">drem</td><td align="center">将栈顶两double型数值作取模运算并将结果压入栈顶</td></tr><tr><td align="center">0×74</td><td align="center">ineg</td><td align="center">将栈顶int型数值取负并将结果压入栈顶</td></tr><tr><td align="center">0×75</td><td align="center">lneg</td><td align="center">将栈顶long型数值取负并将结果压入栈顶</td></tr><tr><td align="center">0×76</td><td align="center">fneg</td><td align="center">将栈顶float型数值取负并将结果压入栈顶</td></tr><tr><td align="center">0×77</td><td align="center">dneg</td><td align="center">将栈顶double型数值取负并将结果压入栈顶</td></tr><tr><td align="center">0×78</td><td align="center">ishl</td><td align="center">将int型数值左移位指定位数并将结果压入栈顶</td></tr><tr><td align="center">0×79</td><td align="center">lshl</td><td align="center">将long型数值左移位指定位数并将结果压入栈顶</td></tr><tr><td align="center">0x7a</td><td align="center">ishr</td><td align="center">将int型数值右（符号）移位指定位数并将结果压入栈顶</td></tr><tr><td align="center">0x7b</td><td align="center">lshr</td><td align="center">将long型数值右（符号）移位指定位数并将结果压入栈顶</td></tr><tr><td align="center">0x7c</td><td align="center">iushr</td><td align="center">将int型数值右（无符号）移位指定位数并将结果压入栈顶</td></tr><tr><td align="center">0x7d</td><td align="center">lushr</td><td align="center">将long型数值右（无符号）移位指定位数并将结果压入栈顶</td></tr><tr><td align="center">0x7e</td><td align="center">iand</td><td align="center">将栈顶两int型数值作“按位与”并将结果压入栈顶</td></tr><tr><td align="center">0x7f</td><td align="center">land</td><td align="center">将栈顶两long型数值作“按位与”并将结果压入栈顶</td></tr><tr><td align="center">0×80</td><td align="center">ior</td><td align="center">将栈顶两int型数值作“按位或”并将结果压入栈顶</td></tr><tr><td align="center">0×81</td><td align="center">lor</td><td align="center">将栈顶两long型数值作“按位或”并将结果压入栈顶</td></tr><tr><td align="center">0×82</td><td align="center">ixor</td><td align="center">将栈顶两int型数值作“按位异或”并将结果压入栈顶</td></tr><tr><td align="center">0×83</td><td align="center">lxor</td><td align="center">将栈顶两long型数值作“按位异或”并将结果压入栈顶</td></tr><tr><td align="center">0×84</td><td align="center">iinc</td><td align="center">将指定int型变量增加指定值，可以有两个变量，分别表示index, const，index指第index个int型本地变量，const增加的值</td></tr><tr><td align="center">0×85</td><td align="center">i2l</td><td align="center">将栈顶int型数值强制转换成long型数值并将结果压入栈顶</td></tr><tr><td align="center">0×86</td><td align="center">i2f</td><td align="center">将栈顶int型数值强制转换成float型数值并将结果压入栈顶</td></tr><tr><td align="center">0×87</td><td align="center">i2d</td><td align="center">将栈顶int型数值强制转换成double型数值并将结果压入栈顶</td></tr><tr><td align="center">0×88</td><td align="center">l2i</td><td align="center">将栈顶long型数值强制转换成int型数值并将结果压入栈顶</td></tr><tr><td align="center">0×89</td><td align="center">l2f</td><td align="center">将栈顶long型数值强制转换成float型数值并将结果压入栈顶</td></tr><tr><td align="center">0x8a</td><td align="center">l2d</td><td align="center">将栈顶long型数值强制转换成double型数值并将结果压入栈顶</td></tr><tr><td align="center">0x8b</td><td align="center">f2i</td><td align="center">将栈顶float型数值强制转换成int型数值并将结果压入栈顶</td></tr><tr><td align="center">0x8c</td><td align="center">f2l</td><td align="center">将栈顶float型数值强制转换成long型数值并将结果压入栈顶</td></tr><tr><td align="center">0x8d</td><td align="center">f2d</td><td align="center">将栈顶float型数值强制转换成double型数值并将结果压入栈顶</td></tr><tr><td align="center">0x8e</td><td align="center">d2i</td><td align="center">将栈顶double型数值强制转换成int型数值并将结果压入栈顶</td></tr><tr><td align="center">0x8f</td><td align="center">d2l</td><td align="center">将栈顶double型数值强制转换成long型数值并将结果压入栈顶</td></tr><tr><td align="center">0×90</td><td align="center">d2f</td><td align="center">将栈顶double型数值强制转换成float型数值并将结果压入栈顶</td></tr><tr><td align="center">0×91</td><td align="center">i2b</td><td align="center">将栈顶int型数值强制转换成byte型数值并将结果压入栈顶</td></tr><tr><td align="center">0×92</td><td align="center">i2c</td><td align="center">将栈顶int型数值强制转换成char型数值并将结果压入栈顶</td></tr><tr><td align="center">0×93</td><td align="center">i2s</td><td align="center">将栈顶int型数值强制转换成short型数值并将结果压入栈顶</td></tr><tr><td align="center">0×94</td><td align="center">lcmp</td><td align="center">比较栈顶两long型数值大小，并将结果（1，0，-1）压入栈顶</td></tr><tr><td align="center">0×95</td><td align="center">fcmpl</td><td align="center">比较栈顶两float型数值大小，并将结果（1，0，-1）压入栈顶；当其中一个数值为NaN时，将-1压入栈顶</td></tr><tr><td align="center">0×96</td><td align="center">fcmpg</td><td align="center">比较栈顶两float型数值大小，并将结果（1，0，-1）压入栈顶；当其中一个数值为NaN时，将1压入栈顶</td></tr><tr><td align="center">0×97</td><td align="center">dcmpl</td><td align="center">比较栈顶两double型数值大小，并将结果（1，0，-1）压入栈顶；当其中一个数值为NaN时，将-1压入栈顶</td></tr><tr><td align="center">0×98</td><td align="center">dcmpg</td><td align="center">比较栈顶两double型数值大小，并将结果（1，0，-1）压入栈顶；当其中一个数值为NaN时，将1压入栈顶</td></tr><tr><td align="center">0×99</td><td align="center">ifeq</td><td align="center">当栈顶int型数值等于0时跳转</td></tr><tr><td align="center">0x9a</td><td align="center">ifne</td><td align="center">当栈顶int型数值不等于0时跳转</td></tr><tr><td align="center">0x9b</td><td align="center">iflt</td><td align="center">当栈顶int型数值小于0时跳转</td></tr><tr><td align="center">0x9c</td><td align="center">ifge</td><td align="center">当栈顶int型数值大于等于0时跳转</td></tr><tr><td align="center">0x9d</td><td align="center">ifgt</td><td align="center">当栈顶int型数值大于0时跳转</td></tr><tr><td align="center">0x9e</td><td align="center">ifle</td><td align="center">当栈顶int型数值小于等于0时跳转</td></tr><tr><td align="center">0x9f</td><td align="center">if_icmpeq</td><td align="center">比较栈顶两int型数值大小，当结果等于0时跳转</td></tr><tr><td align="center">0xa0</td><td align="center">if_icmpne</td><td align="center">比较栈顶两int型数值大小，当结果不等于0时跳转</td></tr><tr><td align="center">0xa1</td><td align="center">if_icmplt</td><td align="center">比较栈顶两int型数值大小，当结果小于0时跳转</td></tr><tr><td align="center">0xa2</td><td align="center">if_icmpge</td><td align="center">比较栈顶两int型数值大小，当结果大于等于0时跳转</td></tr><tr><td align="center">0xa3</td><td align="center">if_icmpgt</td><td align="center">比较栈顶两int型数值大小，当结果大于0时跳转</td></tr><tr><td align="center">0xa4</td><td align="center">if_icmple</td><td align="center">比较栈顶两int型数值大小，当结果小于等于0时跳转</td></tr><tr><td align="center">0xa5</td><td align="center">if_acmpeq</td><td align="center">比较栈顶两引用型数值，当结果相等时跳转</td></tr><tr><td align="center">0xa6</td><td align="center">if_acmpne</td><td align="center">比较栈顶两引用型数值，当结果不相等时跳转</td></tr><tr><td align="center">0xa7</td><td align="center">goto</td><td align="center">无条件跳转</td></tr><tr><td align="center">0xa8</td><td align="center">jsr</td><td align="center">跳转至指定16位offset位置，并将jsr下一条指令地址压入栈顶</td></tr><tr><td align="center">0xa9</td><td align="center">ret</td><td align="center">返回至本地变量指定的index的指令位置（一般与jsr, jsr_w联合使用）</td></tr><tr><td align="center">0xaa</td><td align="center">tableswitch</td><td align="center">用于switch条件跳转，case值连续（可变长度指令）</td></tr><tr><td align="center">0xab</td><td align="center">lookupswitch</td><td align="center">用于switch条件跳转，case值不连续（可变长度指令）</td></tr><tr><td align="center">0xac</td><td align="center">ireturn</td><td align="center">从当前方法返回int</td></tr><tr><td align="center">0xad</td><td align="center">lreturn</td><td align="center">从当前方法返回long</td></tr><tr><td align="center">0xae</td><td align="center">freturn</td><td align="center">从当前方法返回float</td></tr><tr><td align="center">0xaf</td><td align="center">dreturn</td><td align="center">从当前方法返回double</td></tr><tr><td align="center">0xb0</td><td align="center">areturn</td><td align="center">从当前方法返回对象引用</td></tr><tr><td align="center">0xb1</td><td align="center">return</td><td align="center">从当前方法返回void</td></tr><tr><td align="center">0xb2</td><td align="center">getstatic</td><td align="center">获取指定类的静态域，并将其值压入栈顶</td></tr><tr><td align="center">0xb3</td><td align="center">putstatic</td><td align="center">为指定的类的静态域赋值</td></tr><tr><td align="center">0xb4</td><td align="center">getfield</td><td align="center">获取指定类的实例域，并将其值压入栈顶</td></tr><tr><td align="center">0xb5</td><td align="center">putfield</td><td align="center">为指定的类的实例域赋值</td></tr><tr><td align="center">0xb6</td><td align="center">invokevirtual</td><td align="center">调用实例方法</td></tr><tr><td align="center">0xb7</td><td align="center">invokespecial</td><td align="center">调用超类构造方法，实例初始化方法，私有方法</td></tr><tr><td align="center">0xb8</td><td align="center">invokestatic</td><td align="center">调用静态方法</td></tr><tr><td align="center">0xb9</td><td align="center">invokeinterface</td><td align="center">调用接口方法</td></tr><tr><td align="center">0xba</td><td align="center">–</td><td align="center"></td></tr><tr><td align="center">0xbb</td><td align="center">new</td><td align="center">创建一个对象，并将其引用值压入栈顶</td></tr><tr><td align="center">0xbc</td><td align="center">newarray</td><td align="center">创建一个指定原始类型（如int, float, char…）的数组，并将其引用值压入栈顶</td></tr><tr><td align="center">0xbd</td><td align="center">anewarray</td><td align="center">创建一个引用型（如类，接口，数组）的数组，并将其引用值压入栈顶</td></tr><tr><td align="center">0xbe</td><td align="center">arraylength</td><td align="center">获得数组的长度值并压入栈顶</td></tr><tr><td align="center">0xbf</td><td align="center">athrow</td><td align="center">将栈顶的异常抛出</td></tr><tr><td align="center">0xc0</td><td align="center">checkcast</td><td align="center">检验类型转换，检验未通过将抛出ClassCastException</td></tr><tr><td align="center">0xc1</td><td align="center">instanceof</td><td align="center">检验对象是否是指定的类的实例，如果是将1压入栈顶，否则将0压入栈顶</td></tr><tr><td align="center">0xc2</td><td align="center">monitorenter</td><td align="center">获得对象的锁，用于同步方法或同步块</td></tr><tr><td align="center">0xc3</td><td align="center">monitorexit</td><td align="center">释放对象的锁，用于同步方法或同步块</td></tr><tr><td align="center">0xc4</td><td align="center">wide</td><td align="center">当本地变量的索引超过255时使用该指令扩展索引宽度。</td></tr><tr><td align="center">0xc5</td><td align="center">multianewarray</td><td align="center">create a new array of dimensions dimensions with elements of type identified by class reference in constant pool index (indexbyte1 &lt;&lt; 8 + indexbyte2); the sizes of each dimension is identified by count1, [count2, etc.]</td></tr><tr><td align="center">0xc6</td><td align="center">ifnull</td><td align="center">if value is null, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 &lt;&lt; 8 + branchbyte2)</td></tr><tr><td align="center">0xc7</td><td align="center">ifnonnull</td><td align="center">if value is not null, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 &lt;&lt; 8 + branchbyte2)</td></tr><tr><td align="center">0xc8</td><td align="center">goto_w</td><td align="center">goes to another instruction at branchoffset (signed int constructed from unsigned bytes branchbyte1 &lt;&lt; 24 + branchbyte2 &lt;&lt; 16 + branchbyte3 &lt;&lt; 8 + branchbyte4)</td></tr><tr><td align="center">0xc9</td><td align="center">jsr_w</td><td align="center">jump to subroutine at branchoffset (signed int constructed from unsigned bytes branchbyte1 &lt;&lt; 24 + branchbyte2 &lt;&lt; 16 + branchbyte3 &lt;&lt; 8 + branchbyte4) and place the return address on the stack</td></tr><tr><td align="center">0xca</td><td align="center">breakpoint</td><td align="center">reserved for breakpoints in Java debuggers; should not appear in any class file</td></tr><tr><td align="center">0xcb-0xfd</td><td align="center">未命名</td><td align="center">these values are currently unassigned for opcodes and are reserved for future use</td></tr><tr><td align="center">0xfe</td><td align="center">impdep1</td><td align="center">reserved for implementation-dependent operations within debuggers; should not appear in any class file</td></tr><tr><td align="center">0xff</td><td align="center">impdep2</td><td align="center">reserved for implementation-dependent operations within debuggers; should not appear in any class file</td></tr></tbody></table></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-JVM基础&quot;&gt;&lt;a href=&quot;#一-JVM基础&quot; class=&quot;headerlink&quot; title=&quot;一 JVM基础&quot;&gt;&lt;/a&gt;一 JVM基础&lt;/h3&gt;&lt;p&gt;JVM只是一个规范 具体会有很多类型的JVM实现 比如Hotspot、J9、Microsoft VM</summary>
      
    
    
    
    <category term="JVM" scheme="http://example.com/categories/JVM/"/>
    
    
    <category term="JVM" scheme="http://example.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>多线程与高并发(六)</title>
    <link href="http://example.com/2022/04/17/%E9%AB%98%E5%B9%B6%E5%8F%91-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E5%85%AD/"/>
    <id>http://example.com/2022/04/17/%E9%AB%98%E5%B9%B6%E5%8F%91-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E5%85%AD/</id>
    <published>2022-04-17T08:39:30.404Z</published>
    <updated>2022-04-18T13:52:01.812Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-JMH-Java-Microbenchmark-Harness"><a href="#一-JMH-Java-Microbenchmark-Harness" class="headerlink" title="一 JMH(Java Microbenchmark Harness)"></a>一 JMH(Java Microbenchmark Harness)</h3><p>JMH是一个基准测试套件工具 JMH与JMeter侧重点不一样 JMeter更多的是对rest api进行压测 而JMH关注的粒度更细 它发现的更多的是某块性能糟点的代码 然后对优化方案进行基准测试对比。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">JMH官网地址</span></span><br><span class="line"><span class="attr">http</span>:<span class="string">//openjdk.java.net/projects/code-tools/jmh/</span></span><br></pre></td></tr></table></figure><h3 id="二-搭建JMH测试环境"><a href="#二-搭建JMH测试环境" class="headerlink" title="二 搭建JMH测试环境"></a>二 搭建JMH测试环境</h3><ul><li><p><strong>引入JMH依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.34<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-generator-annprocess<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.34<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>idea中安装jmh的插件</strong> </p></li><li><p><strong>由于测试过程中需要用到注解 所以请确保idea中打开了注解相关配置</strong> Compiler –&gt; Annotation Processors —&gt; Enable annotation processing </p><p><img src="/images/0091.png" alt="image-20220417170147806"></p></li><li><p><strong>业务类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PS</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; nums = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            nums.add(<span class="number">1000000</span> + r.nextInt(<span class="number">1000000</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">foreach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        nums.forEach(v -&gt; isPrime(v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parallel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        nums.stream().parallel().forEach(PS::isPrime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= num/<span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试类</strong></p><p>jmh的测试类一定要写在src/test目录下 不然是JMH的注解不会生效 另外jmh 的测试类需要放在某个包下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.poi.tl.test.PS;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PSTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span> <span class="comment">//表示下面的方法要进行基准测试</span></span><br><span class="line">    <span class="meta">@Warmup(iterations = 1, time = 3)</span> <span class="comment">//预热 由于JVM中对特定代码会存在优化 预热对测试结果很重要 iterations = 1 表示调用1次方法 time 表示下一次调用的时间间隔 单位(秒)</span></span><br><span class="line">    <span class="meta">@Fork(5)</span> <span class="comment">//指定线程数(多少个线程去调用下面的方式)</span></span><br><span class="line">    <span class="meta">@BenchmarkMode(Mode.Throughput)</span> <span class="comment">//基准测试的模式 Mode.Throughput 吞吐量</span></span><br><span class="line">    <span class="meta">@Measurement(iterations = 1, time = 3)</span> <span class="comment">//总共测试多少次</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PS.foreach();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>测试报告</strong></p><p>ops/s 意思是说每秒可以执行多少个操作(调用多少个这样的方法)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JMH version: 1.34</span></span><br><span class="line"><span class="comment"># VM version: JDK 1.8.0_291, Java HotSpot(TM) 64-Bit Server VM, 25.291-b10</span></span><br><span class="line"><span class="comment"># VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home/jre/bin/java</span></span><br><span class="line"><span class="comment"># VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=61645:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8</span></span><br><span class="line"><span class="comment"># Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)</span></span><br><span class="line"><span class="comment"># Warmup: 1 iterations, 3 s each</span></span><br><span class="line"><span class="comment"># Measurement: 1 iterations, 3 s each</span></span><br><span class="line"><span class="comment"># Timeout: 10 min per iteration</span></span><br><span class="line"><span class="comment"># Threads: 1 thread, will synchronize iterations</span></span><br><span class="line"><span class="comment"># Benchmark mode: Throughput, ops/time</span></span><br><span class="line"><span class="comment"># Benchmark: test.PSTest.testPS</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Run progress: 0.00% complete, ETA 00:00:30</span></span><br><span class="line"><span class="comment"># Fork: 1 of 5</span></span><br><span class="line"><span class="comment"># Warmup Iteration   1: 18.113 ops/s</span></span><br><span class="line">Iteration   1: 18.699 ops/s</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run progress: 20.00% complete, ETA 00:00:28</span></span><br><span class="line"><span class="comment"># Fork: 2 of 5</span></span><br><span class="line"><span class="comment"># Warmup Iteration   1: 16.541 ops/s</span></span><br><span class="line">Iteration   1: 16.696 ops/s</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run progress: 40.00% complete, ETA 00:00:21</span></span><br><span class="line"><span class="comment"># Fork: 3 of 5</span></span><br><span class="line"><span class="comment"># Warmup Iteration   1: 13.690 ops/s</span></span><br><span class="line">Iteration   1: 13.818 ops/s</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run progress: 60.00% complete, ETA 00:00:14</span></span><br><span class="line"><span class="comment"># Fork: 4 of 5</span></span><br><span class="line"><span class="comment"># Warmup Iteration   1: 19.432 ops/s</span></span><br><span class="line">Iteration   1: 19.370 ops/s</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run progress: 80.00% complete, ETA 00:00:07</span></span><br><span class="line"><span class="comment"># Fork: 5 of 5</span></span><br><span class="line"><span class="comment"># Warmup Iteration   1: 15.598 ops/s</span></span><br><span class="line">Iteration   1: 15.824 ops/s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Result <span class="string">&quot;test.PSTest.testPS&quot;</span>:</span><br><span class="line">  16.881 ±(99.9%) 8.617 ops/s [Average]</span><br><span class="line">  (min, avg, max) = (13.818, 16.881, 19.370), stdev = 2.238</span><br><span class="line">  CI (99.9%): [8.264, 25.499] (assumes normal distribution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Run complete. Total time: 00:00:35</span></span><br><span class="line"></span><br><span class="line">REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on</span><br><span class="line">why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial</span><br><span class="line">experiments, perform baseline and negative tests that provide experimental control, make sure</span><br><span class="line">the benchmarking environment is safe on JVM/OS/HW level, ask <span class="keyword">for</span> reviews from the domain experts.</span><br><span class="line">Do not assume the numbers tell you what you want them to tell.</span><br><span class="line"></span><br><span class="line">Benchmark       Mode  Cnt   Score   Error  Units</span><br><span class="line">PSTest.testPS  thrpt    5  16.881 ± 8.617  ops/s</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><h3 id="三-Disruptor"><a href="#三-Disruptor" class="headerlink" title="三 Disruptor"></a>三 Disruptor</h3><p>Disruptor 性能极高 号称单机速度最快的MQ </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#disruptor主页</span></span><br><span class="line">https://lmax-exchange.github.io/disruptor/</span><br></pre></td></tr></table></figure><p><strong>Disruptor的特点</strong> 无锁，高并发，使用环形Buffer，直接覆盖(不用清除)旧的数据，降低GC频率，实现了基于事件的生产者消费者模式</p><p><strong>RingBuffer</strong> 环形队列 RingBuffer的序号指向下一个可用的元素 采用数组实现 没有首尾指针</p><p><strong>Disruptor开发步骤</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、定义Event(队列中需要处理的元素)</span><br><span class="line">2、定义Event工厂(生产者 用于填充队列)</span><br><span class="line">3、定义EventHandler(消费者 用于处理容器中的元素) </span><br></pre></td></tr></table></figure><ul><li><p><strong>disruptor依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lmax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>disruptor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Event类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongEvent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">long</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;LogEvent&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;value=&quot;</span> + value +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>EventFactory类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongEventFactory</span> <span class="keyword">implements</span> <span class="title">EventFactory</span>&lt;<span class="title">LongEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LongEvent <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//之所以要用工厂去构建对象 而不是直接new对象 这里主要是考虑到效率问题 disruptor会在初始化的时候 会调用</span></span><br><span class="line">        <span class="comment">// Event工厂 将整个环形队列给占满 这样 环形队列的内存基本就可以固定了，可以减少GC的频率</span></span><br><span class="line">        <span class="comment">// 然后新来的值 只要覆盖原位置上的对象的属性即可</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LongEvent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>EventHandler类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongEventHandler</span> <span class="keyword">implements</span> <span class="title">EventHandler</span>&lt;<span class="title">LongEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(LongEvent event, <span class="keyword">long</span> sequence, <span class="keyword">boolean</span> endOfBatch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(<span class="string">&quot;[&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;]&quot;</span> + event + <span class="string">&quot; 序号:&quot;</span> + sequence);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试类一</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//事件工厂</span></span><br><span class="line">        LongEventFactory factory = <span class="keyword">new</span> LongEventFactory();</span><br><span class="line">        <span class="comment">//环形队列的大小 环形队列的大小必须大于2</span></span><br><span class="line">        <span class="keyword">int</span> bufferSize = <span class="number">1024</span>;</span><br><span class="line">        <span class="comment">//disruptor构造器</span></span><br><span class="line">        Disruptor&lt;LongEvent&gt; disruptor = <span class="keyword">new</span> Disruptor&lt;LongEvent&gt;(factory, bufferSize, Executors.defaultThreadFactory());</span><br><span class="line">        <span class="comment">//连接事件处理器 LongEventHandler 负责消费消息</span></span><br><span class="line">        disruptor.handleEventsWith(<span class="keyword">new</span> LongEventHandler());</span><br><span class="line">        <span class="comment">//启动disruptor</span></span><br><span class="line">        disruptor.start();</span><br><span class="line">        <span class="comment">//获取环形队列</span></span><br><span class="line">        RingBuffer&lt;LongEvent&gt; ringBuffer = disruptor.getRingBuffer();</span><br><span class="line">        <span class="comment">//获取序列号</span></span><br><span class="line">        <span class="keyword">long</span> sequence = ringBuffer.next();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取这个序列号上的元素</span></span><br><span class="line">            LongEvent event = ringBuffer.get(sequence);</span><br><span class="line">            event.set(<span class="number">8888L</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//发布消息到disruptor中</span></span><br><span class="line">            ringBuffer.publish(sequence);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试类二</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//事件工厂</span></span><br><span class="line">        LongEventFactory factory = <span class="keyword">new</span> LongEventFactory();</span><br><span class="line">        <span class="comment">//环形队列的大小 环形队列的大小必须大于2</span></span><br><span class="line">        <span class="keyword">int</span> bufferSize = <span class="number">1024</span>;</span><br><span class="line">        <span class="comment">//disruptor构造器</span></span><br><span class="line">        Disruptor&lt;LongEvent&gt; disruptor = <span class="keyword">new</span> Disruptor&lt;LongEvent&gt;(factory, bufferSize, DaemonThreadFactory.INSTANCE);</span><br><span class="line">        <span class="comment">//连接事件处理器</span></span><br><span class="line">        disruptor.handleEventsWith(<span class="keyword">new</span> LongEventHandler());</span><br><span class="line">        <span class="comment">//启动disruptor</span></span><br><span class="line">        disruptor.start();</span><br><span class="line">        <span class="comment">//获取环形队列</span></span><br><span class="line">        RingBuffer&lt;LongEvent&gt; ringBuffer = disruptor.getRingBuffer();</span><br><span class="line">        <span class="comment">//发布消息</span></span><br><span class="line">        EventTranslator&lt;LongEvent&gt; translator = <span class="keyword">new</span> EventTranslator&lt;LongEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">translateTo</span><span class="params">(LongEvent event, <span class="keyword">long</span> sequence)</span> </span>&#123;</span><br><span class="line">                event.set(<span class="number">8888L</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        ringBuffer.publishEvent(translator);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这个其实就是允许你传一个参 将这个参数设置为event中的值</span></span><br><span class="line">        EventTranslatorOneArg&lt;LongEvent, Long&gt; translator_2 = <span class="keyword">new</span> EventTranslatorOneArg&lt;LongEvent, Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">translateTo</span><span class="params">(LongEvent event, <span class="keyword">long</span> sequence, Long value)</span> </span>&#123;</span><br><span class="line">                event.set(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        ringBuffer.publishEvent(translator_2, <span class="number">888L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这个其实就是允许你传2个参 将这个参数设置为event中的值</span></span><br><span class="line">        EventTranslatorTwoArg&lt;LongEvent, Long, Long&gt; translator_3 = <span class="keyword">new</span> EventTranslatorTwoArg&lt;LongEvent, Long, Long&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">translateTo</span><span class="params">(LongEvent event, <span class="keyword">long</span> sequence, Long arg0, Long arg1)</span> </span>&#123;</span><br><span class="line">                event.set(arg0 + arg1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        ringBuffer.publishEvent(translator_3, <span class="number">888L</span>, <span class="number">8882L</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试类三</strong></p><p>指定多个消费者 之前的测试类一和测试类2都是有一个消费者 另外还有就是消费者消费过程中的异常该如何去处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//事件工厂</span></span><br><span class="line">        LongEventFactory factory = <span class="keyword">new</span> LongEventFactory();</span><br><span class="line">        <span class="comment">//环形队列的大小 环形队列的大小必须大于2</span></span><br><span class="line">        <span class="keyword">int</span> bufferSize = <span class="number">1024</span>;</span><br><span class="line">        <span class="comment">//disruptor构造器</span></span><br><span class="line">        Disruptor&lt;LongEvent&gt; disruptor = <span class="keyword">new</span> Disruptor&lt;LongEvent&gt;(factory, bufferSize, Executors.defaultThreadFactory());</span><br><span class="line">        LongEventHandler h1 = <span class="keyword">new</span> LongEventHandler();</span><br><span class="line">        LongEventHandler h2 = <span class="keyword">new</span> LongEventHandler();</span><br><span class="line">        <span class="comment">//为消费者指定异常处理器</span></span><br><span class="line">        disruptor.handleExceptionsFor(h1).with(<span class="keyword">new</span> ExceptionHandler&lt;LongEvent&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span> <span class="comment">//这个方法处理的是当消费消息的时候出了异常该如何处理</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleEventException</span><span class="params">(Throwable ex, <span class="keyword">long</span> sequence, LongEvent event)</span> </span>&#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span> <span class="comment">//这个方法是用于当消费者线程启动的时候出现异常该如何处理</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleOnStartException</span><span class="params">(Throwable ex)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Exception Start to Handle&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span> <span class="comment">//这个方法是用于当消费者线程shutdown的时候出现异常该如何处理</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleOnShutdownException</span><span class="params">(Throwable ex)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Exception Handle &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//连接事件处理器</span></span><br><span class="line">        disruptor.handleEventsWith(h1,h2);</span><br><span class="line">        <span class="comment">//启动disruptor</span></span><br><span class="line">        disruptor.start();</span><br><span class="line">        <span class="comment">//获取环形队列</span></span><br><span class="line">        RingBuffer&lt;LongEvent&gt; ringBuffer = disruptor.getRingBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i ++) &#123;</span><br><span class="line">            <span class="comment">//获取序列号</span></span><br><span class="line">            <span class="keyword">long</span> sequence = ringBuffer.next();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//获取这个序列号上的元素</span></span><br><span class="line">                LongEvent event = ringBuffer.get(sequence);</span><br><span class="line">                event.set(<span class="number">8888L</span>);</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//发布消息到disruptor中</span></span><br><span class="line">                ringBuffer.publish(sequence);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        disruptor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>Disruptor的生产者类型(ProducerType)</strong></p><p>ProducerType有两种模式 Producer.MULTI和Producer.SINGLE 默认是MULTI 表示多线程模式下生产sequence 如果确认是单线程生产者 可以指定为SINGLE </p><p>WaitStrategy是disruptor的等待策略 默认有八种 支持自定义</p><ul><li><strong>BlockingWaitStrategy</strong> 通过线程阻塞的方式 等待生产者唤醒 被唤醒后 再循环检查依赖的sequence是否已被消费</li><li><strong>BusySpinWaitStrategy</strong> 线程一直自旋等待 比较消耗CPU</li><li><strong>LiteBlockingWaitStrategy</strong> 轻量级的阻塞策略 也是通过线程阻塞的方式 等待生产者唤醒 与 BlockingWaitStrategy有些许差别 性能更好</li><li><strong>LiteTimeoutBlockingWaitStrategy</strong> 与LiteBlockingWaitStrategy相比设置了线程阻塞的超时时间 超时后抛出异常</li><li><strong>PhasedBackoffWaitStrategy</strong> 根据时间参数和传入的等待策略来决定使用哪种等待策略</li><li><strong>TimeoutBlockingWaitStrategy</strong> 相对于BlockingWaitStrategy来说设置了等待时间 超过后抛异常</li><li><strong>YieldingWaitStrategy</strong> 尝试100次然后线程调用Thread.yield()让出CPU</li><li><strong>SleepingWaitStrategy</strong> 线程先sleep 等待</li></ul><p>下面是disruptor的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Disruptor</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">final</span> EventFactory&lt;T&gt; eventFactory,</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">final</span> <span class="keyword">int</span> ringBufferSize,</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">final</span> ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">final</span> ProducerType producerType, //生产者类型 默认为MULTI</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">final</span> WaitStrategy waitStrategy)</span></span>&#123;&#125; <span class="comment">//WaitStrategy等待策略</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-JMH-Java-Microbenchmark-Harness&quot;&gt;&lt;a href=&quot;#一-JMH-Java-Microbenchmark-Harness&quot; class=&quot;headerlink&quot; title=&quot;一 JMH(Java Microbenchmark </summary>
      
    
    
    
    <category term="高并发" scheme="http://example.com/categories/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="高并发" scheme="http://example.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>多线程与高并发(五)</title>
    <link href="http://example.com/2022/04/14/%E9%AB%98%E5%B9%B6%E5%8F%91-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E4%BA%94/"/>
    <id>http://example.com/2022/04/14/%E9%AB%98%E5%B9%B6%E5%8F%91-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E4%BA%94/</id>
    <published>2022-04-14T13:28:34.456Z</published>
    <updated>2022-04-17T08:36:57.726Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-线程池"><a href="#一-线程池" class="headerlink" title="一 线程池"></a>一 线程池</h3><p>java提供的线程池主要有两种</p><ul><li><strong>ThreadPoolExecutor</strong></li><li><strong>ForkJoinPool</strong> 利用分治的思想 将一个大任务 拆成N个小任务放到线程池中进行处理 类似于CompletableFuture的allOf</li></ul><h3 id="二-ThreadPoolExecutor"><a href="#二-ThreadPoolExecutor" class="headerlink" title="二 ThreadPoolExecutor"></a>二 ThreadPoolExecutor</h3><p><strong>源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="params"><span class="function">TimeUnit unit,</span></span></span><br><span class="line"><span class="params"><span class="function">BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="params"><span class="function">ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="params"><span class="function">RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//核心方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Proceed in 3 steps:</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 1. If fewer than corePoolSize threads are running, try to</span></span><br><span class="line"><span class="comment">         * start a new thread with the given command as its first</span></span><br><span class="line"><span class="comment">         * task.  The call to addWorker atomically checks runState and</span></span><br><span class="line"><span class="comment">         * workerCount, and so prevents false alarms that would add</span></span><br><span class="line"><span class="comment">         * threads when it shouldn&#x27;t, by returning false.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 2. If a task can be successfully queued, then we still need</span></span><br><span class="line"><span class="comment">         * to double-check whether we should have added a thread</span></span><br><span class="line"><span class="comment">         * (because existing ones died since last checking) or that</span></span><br><span class="line"><span class="comment">         * the pool shut down since entry into this method. So we</span></span><br><span class="line"><span class="comment">         * recheck state and if necessary roll back the enqueuing if</span></span><br><span class="line"><span class="comment">         * stopped, or start a new thread if there are none.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 3. If we cannot queue task, then we try to add a new</span></span><br><span class="line"><span class="comment">         * thread.  If it fails, we know we are shut down or saturated</span></span><br><span class="line"><span class="comment">         * and so reject the task.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">            <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            c = ctl.get();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">            <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">            <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">                reject(command);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">                addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">            reject(command);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>线程拒绝策略</strong> jdk默认提供了4种拒绝策略</p><ul><li><strong>AbortPolicy</strong> 线程池满了以后直接抛异常</li><li><strong>CallerRunsPolicy</strong> 由调用者(调用pool.execute() 或者pool.submit()方法的线程)自己去执行</li><li><strong>DiscardPolicy</strong> 丢弃这个任务</li><li><strong>DiscardOldestPolicy</strong> 丢弃最老的任务</li></ul><p>实际业务中 一般都会采用自定义的拒绝策略 而不用java自带的拒绝策略</p><p><strong>常见的线程池</strong></p><ul><li><p><strong>Executors.newSingleThreadExecutor()</strong> 只有一个线程的线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">    (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                            <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                            <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Executors.newCachedThreadPool()</strong> 这个实际上就相当于来一个任务 就创建一个线程 它的核心线程数是0 任务队列是SynchronousQueue 这个队列的容量是0 放不下任何数据 所以来一个任务 就会创建一个任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Executors.newFixedThreadPool()</strong> 固定线程数的线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Executors.newScheduledThreadPool()</strong> 定时器的线程池 内部是用的DelayedWorkQueue 这个queue和DelayQueue效果是一样 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span>, NANOSECONDS,</span><br><span class="line">        <span class="keyword">new</span> DelayedWorkQueue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>用法示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       ScheduledExecutorService executorService = Executors.newScheduledThreadPool(<span class="number">4</span>);</span><br><span class="line">       <span class="comment">//这个表示每个5分钟执行下一个任务 第一个任务执行的时间向当前时间推后0秒(也就是立即执行)</span></span><br><span class="line">       executorService.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;执行任务&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;, <span class="number">0</span>,  <span class="number">300</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>并发与并行的区别</strong> 并发强调的是多个任务同时提交 并行强调的是多个任务同时执行 并行是并发的一个子集 也可以说并行是真正的并发(多个CPU执行 每个CPU执行不同的任务) 而并发 一个CPU 不同时间片执行不同的任务 也可以称之为并发</p><p><strong>自定义拒绝策略案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       ThreadPoolExecutor pool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">4</span>,</span><br><span class="line">               <span class="number">10</span>, <span class="number">30</span>, TimeUnit.SECONDS,</span><br><span class="line">               <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">100</span>), <span class="keyword">new</span> MyRejectedPolicy());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义拒绝策略</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRejectedPolicy</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor executor)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//打日志 log.into(xxx r xxx)</span></span><br><span class="line">        <span class="comment">//对被拒绝的任务进行转储 redis、kafka这些</span></span><br><span class="line">        <span class="comment">//可以利用executor做重试操作等等 具体的要看具体的业务要求</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-ThreadPoolExecutor-源码解析"><a href="#三-ThreadPoolExecutor-源码解析" class="headerlink" title="三 ThreadPoolExecutor 源码解析"></a>三 ThreadPoolExecutor 源码解析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、ctl 可以看做一个int类型的数字 高三位表示线程池状态 低29位表示worker数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line"><span class="comment">//2、COUNT_BITS </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="number">3</span>;</span><br><span class="line"><span class="comment">//线程池允许的最大线程数 这个值不会变更了 2^29 - 1</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY   = (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line"><span class="comment">//线程池的五种状态 </span></span><br><span class="line"><span class="comment">//RUNNING 11100000000000000000000000000000 111 表示RUNNING状态 线程池正常运行</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="comment">//SHUTDOWN 00000000000000000000000000000000 000 表示SHUTDOWN状态 调用线程池的shutDown方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   =  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="comment">//STOP 00100000000000000000000000000000 001 表示STOP状态 调用线程池shutdownNow方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       =  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="comment">//TIDYING 01000000000000000000000000000000 010 表示TIDYING状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIDYING    =  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="comment">//TERMINATED 01100000000000000000000000000000 011 表示TERMINATED状态 整个线程池生命周期结束了</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED =  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="comment">//获取线程池的状态 ~CAPACITY = 11100000000000000000000000000000 低29位都为0 屏蔽worker的数量</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">runStateOf</span><span class="params">(<span class="keyword">int</span> c)</span>     </span>&#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125;</span><br><span class="line"><span class="comment">//获取线程池worker的数量 CAPACITY = 00011111111111111111111111111111 高三位都是0 屏蔽线程池状态</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">workerCountOf</span><span class="params">(<span class="keyword">int</span> c)</span>  </span>&#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125;</span><br><span class="line"><span class="comment">//根据线程池的状态rs 和 worker的数量 生成新的ctl的值 所以用的是|运算 这样就能保证 高三位和低29位不会相互影响</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ctlOf</span><span class="params">(<span class="keyword">int</span> rs, <span class="keyword">int</span> wc)</span> </span>&#123; <span class="keyword">return</span> rs | wc; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//c 表示ctl s 表示线程池状态 线程池状态小于ctl</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">runStateLessThan</span><span class="params">(<span class="keyword">int</span> c, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> c &lt; s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//c 表示ctl s 表示线程池状态 线程池状态大于等于ctl</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">runStateAtLeast</span><span class="params">(<span class="keyword">int</span> c, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> c &gt;= s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断线程池的状态是不是Running状态 只有Running状态的ctl才是一个负数 最高位为1 其余的线程池状态都是正数(高位大于0)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRunning</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> c &lt; SHUTDOWN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法 只是一些属性的设置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="params"><span class="function">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="params"><span class="function">                              ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="params"><span class="function">                              RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">            keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">this</span>.acc = System.getSecurityManager() == <span class="keyword">null</span> ?</span><br><span class="line">                <span class="keyword">null</span> :</span><br><span class="line">                AccessController.getContext();</span><br><span class="line">        <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">        <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">        <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">        <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">        <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">        <span class="keyword">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提交任务(核心方法)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">  <span class="comment">//获取ctl</span></span><br><span class="line">  <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">  <span class="comment">//获取线程池中worker的数量 如果小于核心线程数(核心线程不够)</span></span><br><span class="line">  <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">    <span class="comment">//表示要加一个worker 且是加的核心线程 如果加成功了返回</span></span><br><span class="line">    <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span><br><span class="line">      <span class="keyword">return</span>; <span class="comment">//核心线程未满</span></span><br><span class="line">    <span class="comment">//核心线程没有加成功 重新获取最新的ctl</span></span><br><span class="line">    c = ctl.get();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//判断线程池是否正处于RUNNING状态且任务正常的加入到任务队列中了</span></span><br><span class="line">  <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">    <span class="keyword">int</span> recheck = ctl.get(); <span class="comment">//重新获取新的ctl值</span></span><br><span class="line">    <span class="keyword">if</span> (!isRunning(recheck) &amp;&amp; remove(command)) <span class="comment">//如果这个时候线程池状态不是RUNNING状态(证明执行过shutdown命令)需要先移除刚刚提交的任务 并且执行拒绝策略</span></span><br><span class="line">      <span class="comment">//执行拒绝策略</span></span><br><span class="line">      reject(command);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>) <span class="comment">//这里之所以要判断线程数是否为0 主要是因为线程池的核心线程数是允许为0的</span></span><br><span class="line">      addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>); <span class="comment">//加一个空的任务进来</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果线程池不是运行态 或者进入任务队列失败 则尝试创建worker 执行任务(这里就利用到最大线程数了)</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">    reject(command);<span class="comment">//如果最大线程数没加成功 执行拒绝策略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</span><br><span class="line">  retry:</span><br><span class="line">  <span class="comment">//外层自旋</span></span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="comment">//获取ctl</span></span><br><span class="line">    <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">    <span class="comment">//获取线程状态</span></span><br><span class="line">    <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程池状态大于SHUTDOWN时 直接返回false </span></span><br><span class="line">    <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class="line">        <span class="comment">//线程池状态等于SHUTDOWN时 且 firstTask不为null时直接返回false</span></span><br><span class="line">        <span class="comment">//线程池状态等于SHUTDOWN时 且队列为空 直接返回false</span></span><br><span class="line">        ! (rs == SHUTDOWN &amp;&amp;</span><br><span class="line">           firstTask == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">           ! workQueue.isEmpty()))</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//内存自旋</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">      <span class="comment">//计算worker数量</span></span><br><span class="line">      <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line">      <span class="comment">//worker数量超过容量的时候 直接返回false 如果worker是核心线程 则比较核心线程数 大于等于核心线程数返回false</span></span><br><span class="line">      <span class="comment">//如果worker是非核心线程 则比较最大线程数 如果大于等于最大线程数 则返回false</span></span><br><span class="line">      <span class="keyword">if</span> (wc &gt;= CAPACITY ||</span><br><span class="line">          wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="comment">//线程数自增</span></span><br><span class="line">      <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">        <span class="comment">//直接跳出外层循环</span></span><br><span class="line">        <span class="keyword">break</span> retry;</span><br><span class="line">      <span class="comment">//如果没有加成功 则重新拿最新的ctl</span></span><br><span class="line">      c = ctl.get();  <span class="comment">//</span></span><br><span class="line">      <span class="keyword">if</span> (runStateOf(c) != rs) <span class="comment">//计算线程的状态 如果发生改变了</span></span><br><span class="line">        <span class="keyword">continue</span> retry; <span class="comment">//继续外层循环</span></span><br><span class="line">      <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</span><br><span class="line">  Worker w = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    w = <span class="keyword">new</span> Worker(firstTask);<span class="comment">//包装一个woker Worker构造器底层会创建一个Thread</span></span><br><span class="line">    <span class="keyword">final</span> Thread t = w.thread; <span class="comment">//firstTask对应的线程</span></span><br><span class="line">    <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock; <span class="comment">//获取锁</span></span><br><span class="line">      mainLock.lock();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> rs = runStateOf(ctl.get()); <span class="comment">//重新计算线程池的状态</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//当线程池状态是RUNNING时或者 线程池状态是SHUTDOWN但是firstTask为空时</span></span><br><span class="line">        <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</span><br><span class="line">            (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;</span><br><span class="line">          <span class="comment">//worker已经调用过start方法了 抛出异常</span></span><br><span class="line">          <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">          <span class="comment">//把worker加进来</span></span><br><span class="line">          workers.add(w); <span class="comment">// private final HashSet&lt;Worker&gt; workers = new HashSet&lt;Worker&gt;();</span></span><br><span class="line">          <span class="comment">//计算线程池中线程的数量</span></span><br><span class="line">          <span class="keyword">int</span> s = workers.size();</span><br><span class="line">          <span class="keyword">if</span> (s &gt; largestPoolSize)</span><br><span class="line">            largestPoolSize = s;</span><br><span class="line">          <span class="comment">//证明worker加成功了</span></span><br><span class="line">          workerAdded = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (workerAdded) &#123;</span><br><span class="line">        <span class="comment">//启动这个线程</span></span><br><span class="line">        t.start();</span><br><span class="line">        workerStarted = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (! workerStarted)</span><br><span class="line">      addWorkerFailed(w);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> workerStarted;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="四-ForkJoinPool"><a href="#四-ForkJoinPool" class="headerlink" title="四 ForkJoinPool"></a>四 ForkJoinPool</h3><p>ForkJoin线程池可以执行一种特殊的任务 它可以把一个大任务拆分成N个小任务并行执行 然后再将多个小任务的结果合并起来 组成大任务的执行结果，ForkJoin其实就是一种分治的思想，ForkJoin线程池是JDK1.7之后引入的。</p><p><img src="/images/0090.png" alt="image-20220309221613554"></p><p>ForkJoin框架提供了两个主要的子类用于实现ForkJoin任务</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">RecursiveAction：用于没有返回结果的任务。</span></span><br><span class="line"><span class="attr">RecursiveTask</span> <span class="string">：用于有返回结果的任务。</span></span><br></pre></td></tr></table></figure><p><strong>ForkJoin示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000000</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_NUM = <span class="number">5000</span>;</span><br><span class="line">    <span class="keyword">static</span> Random r = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.length; i++) &#123;</span><br><span class="line">            num[i] = r.nextInt(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.stream(num).sum());</span><br><span class="line">        System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">        AddTask task = <span class="keyword">new</span> AddTask(<span class="number">0</span>, num.length);</span><br><span class="line">        pool.execute(task);</span><br><span class="line">        <span class="comment">// Long sum = task.get(); 都可以</span></span><br><span class="line">        Long sum = task.join(); <span class="comment">//都可以</span></span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AddTask</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> start, end;</span><br><span class="line">        AddTask(<span class="keyword">int</span> start, <span class="keyword">int</span> end) &#123;</span><br><span class="line">            <span class="keyword">this</span>.start = start;</span><br><span class="line">            <span class="keyword">this</span>.end = end;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (end - start &lt;= MAX_NUM) &#123;</span><br><span class="line">                <span class="keyword">long</span> sum = <span class="number">0L</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = start;  i &lt; end; i++) &#123;</span><br><span class="line">                    sum += num[i];</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;from: &quot;</span> + start + <span class="string">&quot; to:&quot;</span> + end  + <span class="string">&quot;=&quot;</span> + sum);</span><br><span class="line">                <span class="keyword">return</span> sum;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> middle = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">                AddTask subTask_1 = <span class="keyword">new</span> AddTask(start, middle);</span><br><span class="line">                AddTask subTask_2 = <span class="keyword">new</span> AddTask(middle, end);</span><br><span class="line">                subTask_1.fork();</span><br><span class="line">                subTask_2.fork();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//子任务的结果合并</span></span><br><span class="line">                Long val_1 = subTask_1.join();</span><br><span class="line">                Long val_2 = subTask_2.join();</span><br><span class="line">                <span class="keyword">return</span> val_1 + val_2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-线程池&quot;&gt;&lt;a href=&quot;#一-线程池&quot; class=&quot;headerlink&quot; title=&quot;一 线程池&quot;&gt;&lt;/a&gt;一 线程池&lt;/h3&gt;&lt;p&gt;java提供的线程池主要有两种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ThreadPoolExecutor&lt;/s</summary>
      
    
    
    
    <category term="高并发" scheme="http://example.com/categories/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="高并发" scheme="http://example.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>算法入门(一)</title>
    <link href="http://example.com/2022/04/11/%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8(%E4%B8%80)/"/>
    <id>http://example.com/2022/04/11/%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8(%E4%B8%80)/</id>
    <published>2022-04-11T12:46:07.213Z</published>
    <updated>2022-04-16T14:39:58.895Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-位运算"><a href="#一-位运算" class="headerlink" title="一 位运算"></a>一 位运算</h3><ul><li>&amp; 按位与 只有当操作符两边都是1的时候 &amp;的结果才为1 否则为0   0&amp;0=0; 0&amp;1=0; 1&amp;0=0; 1&amp;1=1</li><li>| 按位或 表示有一个操作符两边有一个为1 |的结果为1 否则为0     0|0=0； 0|1=1； 1|0=1； 1|1=1</li><li>^ 按位异或 值不同则为1 值相同则为0 0^0=0； 0^1=1； 1^0=1； 1^1=0</li><li>~ 按位取反 即将0变成1 将1变成0 ~1=0； ~0=1；</li><li><code>&gt;&gt;</code> 右移 将一个数的二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃 每右移一位相当于除以2</li><li><code>&gt;&gt;&gt;</code> 无符号右移 将一个数的二进制位全部右移若干位 高位全部补0 </li><li><code>&lt;&lt;</code> 将一个运算对象的各二进制位全部左移若干位左边的二进制位丢弃，右边补0 若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2</li></ul><p>java中负数的表示方法最高为是1 然后其他位由其正数按位取反 然后再加1 得到的就是相应负数的二进制表示 比如-1它的32位表达法应该是首先符号位为1 然后剩下的31位先取反 11111111111111111111111111111110 然后再加1 最后得到11111111111111111111111111111111 这个值</p><p><strong>面试题</strong> 用32位二进制数表示一个int类型的数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = -<span class="number">1</span>;</span><br><span class="line">        String str2 = print(num);</span><br><span class="line">        String str = Integer.toBinaryString(num);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">print</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">31</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            String c = (num &amp; (<span class="number">1</span> &lt;&lt; i)) == <span class="number">0</span> ? <span class="string">&quot;0&quot;</span> : <span class="string">&quot;1&quot;</span>;</span><br><span class="line">            sb.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>面试题</strong> 求1!+2!+3!+…+N!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">  System.out.println(sumFactorial(<span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sumFactorial</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;= num; i++) &#123;</span><br><span class="line">      sum = sum + factorial(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num*factorial(num-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>非递归实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sumFactorial</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> factorial = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;= num; i++) &#123;</span><br><span class="line">      factorial = factorial*i;</span><br><span class="line">      sum += factorial;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-常见排序实现"><a href="#二-常见排序实现" class="headerlink" title="二 常见排序实现"></a>二 常见排序实现</h3><h3 id="2-1-选择排序"><a href="#2-1-选择排序" class="headerlink" title="2.1 选择排序"></a>2.1 选择排序</h3><ul><li><p><strong>算法描述</strong></p><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。 </p></li><li><p><strong>动图演示</strong></p><p><img src="/images/0087.gif" alt="图1"></p></li><li><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">4</span>,<span class="number">3</span>, <span class="number">5</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">0</span>,-<span class="number">1</span>,-<span class="number">3</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    selectSort(array);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt; array.length; i++) &#123;</span><br><span class="line">      System.out.print(array[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (array == <span class="keyword">null</span> || array.length &lt;<span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> minIndex = i;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; array.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[j] &lt; array[minIndex]) &#123;</span><br><span class="line">          minIndex = j;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">int</span> tmp = array[i];</span><br><span class="line">      array[i] = array[minIndex];</span><br><span class="line">      array[minIndex] = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-冒泡排序"><a href="#2-2-冒泡排序" class="headerlink" title="2.2 冒泡排序"></a>2.2 冒泡排序</h3><ul><li><p><strong>算法描述</strong></p><ul><li>比较相邻的元素。如果第一个比第二个大，就交换它们两个</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数</li><li>针对所有的元素重复以上的步骤，除了最后一个</li><li>重复步骤1~3，直到排序完成</li></ul></li><li><p><strong>动图演示</strong></p><p><img src="/images/0088.gif" alt="图2"></p></li><li><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">4</span>,<span class="number">3</span>, <span class="number">5</span>,<span class="number">2</span>,<span class="number">9</span>,-<span class="number">5</span>, <span class="number">8</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">0</span>,-<span class="number">1</span>,-<span class="number">3</span>, <span class="number">10</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    bubbleSort(array);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt; array.length; i++) &#123;</span><br><span class="line">      System.out.print(array[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (array == <span class="keyword">null</span> || array.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">boolean</span> status = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[j] &gt; array[j+<span class="number">1</span>]) &#123;</span><br><span class="line">          <span class="keyword">int</span> tmp = array[j+<span class="number">1</span>];</span><br><span class="line">          array[j+<span class="number">1</span>] = array[j];</span><br><span class="line">          array[j] = tmp;</span><br><span class="line">          status = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!status)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3-插入排序"><a href="#2-3-插入排序" class="headerlink" title="2.3 插入排序"></a>2.3 插入排序</h3><ul><li><p><strong>算法描述</strong></p><ul><li>从第一个元素开始，该元素可以认为已经被排序</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li><li>将新元素插入到该位置后</li><li>重复步骤2~5</li></ul></li><li><p><strong>动图演示</strong></p><p><img src="/images/0089.gif" alt="图3"></p></li><li><p><strong>代码提示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">5</span>, -<span class="number">10</span>, <span class="number">8</span>, <span class="number">2</span>, -<span class="number">5</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">3</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">       insertSort(array);</span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (array == <span class="keyword">null</span> || array.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; array[j] &gt; array[j+<span class="number">1</span>]; j --) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = array[j];</span><br><span class="line">                array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                array[j+<span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-位运算&quot;&gt;&lt;a href=&quot;#一-位运算&quot; class=&quot;headerlink&quot; title=&quot;一 位运算&quot;&gt;&lt;/a&gt;一 位运算&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&amp;amp; 按位与 只有当操作符两边都是1的时候 &amp;amp;的结果才为1 否则为0   0&amp;amp;0=</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>多线程与高并发(四)</title>
    <link href="http://example.com/2022/04/11/%E9%AB%98%E5%B9%B6%E5%8F%91-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E5%9B%9B/"/>
    <id>http://example.com/2022/04/11/%E9%AB%98%E5%B9%B6%E5%8F%91-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E5%9B%9B/</id>
    <published>2022-04-11T12:36:21.683Z</published>
    <updated>2022-04-14T14:13:50.653Z</updated>
    
    <content type="html"><![CDATA[<h3 id="面试题一"><a href="#面试题一" class="headerlink" title="面试题一"></a>面试题一</h3><p>有两个线程 要求 一个线程依次打印1-26 另一个线程从A-Z 两个线程要交替输出</p><ul><li><p><strong>wait/notify</strong> 利用wait和notify来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              System.out.println(Thread.currentThread().getName() + <span class="string">&quot; :&quot;</span> + i);</span><br><span class="line">              lock.notify();</span><br><span class="line">              lock.wait();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">          lock.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">65</span>; i &lt;= <span class="number">90</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              System.out.println(Thread.currentThread().getName() + <span class="string">&quot; :&quot;</span> + (<span class="keyword">char</span>)i);</span><br><span class="line">              lock.notify();</span><br><span class="line">              lock.wait();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          lock.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    t1.start();</span><br><span class="line">    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">    t2.start();</span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>LockSupport</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Thread t1 = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Thread t2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">  t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; :&quot;</span> + i);</span><br><span class="line">        LockSupport.unpark(t2);</span><br><span class="line">        LockSupport.park();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">65</span>; i &lt; <span class="number">91</span>; i++) &#123;</span><br><span class="line">        LockSupport.park();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; :&quot;</span> + (<span class="keyword">char</span>)i);</span><br><span class="line">        LockSupport.unpark(t1);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  t2.start();</span><br><span class="line">  Thread.sleep(<span class="number">10</span>);</span><br><span class="line">  t1.start();</span><br><span class="line">  t1.join();</span><br><span class="line">  t2.join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>利用condition</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">  Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">  Condition c1 = lock.newCondition();</span><br><span class="line">  Condition c2 = lock.newCondition();</span><br><span class="line"></span><br><span class="line">  t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      lock.lock();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">&quot; :&quot;</span> + i);</span><br><span class="line">          c2.signal();</span><br><span class="line">          c1.await();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      lock.lock();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">65</span>; i &lt; <span class="number">91</span>; i++) &#123;</span><br><span class="line">          c2.await();</span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">&quot; :&quot;</span> + (<span class="keyword">char</span>)i);</span><br><span class="line">          c1.signal();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  t2.start();</span><br><span class="line">  Thread.sleep(<span class="number">10</span>);</span><br><span class="line">  t1.start();</span><br><span class="line">  t1.join();</span><br><span class="line">  t2.join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>利用Exchange实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Exchanger&lt;String&gt; exchanger = <span class="keyword">new</span> Exchanger&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String flag = <span class="string">&quot;t1&quot;</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; :&quot;</span> + i);</span><br><span class="line">                        flag = exchanger.exchange(flag);</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">&quot;t2&quot;</span>.equals(flag)) &#123;</span><br><span class="line">                            flag = exchanger.exchange(flag);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String flag = <span class="string">&quot;t2&quot;</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">65</span>; i &lt; <span class="number">91</span>; i++) &#123;</span><br><span class="line">                        flag = exchanger.exchange(flag); <span class="comment">//t2</span></span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; :&quot;</span> + (<span class="keyword">char</span>)i);</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">&quot;t1&quot;</span>.equals(flag)) &#123;</span><br><span class="line">                           flag = exchanger.exchange(flag);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t2.start();</span><br><span class="line">        t1.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>利用volatile</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; :&quot;</span> + i);</span><br><span class="line">                        flag = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">65</span>; i &lt; <span class="number">91</span>; i++) &#123;</span><br><span class="line">                        flag = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">while</span> (!flag)&#123;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; :&quot;</span> + (<span class="keyword">char</span>)i);</span><br><span class="line">                    &#125;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t2.start();</span><br><span class="line">        t1.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>利用blockingQueue</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        LinkedBlockingQueue&lt;String&gt; q1 = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;();</span><br><span class="line">        LinkedBlockingQueue&lt;String&gt; q2 = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; :&quot;</span> + i);</span><br><span class="line">                        q2.put(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">                        q1.take();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">65</span>; i &lt; <span class="number">91</span>; i++) &#123;</span><br><span class="line">                        q2.take();</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; :&quot;</span> + (<span class="keyword">char</span>)i);</span><br><span class="line">                        q1.put(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t2.start();</span><br><span class="line">        t1.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>CompletableFuture</strong></p><p>CompletableFuture这个类主要是用于对多个Future任务进行管理的一个类，它提供了很多的针对多任务(Future)管理的API 如allof、anyof、join、cancel等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;Double&gt; cf_1 = CompletableFuture.supplyAsync(() -&gt; priceOfTM());</span><br><span class="line">        CompletableFuture&lt;Double&gt; cf_2 = CompletableFuture.supplyAsync(() -&gt; priceOfTB());</span><br><span class="line">        CompletableFuture&lt;Double&gt; cf_3 = CompletableFuture.supplyAsync(() -&gt; priceOfJD());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//CompletableFuture.allOf(cf_1, cf_2, cf_3).join(); //这句话的意思是等着3个future都执行完 但这个API有个缺点没办法直接获取执行结果</span></span><br><span class="line">        CompletableFuture.supplyAsync(() -&gt; priceOfTM()).thenAcceptAsync(<span class="keyword">new</span> Consumer&lt;Double&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Double result)</span> </span>&#123; <span class="comment">//对一个任务的结果继续进行处理</span></span><br><span class="line">                System.out.println(<span class="string">&quot;TM上的价格 = &quot;</span> + result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟上天猫上查询价格</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Double <span class="title">priceOfTM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        delay();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟上淘宝上查询价格</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Double <span class="title">priceOfTB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        delay();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">12.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟上京东上查询价格</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Double <span class="title">priceOfJD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        delay();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">14.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> time = <span class="keyword">new</span> Random().nextInt(<span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(time);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;面试题一&quot;&gt;&lt;a href=&quot;#面试题一&quot; class=&quot;headerlink&quot; title=&quot;面试题一&quot;&gt;&lt;/a&gt;面试题一&lt;/h3&gt;&lt;p&gt;有两个线程 要求 一个线程依次打印1-26 另一个线程从A-Z 两个线程要交替输出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;str</summary>
      
    
    
    
    <category term="高并发" scheme="http://example.com/categories/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="高并发" scheme="http://example.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>状态模式</title>
    <link href="http://example.com/2022/04/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/04/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-04-10T12:57:38.455Z</published>
    <updated>2022-04-10T13:22:50.290Z</updated>
    
    <content type="html"><![CDATA[<p>状态模式(State Pattern) 也叫状态机模式 允许对象在内部状态发生改变时改变它的行为 状态模式中 行为是由它的状态来决定的，在不同的状态下会有不同的行为 状态模式和责任链模式很像<br>状态模式的角色分为</p><ul><li><strong>环境类角色(Context)</strong> 定义客户需要的接口 内部维护一个当前状态的实例</li><li><strong>抽象状态角色(IState)</strong> 定义该状态下的行为 可以有一个或多个行为</li><li><strong>具体状态角色(ConcreteState)</strong> 具体实现该状态对应的行为</li></ul><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//行为1</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething_01</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//行为2</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething_02</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateA</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething_01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A状态下执行doSomething_01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething_02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A状态下执行doSomething_02&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateB</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething_01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B状态下执行doSomething_01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething_02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B状态下执行doSomething_02&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> State state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//行为1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething_01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state.doSomething_01();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//行为2</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething_02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state.doSomething_02();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context c = <span class="keyword">new</span> Context(<span class="keyword">new</span> StateA());</span><br><span class="line">        <span class="comment">//Context c = new Context(new StateA());</span></span><br><span class="line">        c.doSomething_01();</span><br><span class="line">        c.doSomething_02();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;状态模式(State Pattern) 也叫状态机模式 允许对象在内部状态发生改变时改变它的行为 状态模式中 行为是由它的状态来决定的，在不同的状态下会有不同的行为 状态模式和责任链模式很像&lt;br&gt;状态模式的角色分为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;环境类角色(C</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>java中的原子操作</title>
    <link href="http://example.com/2022/04/10/FQA-java%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2022/04/10/FQA-java%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</id>
    <published>2022-04-10T12:48:30.298Z</published>
    <updated>2022-04-10T12:56:03.333Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题</strong></p><p>java中哪些操作是原子操作</p><p><strong>回答</strong></p><ul><li>除了long和double之外的基本类型的赋值操作，因为long和double类型是64位的，所以它们的操作在32位机器上不算原子操作，而在64位的机器上是原子操作。</li><li>所有引用reference的赋值操作</li><li>java.concurrent.Atomic *包中所有类的原子操作</li><li>Java使用锁和自旋CAS实现原子操作</li></ul><p><strong>面试题</strong></p><p>多线程条件下 下面的代码 调用set1、set2、check方法 会打印Error吗</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">P1</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">b = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">b = -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> != b &amp;&amp; -<span class="number">1</span> != b) &#123; <span class="comment">//这个&amp;&amp;操作并不是原子操作 很有可以能 b=-1时(有线程执行了set2方法) 进行判断 0!=b 然后有其他线程执行了 set1方法 将b的值修改成0 然后再判断-1 != b 最后会打出Error</span></span><br><span class="line">System.err.println(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> P1 v = <span class="keyword">new</span> P1();</span><br><span class="line"><span class="comment">// 线程 1：设置 b = 0</span></span><br><span class="line"><span class="keyword">final</span> Thread t1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">v.set1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程 2：设置 b = -1</span></span><br><span class="line"><span class="keyword">final</span> Thread t2 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">v.set2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">t2.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程 3：检查 0 != b &amp;&amp; -1 != b</span></span><br><span class="line"><span class="keyword">final</span> Thread t3 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">v.check();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;java中哪些操作是原子操作&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;回答&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;除了long和double之外的基本类型的赋值操作，因为long和double类型是64位的，所以它们的操作在</summary>
      
    
    
    
    <category term="FAQ" scheme="http://example.com/categories/FAQ/"/>
    
    
    <category term="FAQ" scheme="http://example.com/tags/FAQ/"/>
    
  </entry>
  
  <entry>
    <title>maven deploy报错</title>
    <link href="http://example.com/2022/04/10/FAQ-maven%E6%89%A7%E8%A1%8Cdeploy%E6%8A%A5%E9%94%99/"/>
    <id>http://example.com/2022/04/10/FAQ-maven%E6%89%A7%E8%A1%8Cdeploy%E6%8A%A5%E9%94%99/</id>
    <published>2022-04-10T12:42:42.098Z</published>
    <updated>2022-04-10T12:47:08.946Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题</strong></p><p>在执行mvn deploy 推包到私服时报错</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Could</span> <span class="string">not transfer artifact xxxxx :  Return code is: 500 </span></span><br></pre></td></tr></table></figure><p><strong>原因</strong></p><p>建议查看私服的服务器的磁盘是不是满了 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在执行mvn deploy 推包到私服时报错&lt;/p&gt;
&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class</summary>
      
    
    
    
    <category term="FAQ" scheme="http://example.com/categories/FAQ/"/>
    
    
    <category term="FAQ" scheme="http://example.com/tags/FAQ/"/>
    
  </entry>
  
  <entry>
    <title>备忘录模式</title>
    <link href="http://example.com/2022/04/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>http://example.com/2022/04/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95/</id>
    <published>2022-04-10T11:02:20.133Z</published>
    <updated>2022-04-10T12:36:32.627Z</updated>
    
    <content type="html"><![CDATA[<p>备忘录模式(Memento Pattern) 又叫做快照模式或者令牌模式 指在不破坏封装的前提下 捕获一个对象的内部状态 并在对象之外保存这个状态，备忘录一般用来做快照或者存盘 备忘录有点像命令模式都具备处理undo和redo的功能</p><p>备忘录基本角色</p><ul><li><strong>发起人角色</strong> 负责创建一个备忘录 记录自身需要保存的状态 具备状态的回滚功能(需要进行备忘录/存盘/快照的对象)</li><li><strong>备忘录角色</strong> 用于存储发起人角色的内部状态 且可以防止发起人角色以外的对象进行访问</li><li><strong>备忘录管理员角色</strong> 负责存储、提供和管理备忘录</li></ul><p><strong>示例</strong> 使用备忘录实现草稿箱的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备忘录角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> <span class="keyword">extends</span> <span class="title">Editor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Memento</span><span class="params">(String title, String content, String imgs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(title, content, imgs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发起人角色</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Editor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String imgs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将当前对象的状态存储到备忘录中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">saveToMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(title, content, imgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recover</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (memento != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.content = memento.getContent();</span><br><span class="line">            <span class="keyword">this</span>.imgs = memento.getImgs();</span><br><span class="line">            <span class="keyword">this</span>.title = memento.getTitle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Editor&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;title=&#x27;&quot;</span> + title + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, content=&#x27;&quot;</span> + content + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, imgs=&#x27;&quot;</span> + imgs + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//备忘录管理员角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Stack&lt;Memento&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack.pop(); <span class="comment">//出栈</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">        stack.push(memento);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建草稿箱(充当备忘录管理员角色)</span></span><br><span class="line">        Box box = <span class="keyword">new</span> Box();</span><br><span class="line">        <span class="comment">//创建一个编辑器(充当发起人角色)</span></span><br><span class="line">        Editor editor = <span class="keyword">new</span> Editor(<span class="string">&quot;Hello World&quot;</span>, <span class="string">&quot;This is content&quot;</span>, <span class="string">&quot;This is image&quot;</span>);</span><br><span class="line">        <span class="comment">//模拟编辑器的自动保存</span></span><br><span class="line">        Memento memento = editor.saveToMemento();</span><br><span class="line">        box.push(memento);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;初始信息 = &quot;</span> + editor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟修改信息 并存盘</span></span><br><span class="line">        editor.setTitle(<span class="string">&quot;Hello World 2&quot;</span>);</span><br><span class="line">        memento = editor.saveToMemento();</span><br><span class="line">        box.push(memento);</span><br><span class="line">        System.out.println(<span class="string">&quot;第一次修改 = &quot;</span> + editor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟第二次修改</span></span><br><span class="line">        editor.setContent(<span class="string">&quot;This is content2&quot;</span>);</span><br><span class="line">        memento = editor.saveToMemento();</span><br><span class="line">        box.push(memento);</span><br><span class="line">        System.out.println(<span class="string">&quot;第二次修改 = &quot;</span> + editor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟第一次恢复</span></span><br><span class="line">        editor.recover(box.pop());</span><br><span class="line">        System.out.println(<span class="string">&quot;第一次恢复 = &quot;</span> + editor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟第二次恢复</span></span><br><span class="line">        editor.recover(box.pop());</span><br><span class="line">        System.out.println(<span class="string">&quot;第二次恢复 = &quot;</span> + editor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟第三次恢复</span></span><br><span class="line">        editor.recover(box.pop());</span><br><span class="line">        System.out.println(<span class="string">&quot;第三次恢复 = &quot;</span> + editor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;备忘录模式(Memento Pattern) 又叫做快照模式或者令牌模式 指在不破坏封装的前提下 捕获一个对象的内部状态 并在对象之外保存这个状态，备忘录一般用来做快照或者存盘 备忘录有点像命令模式都具备处理undo和redo的功能&lt;/p&gt;
&lt;p&gt;备忘录基本角色&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>多线程与高并发(三)</title>
    <link href="http://example.com/2022/04/09/%E9%AB%98%E5%B9%B6%E5%8F%91-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B8%89/"/>
    <id>http://example.com/2022/04/09/%E9%AB%98%E5%B9%B6%E5%8F%91-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B8%89/</id>
    <published>2022-04-09T08:34:07.628Z</published>
    <updated>2022-04-14T14:13:32.732Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-容器概览"><a href="#一-容器概览" class="headerlink" title="一 容器概览"></a>一 容器概览</h3><p><img src="/images/0086.png" alt="容器"></p><p><strong>Vector和HashTable</strong> 这两个容器是java 1.0自带的 它们都是线程安全的 因为其方法都是同步方法(加了synchorinized关键字)</p><p><strong>ConcurrentHashMap</strong> 它主要改善的是并发读的效率 其实ConcurrentHashMap写的效率不见得比HashTable或者SynchorinizedMap高 但是读的效率比它们高很多</p><p><strong>TreeMap</strong> treeMap底层实现是红黑树</p><p><strong>CopyOnWriteList</strong> 写时复制</p><ul><li><p><strong>CopyOnWriteList源码</strong></p><p>从源码上看add方法是线程安全的 并且每增加一个元素会进行一次数组拷贝 读的时候是没有加锁的  通过这种写时复制的机制来保证了整个容器的线程安全 同时呢 由于读的时候没有加锁所以它的读效率很高 一般copyOnWriteList 适用于读操作频繁写操作不频繁的多线程环境</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Object[] elements = getArray();</span><br><span class="line">      <span class="keyword">int</span> len = elements.length;</span><br><span class="line">      Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">      newElements[len] = e;</span><br><span class="line">      setArray(newElements);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setArray</span><span class="params">(Object[] a)</span> </span>&#123;</span><br><span class="line">   array = a; <span class="comment">//这是一个原子操作 所以也是线程安全的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">get</span><span class="params">(Object[] a, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (E) a[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> get(getArray(), index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>Queue</strong> 对于队列的数据插入 一般用offer而不用add offer添加成功后会返回true 如果没成功会返回false 而add如果不成功则会抛异常 peek则是读取队列头部的数据 而poll则是删除头部的数据 并把这个数据返回</p><ul><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Queue&lt;String&gt; strs = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            strs.offer(<span class="string">&quot;a&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(strs.size());</span><br><span class="line"></span><br><span class="line">        System.out.println(strs.peek());</span><br><span class="line">        System.out.println(strs.size());</span><br><span class="line"></span><br><span class="line">        System.out.println(strs.poll());</span><br><span class="line">        System.out.println(strs.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是ConcurrentLinkedQueue的部分源码利用了cas操作 保证了线程安全 对于这个队列来说 不存在阻塞的说法 本身队列就是无界的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        checkNotNull(e); <span class="comment">//如果e为空抛异常</span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;E&gt;(e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; t = tail, p = t;;) &#123; <span class="comment">//死循环 t被设置成为了队尾</span></span><br><span class="line">            Node&lt;E&gt; q = p.next;</span><br><span class="line">            <span class="keyword">if</span> (q == <span class="keyword">null</span>) &#123; <span class="comment">//如果q为null 那证明确实p是队尾</span></span><br><span class="line">                <span class="comment">// p is last node</span></span><br><span class="line">                <span class="keyword">if</span> (p.casNext(<span class="keyword">null</span>, newNode)) &#123; <span class="comment">//cas原子操作 把入参设置为新的队尾</span></span><br><span class="line">                    <span class="comment">// Successful CAS is the linearization point</span></span><br><span class="line">                    <span class="comment">// for e to become an element of this queue,</span></span><br><span class="line">                    <span class="comment">// and for newNode to become &quot;live&quot;.</span></span><br><span class="line">                    <span class="keyword">if</span> (p != t) <span class="comment">// hop two nodes at a time </span></span><br><span class="line">                        casTail(t, newNode);  <span class="comment">// Failure is OK.//如果成功了再利用cas把tail指向newNode</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Lost CAS race to another thread; re-read next</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p == q) <span class="comment">//自己的下一个节点指向了自己</span></span><br><span class="line">                <span class="comment">// We have fallen off list.  If tail is unchanged, it</span></span><br><span class="line">                <span class="comment">// will also be off-list, in which case we need to</span></span><br><span class="line">                <span class="comment">// jump to head, from which all live nodes are always</span></span><br><span class="line">                <span class="comment">// reachable.  Else the new tail is a better bet.</span></span><br><span class="line">                p = (t != (t = tail)) ? t : head;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">// Check for tail updates after two hops.</span></span><br><span class="line">                p = (p != t &amp;&amp; t != (t = tail)) ? t : q;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>BlockingQueue</strong> 阻塞队列也是线程安全的队列 </p><p>下面是BlockingQueue的部分源码 从源码可以看到 offer方法是加了锁的 但是它不是阻塞方法 如果超过容量了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">final</span> AtomicInteger count = <span class="keyword">this</span>.count;</span><br><span class="line">        <span class="keyword">if</span> (count.get() == capacity)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> c = -<span class="number">1</span>;</span><br><span class="line">        Node&lt;E&gt; node = <span class="keyword">new</span> Node&lt;E&gt;(e);</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock putLock = <span class="keyword">this</span>.putLock;</span><br><span class="line">        putLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (count.get() &lt; capacity) &#123; <span class="comment">//超过容量不写入返回c为-1 返回false</span></span><br><span class="line">                enqueue(node);</span><br><span class="line">                c = count.getAndIncrement();</span><br><span class="line">                <span class="keyword">if</span> (c + <span class="number">1</span> &lt; capacity)</span><br><span class="line">                    notFull.signal();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            putLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">            signalNotEmpty();</span><br><span class="line">        <span class="keyword">return</span> c &gt;= <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123; <span class="comment">//获取队尾的数据</span></span><br><span class="line">        E x;</span><br><span class="line">        <span class="keyword">int</span> c = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">final</span> AtomicInteger count = <span class="keyword">this</span>.count;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock takeLock = <span class="keyword">this</span>.takeLock;</span><br><span class="line">        takeLock.lockInterruptibly(); <span class="comment">//尝试获取takeLock这把锁 如果获取不到 只要当前线程进行中断(执行interput方法) 这个获取锁的进程可以被打断 抛出InterruptedException异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (count.get() == <span class="number">0</span>) &#123; <span class="comment">//表示队列中没有数据了 这里就是take阻塞的核心方法</span></span><br><span class="line">                notEmpty.await(); <span class="comment">//notEmpty是一把takeLock这把锁的的一个条件(队列)放在这个队列里进行等待</span></span><br><span class="line">            &#125;</span><br><span class="line">            x = dequeue(); <span class="comment">//从队列的头部删除并返回这个元素(head)</span></span><br><span class="line">            c = count.getAndDecrement(); <span class="comment">//count的值减一</span></span><br><span class="line">            <span class="keyword">if</span> (c &gt; <span class="number">1</span>)</span><br><span class="line">                notEmpty.signal(); <span class="comment">//c&gt;1 那么证明此时count为0 队列已经空了 condition(notEmpty)的signal方法 可以唤醒所有被notEmpty阻塞住的线程(执行到notEmpty.await();这行代码的线程可以继续向下执行了)</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            takeLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == capacity)</span><br><span class="line">            signalNotFull();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个方法也是阻塞方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="comment">// Note: convention in all put/take/etc is to preset local var</span></span><br><span class="line">        <span class="comment">// holding count negative to indicate failure unless set.</span></span><br><span class="line">        <span class="keyword">int</span> c = -<span class="number">1</span>;</span><br><span class="line">        Node&lt;E&gt; node = <span class="keyword">new</span> Node&lt;E&gt;(e);</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock putLock = <span class="keyword">this</span>.putLock; <span class="comment">//拿到put锁</span></span><br><span class="line">        <span class="keyword">final</span> AtomicInteger count = <span class="keyword">this</span>.count;</span><br><span class="line">        putLock.lockInterruptibly(); <span class="comment">//和take一样</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Note that count is used in wait guard even though it is</span></span><br><span class="line"><span class="comment">             * not protected by lock. This works because count can</span></span><br><span class="line"><span class="comment">             * only decrease at this point (all other puts are shut</span></span><br><span class="line"><span class="comment">             * out by lock), and we (or some other waiting put) are</span></span><br><span class="line"><span class="comment">             * signalled if it ever changes from capacity. Similarly</span></span><br><span class="line"><span class="comment">             * for all other uses of count in other wait guards.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">while</span> (count.get() == capacity) &#123; <span class="comment">//当队列满了</span></span><br><span class="line">                notFull.await();  <span class="comment">//notFull 是put锁的一个Condition(队列) 阻塞</span></span><br><span class="line">            &#125;</span><br><span class="line">            enqueue(node); <span class="comment">//进入队列</span></span><br><span class="line">            c = count.getAndIncrement(); <span class="comment">//返回当前的count</span></span><br><span class="line">            <span class="keyword">if</span> (c + <span class="number">1</span> &lt; capacity) </span><br><span class="line">                notFull.signal(); <span class="comment">//队列以满 唤醒所有执行到notFull.await(); 的线程</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            putLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">            signalNotEmpty();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>DelayQueue</strong></p><p>装在DelayQueue中的元素需要实现Delayed接口 这个队列不是以元素入队的顺序进行出队的 而是以任务Delay的时间进行排序出队的 DelayQueue的底层实现实际上是一个优先队列 PriorityQueue</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        DelayQueue&lt;Task&gt; queue = <span class="keyword">new</span> DelayQueue&lt;&gt;();</span><br><span class="line">        <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">        Task t1 = <span class="keyword">new</span> Task(now + <span class="number">10000</span>, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        Task t2 = <span class="keyword">new</span> Task(now + <span class="number">20000</span>, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        Task t3 = <span class="keyword">new</span> Task(now + <span class="number">15000</span>, <span class="string">&quot;t3&quot;</span>);</span><br><span class="line">        Task t4 = <span class="keyword">new</span> Task(now + <span class="number">35000</span>, <span class="string">&quot;t4&quot;</span>);</span><br><span class="line">        Task t5 = <span class="keyword">new</span> Task(now + <span class="number">30000</span>, <span class="string">&quot;t5&quot;</span>);</span><br><span class="line">        Task t6 = <span class="keyword">new</span> Task(now + <span class="number">25000</span>, <span class="string">&quot;t6&quot;</span>);</span><br><span class="line"></span><br><span class="line">        queue.add(t1);</span><br><span class="line">        queue.add(t2);</span><br><span class="line">        queue.add(t3);</span><br><span class="line">        queue.add(t4);</span><br><span class="line">        queue.add(t5);</span><br><span class="line">        queue.add(t6);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            System.out.println(queue.take());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Delayed</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long runningTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Task</span><span class="params">(Long runningTime, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.runningTime = runningTime;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unit.convert(runningTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Delayed o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.getDelay(TimeUnit.MILLISECONDS) &lt; o.getDelay(TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.getDelay(TimeUnit.MILLISECONDS) &gt; o.getDelay(TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Task&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;runningTime=&quot;</span> + runningTime +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SynchronousQueue</strong> 这个队列每次只能存一个信息 主要是用于线程通信的 一个线程通过调用put方法把数据put进来 另外一个线程去take 功能类似于Exchanger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SynchronousQueue&lt;String&gt; queue = <span class="keyword">new</span> SynchronousQueue&lt;&gt;();</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        System.out.println(queue.take()); <span class="comment">//会依次打印aaa bbb ccc </span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        queue.put(<span class="string">&quot;aaa&quot;</span>); <span class="comment">//不能用add 或 offer这种非阻塞的方法</span></span><br><span class="line">        queue.put(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        queue.put(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>TransferQueue</strong> 它也是用来做线程之间的数据交换(通信的) 但它比transfer更强大</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        TransferQueue&lt;String&gt; queue = <span class="keyword">new</span> LinkedTransferQueue&lt;&gt;();</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        System.out.println(queue.take());</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        queue.transfer(<span class="string">&quot;aaa&quot;</span>); <span class="comment">//这个方法与put方法的区别 会等着另一个线程take到了之后 再走下一步 如果这里换成put打印的顺序就不一样了</span></span><br><span class="line">        queue.transfer(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        queue.transfer(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-容器概览&quot;&gt;&lt;a href=&quot;#一-容器概览&quot; class=&quot;headerlink&quot; title=&quot;一 容器概览&quot;&gt;&lt;/a&gt;一 容器概览&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/0086.png&quot; alt=&quot;容器&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;V</summary>
      
    
    
    
    <category term="高并发" scheme="http://example.com/categories/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="高并发" scheme="http://example.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>命令模式</title>
    <link href="http://example.com/2022/04/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/04/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-04-08T13:09:14.334Z</published>
    <updated>2022-04-08T15:45:18.604Z</updated>
    
    <content type="html"><![CDATA[<p>命令模式主要适用于以下场景</p><ul><li>现实语义中具备命令的操作 如命令菜单、shell命令等等</li><li>需要抽象出等待执行的行为 比如撤销(Undo)和恢复(Redo)</li><li>需要支持命令宏(即命令组合操作)</li><li>请求的调用者和接收者需要解耦的时候 比如Thread的start和run方法的实现 就是这种情况</li></ul><p><strong>示例</strong> 模拟餐厅点餐的场景 这个场景没有实现Undo 和 Redo的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟不同的菜系(粤菜、鲁菜、苏菜等) 也就是命令模式中的命令接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICuisine</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//厨师接口 也就是命令的执行者接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICook</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doCooking</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//粤菜 也就是具体的命令对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuangDongICuisine</span> <span class="keyword">implements</span> <span class="title">ICuisine</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//厨师 也就是命令模式中的命令执行者角色 Invoker</span></span><br><span class="line">    <span class="keyword">private</span> ICook cook;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GuangDongICuisine</span><span class="params">(ICook cook)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cook = cook;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cook.doCooking();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//苏菜</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JiangSuICuisine</span> <span class="keyword">implements</span> <span class="title">ICuisine</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICook cook;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JiangSuICuisine</span><span class="params">(ICook cook)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cook = cook;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cook.doCooking();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鲁菜</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShanDongICuisine</span> <span class="keyword">implements</span> <span class="title">ICuisine</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICook cook;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShanDongICuisine</span><span class="params">(ICook cook)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cook = cook;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cook.doCooking();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//广东厨师 也就是命令具体的Invoker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuangDongCook</span> <span class="keyword">implements</span> <span class="title">ICook</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCooking</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;广东厨师烹饪粤菜&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//江苏厨师</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JiangSuCook</span> <span class="keyword">implements</span> <span class="title">ICook</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCooking</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;江苏厨师烹饪苏菜&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//山东厨师</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShanDongCook</span> <span class="keyword">implements</span> <span class="title">ICook</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCooking</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;山东厨师烹饪鲁菜&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//店小二 命令接受者角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DianXiaoEr</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;ICuisine&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点餐</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">order</span><span class="params">(ICuisine cuisine)</span></span>&#123;</span><br><span class="line">        list.add(cuisine);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">placeOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ICuisine cuisine : list) &#123;</span><br><span class="line">            cuisine.cook();</span><br><span class="line">        &#125;</span><br><span class="line">        list.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ICuisine guangdongCuisine = <span class="keyword">new</span> GuangDongICuisine(<span class="keyword">new</span> GuangDongCook());</span><br><span class="line">        ICuisine shandongCuisine = <span class="keyword">new</span> ShanDongICuisine(<span class="keyword">new</span> ShanDongCook());</span><br><span class="line">        ICuisine jiangsuCuisine = <span class="keyword">new</span> JiangSuICuisine(<span class="keyword">new</span> JiangSuCook());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//点菜</span></span><br><span class="line">        DianXiaoEr xiaoEr = <span class="keyword">new</span> DianXiaoEr();</span><br><span class="line">        xiaoEr.order(guangdongCuisine);</span><br><span class="line">        xiaoEr.order(shandongCuisine);</span><br><span class="line">        xiaoEr.order(jiangsuCuisine);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上菜</span></span><br><span class="line">        xiaoEr.placeOrder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例2</strong> 模拟文本编辑器的操作 包括恢复操作</p><p>这里省略了一个角色 Invoker 因为不需要</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//命令接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">exec</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">recover</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体的命令角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Add</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String origin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Add</span><span class="params">(String origin, String text)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.origin = origin;</span><br><span class="line">        <span class="keyword">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">exec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> origin + text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">recover</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> origin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Copy</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Copy</span><span class="params">(String text)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">exec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> text + text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">recover</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Delete</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String origin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Delete</span><span class="params">(String origin, Integer index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.origin = origin;</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">exec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> origin.substring(<span class="number">0</span>, index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">recover</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> origin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令接收者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Editor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String origin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Command&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">execute</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">        list.add(command);</span><br><span class="line">        <span class="keyword">return</span> command.exec();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">recover</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> origin;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Command command = list.get(list.size() - <span class="number">1</span>);</span><br><span class="line">        list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">        String result = command.recover();</span><br><span class="line">        origin = result;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Editor editor = <span class="keyword">new</span> Editor();</span><br><span class="line"></span><br><span class="line">        String result = editor.execute(<span class="keyword">new</span> Add(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;123&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;ADD result = &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        result = editor.execute(<span class="keyword">new</span> Add(result, <span class="string">&quot;456&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;ADD result = &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        result = editor.execute(<span class="keyword">new</span> Copy(result));</span><br><span class="line">        System.out.println(<span class="string">&quot;Copy result = &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        result = editor.execute(<span class="keyword">new</span> Delete(result, <span class="number">10</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;DELETE result = &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第 &quot;</span> + i+ <span class="string">&quot; 次Ctrl+Z 结果为&quot;</span> + editor.recover());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;命令模式主要适用于以下场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;现实语义中具备命令的操作 如命令菜单、shell命令等等&lt;/li&gt;
&lt;li&gt;需要抽象出等待执行的行为 比如撤销(Undo)和恢复(Redo)&lt;/li&gt;
&lt;li&gt;需要支持命令宏(即命令组合操作)&lt;/li&gt;
&lt;li&gt;请求的调</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>多线程与高并发(二)</title>
    <link href="http://example.com/2022/04/04/%E9%AB%98%E5%B9%B6%E5%8F%91-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E4%BA%8C/"/>
    <id>http://example.com/2022/04/04/%E9%AB%98%E5%B9%B6%E5%8F%91-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E4%BA%8C/</id>
    <published>2022-04-04T15:44:56.738Z</published>
    <updated>2022-04-09T08:30:35.183Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-Exchanger"><a href="#一-Exchanger" class="headerlink" title="一 Exchanger"></a>一 Exchanger</h3><p>Exchanger是用来进行两个线程之间的数据交换 如果需要超过两个线程 则会阻塞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       Exchanger&lt;String&gt; exchanger = <span class="keyword">new</span> Exchanger&lt;&gt;();</span><br><span class="line">       <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">           String s = <span class="string">&quot;T1&quot;</span>;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               s = exchanger.exchange(s); <span class="comment">//执行到这里先阻塞 会与t2进行数据交换 此时s = T2</span></span><br><span class="line">           &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + s);</span><br><span class="line">       &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">       Thread.sleep(<span class="number">1000</span>); <span class="comment">//休眠的目的是为了保证t1 一定先执行</span></span><br><span class="line">       </span><br><span class="line">      <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            String s = <span class="string">&quot;T2&quot;</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s = exchanger.exchange(s); <span class="comment">//执行到这里先阻塞 然后进行t1 与 t2之间的数据交换 此时 s 值为T1</span></span><br><span class="line">                s = exchanger.exchange(s); <span class="comment">//执行到这里先阻塞 然后与t3进行数据交换 此时s = T3</span></span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + s);</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">      Thread.sleep(<span class="number">1000</span>); <span class="comment">//休眠的目的是为了保证t2 一定先执行</span></span><br><span class="line">      <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            String s = <span class="string">&quot;T3&quot;</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s = exchanger.exchange(s);  <span class="comment">//执行到这里先阻塞 然后与t3进行数据交换 此时s = T1</span></span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + s);</span><br><span class="line">        &#125;, <span class="string">&quot;t3&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-LockSupport"><a href="#二-LockSupport" class="headerlink" title="二 LockSupport"></a>二 LockSupport</h3><p>lockSupport 功能和Object的wait和notify类似 但是比wait 和 notify更灵活</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">              sleep(<span class="number">1000</span>);</span><br><span class="line">              System.out.println(i);</span><br><span class="line">              <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">                  LockSupport.park(); <span class="comment">//阻塞当前线程</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      t.start();</span><br><span class="line">      sleep(<span class="number">8000</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;time after 8 second&quot;</span>);</span><br><span class="line">      LockSupport.unpark(t); <span class="comment">//解封txianc</span></span><br><span class="line">      t.join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(millis);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>面试题一</strong></p><p>实现一个容器 提供两个方法 add、size 写两个线程 线程1添加10个元素到容器中 线程2实现监控元素的个数 当个数到5个时 线程2给出提示并结束</p><ul><li><p><strong>volatile加锁的实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">              list.add(i+<span class="string">&quot;&quot;</span>);</span><br><span class="line">              System.out.println(i);</span><br><span class="line">              sleep(<span class="number">1000</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">          <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (list.size() ==<span class="number">5</span>) &#123;</span><br><span class="line">                  System.out.println(<span class="string">&quot;容器的size是有5个了 退出t2线程&quot;</span>);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          System.out.println(<span class="string">&quot;t2 退出完成&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      t1.start();</span><br><span class="line">      t2.start();</span><br><span class="line">      t1.join();</span><br><span class="line">      t2.join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(millis);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object[] elements = <span class="keyword">new</span> Object[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &gt;= elements.length) &#123;</span><br><span class="line">            elements = Arrays.copyOf(elements, elements.length * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        elements[size] = t;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>wait 和 notify 实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            lock.notify();</span><br><span class="line">                            lock.wait();</span><br><span class="line">                        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    list.add(i+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                    sleep(<span class="number">1000</span>);</span><br><span class="line">                    System.out.println(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (list.size() != <span class="number">5</span>) &#123;</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                lock.notify();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;t2 退出&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        t2.start();</span><br><span class="line">        sleep(<span class="number">1000</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(millis);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object[] elements = <span class="keyword">new</span> Object[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &gt;= elements.length) &#123;</span><br><span class="line">            elements = Arrays.copyOf(elements, elements.length * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        elements[size] = t;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>LcokSupport实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Thread t1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Thread t2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            LockSupport.park(); <span class="comment">//阻塞</span></span><br><span class="line">            LockSupport.unpark(t1); <span class="comment">//t1 解封</span></span><br><span class="line">            System.out.println(<span class="string">&quot;t2 退出&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">                    LockSupport.unpark(t2); <span class="comment">//t2解封</span></span><br><span class="line">                    LockSupport.park(); <span class="comment">//t1阻塞</span></span><br><span class="line">                &#125;</span><br><span class="line">                list.add(i+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        t2.start();</span><br><span class="line">        sleep(<span class="number">1000</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.join();</span><br><span class="line">        t1.join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(millis);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object[] elements = <span class="keyword">new</span> Object[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &gt;= elements.length) &#123;</span><br><span class="line">            elements = Arrays.copyOf(elements, elements.length * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        elements[size] = t;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Semaphore实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Thread t1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Thread t2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">1</span>, <span class="keyword">true</span>);</span><br><span class="line">        t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore.acquire();</span><br><span class="line">                System.out.println(<span class="string">&quot;t2 退出&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                semaphore.release();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore.acquire();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                list.add(i+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="comment">//sleep(1000);</span></span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            semaphore.release();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t2.join();</span><br><span class="line">                semaphore.acquire();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    list.add(i+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                    <span class="comment">//sleep(1000);</span></span><br><span class="line">                    System.out.println(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t2.join();</span><br><span class="line">        t1.join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(millis);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object[] elements = <span class="keyword">new</span> Object[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &gt;= elements.length) &#123;</span><br><span class="line">            elements = Arrays.copyOf(elements, elements.length * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        elements[size] = t;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>面试题二</strong></p><p>写一个固定容量的同步容器 拥有put/get方法 以及getCount方法 能够支持2个生产者线程 以及10个消费者线程阻塞调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Thread t1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Thread t2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                    list.put(i+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                    sleep(<span class="number">1000</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;t2 add &quot;</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;t2 退出&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;t1 &quot;</span> + list.get());</span><br><span class="line">                sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;t1 退出&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        t2.start();</span><br><span class="line">        sleep(<span class="number">1000</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.join();</span><br><span class="line">        t1.join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(millis);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object[] elements = <span class="keyword">new</span> Object[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="keyword">while</span> (size == elements.length) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            elements[size] = t;</span><br><span class="line">            size++;</span><br><span class="line">            lock.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="keyword">while</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line">            lock.notifyAll();</span><br><span class="line">            <span class="keyword">return</span> elements[size];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用ReentrantLock的Condition可以实现更加精确的控制 在生产者 唤醒的时候 可以只叫醒消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Thread t1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Thread t2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                    list.put(i+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                    sleep(<span class="number">1000</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;t2 add &quot;</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;t2 退出&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;t1 consumer &quot;</span> + list.get());</span><br><span class="line">                sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;t1 退出&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        t2.start();</span><br><span class="line">        sleep(<span class="number">1000</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.join();</span><br><span class="line">        t1.join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(millis);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object[] elements = <span class="keyword">new</span> Object[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition producer = lock.newCondition(); <span class="comment">//生产者的锁 condition 的本质就是锁的等待队列 一个condition代表锁有一个等待队列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition consumer = lock.newCondition(); <span class="comment">//消费者的锁</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">while</span> (size == elements.length) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    producer.await(); <span class="comment">//进入生产者队列等待</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            elements[size] = t;</span><br><span class="line">            size++;</span><br><span class="line">            consumer.signalAll(); <span class="comment">//唤醒所有的消费者线程</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">while</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    consumer.await(); <span class="comment">//进入消费者队列等待</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line">            producer.signalAll(); <span class="comment">//唤醒所有生产者线程</span></span><br><span class="line">            <span class="keyword">return</span> elements[size];</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前提到过的ReentrantLock、CountDownLatch、CyclicBarrier、phaser、ReadWriteLock这些锁底层都是基于AbstractQueuedSynchronizer(AQS)来实现的 AQS的底层的核心实际上就是CAS操作加一个队列</p><h3 id="二-ThreadLocal"><a href="#二-ThreadLocal" class="headerlink" title="二 ThreadLocal"></a>二 ThreadLocal</h3><p>ThreadLocal 从字面意义上来说就是线程本地变量 是属于线程自己独有的。其他线程是看不到的 先看一个示例 在下面的示例中t2获得的值已经被t1所修改了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Person person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            sleep(<span class="number">1000</span>);</span><br><span class="line">            person.name = <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line">            sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(person.name); <span class="comment">//打印的会是lisi 而不是zhangsan</span></span><br><span class="line">            sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        </span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> millis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(millis);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从下面的例子中可以很清晰的看到被ThreadLocal修饰的属性 是不会被其他线程所识别的 也就是所谓的线程独占 其他线程不会拿到本线程的这个变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Person&gt; local = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        local.set(<span class="keyword">new</span> Person()); <span class="comment">//在main线程设置了一个变量</span></span><br><span class="line"></span><br><span class="line">        sleep(<span class="number">1000</span>);</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;t1 = &quot;</span> + local.get()); <span class="comment">//null</span></span><br><span class="line">            Person p = <span class="keyword">new</span> Person(); <span class="comment">//t1 线程自己设置了一个TheadLocal类型的p变量</span></span><br><span class="line">            p.name = <span class="string">&quot;王五&quot;</span>;</span><br><span class="line">            local.set(p);</span><br><span class="line">            System.out.println(<span class="string">&quot;t1 = &quot;</span> + local.get().name); <span class="comment">//王五</span></span><br><span class="line">            local.remove(); <span class="comment">//切记ThreadLocal使用完成后一定要记得remove!! 否则在线程池的环境下 下一次请求很有可能读到上一个请求(如果他们从线程池中拿到的是同一个线程的话)遗留的数据</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            sleep(<span class="number">3000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;t2 = &quot;</span> + local.get()); <span class="comment">//null</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(<span class="string">&quot;main = &quot;</span> + local.get().name); <span class="comment">//zhangsan</span></span><br><span class="line">        local.remove(); <span class="comment">//切记ThreadLocal使用完成后一定要记得remove!!</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> millis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(millis);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用ThreadLocal关键之处还是在于，使用完毕要记得remove。特别是在线程池中使用的时候。（否则会等到下一次set的时候才替换掉value–&gt;作为key的threadLocal为同一个所以是替换）</strong></p><p><strong>ThreadLocal源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//set方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">  Thread t = Thread.currentThread();</span><br><span class="line">  ThreadLocalMap map = getMap(t); <span class="comment">//获取当前线程的 ThreadLocal.ThreadLocalMap threadLocals 变量</span></span><br><span class="line">  <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">    map.set(<span class="keyword">this</span>, value); </span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//map.set(this, value); 源码</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Entry[] tab = table; <span class="comment">//table是ThreadLocal的成员变量 是一个Entry[]</span></span><br><span class="line">  <span class="keyword">int</span> len = tab.length;</span><br><span class="line">  <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (Entry e = tab[i];</span><br><span class="line">       e != <span class="keyword">null</span>;</span><br><span class="line">       e = tab[i = nextIndex(i, len)]) &#123; <span class="comment">//遍历Entry[]</span></span><br><span class="line">    ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (k == key) &#123; <span class="comment">//如果相等证明之前已经设置过了 所以需要覆盖</span></span><br><span class="line">      e.value = value;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123; <span class="comment">//这种情况是有可能在GC之后导致key为null的情况 GC后会导致threadLocalMap的key为null,但value不为null的情况</span></span><br><span class="line">      replaceStaleEntry(key, value, i);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tab[i] = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line">  <span class="keyword">int</span> sz = ++size;</span><br><span class="line">  <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">    rehash(); <span class="comment">//会进行扩容等操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Entry是一个弱引用 所以一旦发生gc Entry对象的k就会为null 但是value不会为null</span></span><br><span class="line"><span class="comment">         * 之所以设计成为弱引用 就是为了方式某些线程一直存在的时候(比如线程池) ThreadLocal能被回收掉</span></span><br><span class="line"><span class="comment">         * 不至于造成内存泄漏(所谓内存泄漏就是指这一块内存 永远无法被垃圾回收器回收掉 那么这块内存就相当于是泄漏了)</span></span><br><span class="line"><span class="comment">         * 内存泄漏和内存溢出是不一样的</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">            <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">            Object value;</span><br><span class="line"></span><br><span class="line">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">                <span class="keyword">super</span>(k);</span><br><span class="line">                value = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ThreadLocal的一个最典型的应用就是Spring的声明式事务 Spring为了保证同一个请求的对数据库访问的事务操作 它必须要保证在这个请求(线程)中 每次访问数据库都是拿的同一个连接 只有这样才能保证这次请求的数据库操作都在同一个事务中 如果跨了数据库连接 是没办法保证事务性的 所以Spring为了保证同一个请求 都能拿到同一个数据库连接 就会用到ThreadLocal 它会将数据库连接放到ThreadLocal中</p><p><strong>测试ThreadLocal在gc后在引发的threadLocalMap的key为null,但value不为null的情况</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, InterruptedException </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(()-&gt;test(<span class="string">&quot;abc&quot;</span>,<span class="keyword">false</span>));</span><br><span class="line">        t.start();</span><br><span class="line">        t.join();</span><br><span class="line">        System.out.println(<span class="string">&quot;--gc后--&quot;</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; test(<span class="string">&quot;def&quot;</span>, <span class="keyword">true</span>));</span><br><span class="line">        t2.start();</span><br><span class="line">        t2.join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String s,<span class="keyword">boolean</span> isGC)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ThreadLocal&lt;Object&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">            threadLocal.set(s);</span><br><span class="line">            threadLocal = <span class="keyword">null</span>;<span class="comment">//失去对threadLocal的强引用 ,help gc</span></span><br><span class="line">            <span class="keyword">if</span> (isGC) &#123;</span><br><span class="line">                System.gc();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Thread t = Thread.currentThread();</span><br><span class="line">            Class&lt;? extends Thread&gt; clz = t.getClass();</span><br><span class="line">            Field field = clz.getDeclaredField(<span class="string">&quot;threadLocals&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Object threadLocalMap = field.get(t);</span><br><span class="line">            Class&lt;?&gt; tlmClass = threadLocalMap.getClass();</span><br><span class="line">            Field tableField = tlmClass.getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">            tableField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Object[] arr = (Object[]) tableField.get(threadLocalMap);</span><br><span class="line">            <span class="keyword">for</span> (Object o : arr) &#123;</span><br><span class="line">                <span class="keyword">if</span> (o != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Class&lt;?&gt; entryClass = o.getClass();</span><br><span class="line">                    Field valueField = entryClass.getDeclaredField(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">                    Field referenceField = entryClass.getSuperclass().getSuperclass().getDeclaredField(<span class="string">&quot;referent&quot;</span>);</span><br><span class="line">                    valueField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    referenceField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    System.out.println(String.format(<span class="string">&quot;弱引用key:%s,值:%s&quot;</span>, referenceField.get(o), valueField.get(o)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>强、软、弱、虚四种引用</strong></p><p>java中的引用类型分为四种分别是强引用、软引用、弱引用和虚引用</p><ul><li><p><strong>强引用</strong> 一般的java赋值操作都是强引用 强引用一般指的是只要有一个引用指向了该对象 该对象就不会被回收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//强引用测试 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        System.gc(); <span class="comment">//建议系统gc</span></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第一次gc结束&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        person = <span class="keyword">null</span>;</span><br><span class="line">        System.gc(); <span class="comment">//建议系统gc</span></span><br><span class="line">        System.out.println(<span class="string">&quot;第二次gc结束&quot;</span>); <span class="comment">//只有在第二次gc的时候 才会调用person的finalize() 方法</span></span><br><span class="line">      System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一般不要重写finalize方法 这里只是为了做测试 jvm在进行gc回收对象的时候 是会调用这个方法的</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;person 被回收了&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.finalize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>软引用</strong> 当一个对象被一个软引用所指向的时候 只有系统内存不够了 该软引用锁指向的对象才会被回收 如果内存充足 即便没有引用指向这个对象 这个对象也不会被回收 <strong>软引用一般用作缓存</strong></p><ul><li><p><strong>内存充足条件下测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        SoftReference&lt;Person&gt; m = <span class="keyword">new</span> SoftReference&lt;&gt;(p1);</span><br><span class="line">        System.out.println(m.get());</span><br><span class="line"></span><br><span class="line">        System.gc();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(m.get());</span><br><span class="line"></span><br><span class="line">        p1 = <span class="keyword">null</span>;</span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(m.get()); <span class="comment">//get的对象还是原来p1的地址</span></span><br><span class="line">        m = <span class="keyword">null</span>; <span class="comment">//即便是把m都设置为null 也不会触发person回收</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//一般不要重写finalize方法 这里只是为了做测试 jvm在进行gc回收对象的时候 是会调用这个方法的</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;person 被回收了&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.finalize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>内存不足条件下测试</strong></p><p>这个案例的测试需要设置这三个jvm参数 -Xms20m -Xmx20m -Xmn1m 至于为啥要控制年轻代的大小暂时没想明白 可能是让对象直接进入老年代吧 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SoftReference&lt;<span class="keyword">byte</span>[]&gt; m = <span class="keyword">new</span> SoftReference&lt;&gt;(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">10</span>]);</span><br><span class="line">        System.out.println(m.get());</span><br><span class="line">        System.gc();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(m.get());</span><br><span class="line">        showCurrentMemoryInfo();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">15</span>*<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">        System.out.println(m.get()); <span class="comment">//这次会变成null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showInitialMemoryInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MemoryMXBean mbean = ManagementFactory.getMemoryMXBean();</span><br><span class="line">        System.out.println(<span class="string">&quot;最大可用内存:&quot;</span> + toMB(mbean.getHeapMemoryUsage().getMax()));</span><br><span class="line"><span class="comment">//        for (MemoryPoolMXBean mxBean : ManagementFactory.getMemoryPoolMXBeans()) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;Name:&quot; + mxBean.getName()</span></span><br><span class="line"><span class="comment">//                    + &quot;,Type:&quot; + mxBean.getType()</span></span><br><span class="line"><span class="comment">//                    + &quot;,Size:&quot; + toMB(mxBean.getUsage().getMax()));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">toMB</span><span class="params">(<span class="keyword">long</span> bytes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bytes / <span class="number">1024</span> / <span class="number">1024</span> + <span class="string">&quot;MB&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showCurrentMemoryInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;当前最大可用内存:&quot;</span> + toMB(Runtime.getRuntime().maxMemory()) + <span class="string">&quot;,当前空闲内存:&quot;</span> + toMB(Runtime.getRuntime().freeMemory());</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>弱引用</strong></p><p>弱引用 只要发生gc 弱引用所指向的对象就会被回收 当然 如果这个对象还被另外一个变量强引用依赖了 是不会被回收的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        WeakReference&lt;M&gt; m = <span class="keyword">new</span> WeakReference&lt;&gt;(<span class="keyword">new</span> M());</span><br><span class="line">        System.out.println(m.get());</span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(m.get()); <span class="comment">//null 弱引用被回收了</span></span><br><span class="line"></span><br><span class="line">        M m1 = <span class="keyword">new</span> M();</span><br><span class="line">        WeakReference&lt;M&gt; weakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(m1);</span><br><span class="line">        System.out.println(weakReference.get());</span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(weakReference.get()); <span class="comment">//不为null 虽然它是弱引用 但是m1这个对象还有一个强引用 所以无法回收</span></span><br><span class="line"></span><br><span class="line">        ThreadLocal&lt;M&gt; t1 = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">        t1.set(<span class="keyword">new</span> M());</span><br><span class="line">        t1.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">M</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/0084.png" alt="image-20220409144543838"></p><p>所以说为了防止内存泄漏的情况发生 使用ThreadLocal时一定要记得remove</p></li><li><p><strong>虚引用</strong> 虚引用主要是管理堆外内存的 虚引用的用法不多 一般是研发虚拟机会用到</p><p><img src="/images/0085.png" alt="image-20220409161500671"></p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-Exchanger&quot;&gt;&lt;a href=&quot;#一-Exchanger&quot; class=&quot;headerlink&quot; title=&quot;一 Exchanger&quot;&gt;&lt;/a&gt;一 Exchanger&lt;/h3&gt;&lt;p&gt;Exchanger是用来进行两个线程之间的数据交换 如果需要超过两个</summary>
      
    
    
    
    <category term="高并发" scheme="http://example.com/categories/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="高并发" scheme="http://example.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>ASM应用入门</title>
    <link href="http://example.com/2022/04/03/FAQ-ASM%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2022/04/03/FAQ-ASM%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8/</id>
    <published>2022-04-03T00:55:10.188Z</published>
    <updated>2022-04-06T13:16:27.763Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://asm.ow2.io/">ASM官网</a></p><p>ASM是用来操作和分析java字节码的框架 它可以用来修改class文件 或者动态的生成class。一个class文件基本上由以下几个部分组成</p><p><strong>class文件组成部分</strong></p><ul><li><strong>Magic</strong> 该项存放了一个java类文件的魔数(magic number) 和版本信息 一个java class文件的前4个字节被称之为它的魔数。每个正确的java class文件都是以0xCAFEBABE开头的 这样保证了java虚拟机能够很轻松的分辨出Java文件和非java文件</li><li><strong>Version</strong> 该项存放了java 类文件的版本信息 它对于一个java文件具有重要意义 因为java一直在发展 所以类文件的格式也在不断的变化中 类文件的版本信息让虚拟机知道如何去读取和处理该类文件</li><li><strong>Constant Pool</strong> 该项存放了类中各种文字字符串、类名、方法名、接口名、final变量、以及对外部类的引用信息 虚拟机必须为每一个被装载的类维护一个常量池 常量池的大小占到了整个类文件大小的60%</li><li><strong>Access flag</strong> 该项指明了该文件中定义的是类 还是接口(一个class文件只能有一个类 或者接口) 同时还指名了类和接口的访问标志 如 public、private、abstract 等</li><li><strong>This class</strong> 指向表示该类全限定名称的字符串常量的指针</li><li><strong>Super class</strong> 指向表示父类全限定名称的字符串常量的指针</li><li><strong>Interface</strong> 一个指针组 存放了该类或父类实现的所有接口名称的字符串常量指针 以上三项(This class 、Super class、interface) 特别是前两项 在我们用ASM 从已有类派生新类时一般需要修改 将类名称修改为子类名称 将父类该为派生类前的类名称 如有必要 增加新的实现接口</li><li><strong>Fields</strong> 该项对类或接口中声明的字段进行了细致的描述 需要注意的是 fields列表中仅列出来了本类或接口中的字段 并不包括从超类和父接口继承而来的字段</li><li><strong>Methods</strong> 该项对类或接口中声明的方法进行了细致的描述 例如方法的名称 参数 返回值等 需要注意的是methods列表存放的仅仅只是本类或本接口中的方法 并不包括从超类或父接口继承而来的方法 使用ASM进行AOP编程 通常需要调整Method中的指令来实现</li><li><strong>Class attributes</strong> 该项存放了该类文件中类或接口所定义的属性的基本信息</li></ul><p>如果需要详细的了解java class文件的组成部分 请阅读《java 虚拟机规范》这本书 也可以去oracle官网去找 首先找到javaSE 的documentation </p><p><img src="/images/0079.png" alt="图1"></p><p>然后继续下拉 找到Language and VM</p><p><img src="/images/0080.png" alt="图2"></p><p>然后找到你想要了解的jdk版本的虚拟机指引</p><p><img src="/images/0081.png" alt="图3"></p><p>找到第4章 The Class File Format 这里面有最新的java 类文件组成的说明</p><p><img src="/images/0082.png" alt="图4"></p><p><strong>ASM读取class文件示例</strong></p><p>这里面用到了visitor设计模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.poi.tl.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdk.internal.org.objectweb.asm.Opcodes.ASM4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassPrinter</span> <span class="keyword">extends</span> <span class="title">ClassVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassPrinter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(ASM4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="keyword">int</span> version, <span class="keyword">int</span> access, String name,</span></span></span><br><span class="line"><span class="params"><span class="function">                      String signature, String superName, String[] interfaces)</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; extends &quot;</span> + superName + <span class="string">&quot; &#123;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FieldVisitor <span class="title">visitField</span><span class="params">(<span class="keyword">int</span> access, String name, String desc,</span></span></span><br><span class="line"><span class="params"><span class="function">                                   String signature, Object value)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;    &quot;</span> + desc + <span class="string">&quot; &quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">(<span class="keyword">int</span> access, String name,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     String desc, String signature, String[] exceptions)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;   &quot;</span> + name + desc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ClassPrinter cp = <span class="keyword">new</span> ClassPrinter();</span><br><span class="line">        <span class="comment">//利用classReader 将Client.class 读进来 利用visitor 对这个类文件进行一些处理</span></span><br><span class="line">        ClassReader cr = <span class="keyword">new</span> ClassReader(ClassPrinter.class.getClassLoader().getResourceAsStream(<span class="string">&quot;com/poi/tl/test/Client.class&quot;</span>));</span><br><span class="line">        cr.accept(cp, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ASM生成class文件示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.objectweb.asm.Opcodes.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassWriterTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ClassWriter cw = <span class="keyword">new</span> ClassWriter(<span class="number">0</span>);</span><br><span class="line">        cw.visit(V1_5, ACC_PUBLIC + ACC_ABSTRACT + ACC_INTERFACE,</span><br><span class="line">                <span class="string">&quot;pkg/Comparable&quot;</span>, <span class="keyword">null</span>, <span class="string">&quot;java/lang/Object&quot;</span>,</span><br><span class="line">                <span class="keyword">null</span>);</span><br><span class="line">        cw.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC, <span class="string">&quot;LESS&quot;</span>, <span class="string">&quot;I&quot;</span>,</span><br><span class="line">                <span class="keyword">null</span>, <span class="keyword">new</span> Integer(-<span class="number">1</span>)).visitEnd();</span><br><span class="line">        cw.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC, <span class="string">&quot;EQUAL&quot;</span>, <span class="string">&quot;I&quot;</span>,</span><br><span class="line">                <span class="keyword">null</span>, <span class="keyword">new</span> Integer(<span class="number">0</span>)).visitEnd();</span><br><span class="line">        cw.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC, <span class="string">&quot;GREATER&quot;</span>, <span class="string">&quot;I&quot;</span>,</span><br><span class="line">                <span class="keyword">null</span>, <span class="keyword">new</span> Integer(<span class="number">1</span>)).visitEnd();</span><br><span class="line">        cw.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, <span class="string">&quot;compareTo&quot;</span>,</span><br><span class="line">                <span class="string">&quot;(Ljava/lang/Object;)I&quot;</span>, <span class="keyword">null</span>, <span class="keyword">null</span>).visitEnd(); cw.visitEnd();</span><br><span class="line">        <span class="keyword">byte</span>[] b = cw.toByteArray();</span><br><span class="line">        Class c = <span class="keyword">new</span> MyClassLoader().defineClass(<span class="string">&quot;pkg.Comparable&quot;</span>, b); <span class="comment">//生成一个class</span></span><br><span class="line">        System.out.println(c.getName());</span><br><span class="line">        Arrays.stream(c.getMethods()).forEach(m -&gt; &#123;</span><br><span class="line">            System.out.println(m.getName());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">defineClass</span><span class="params">(String name, <span class="keyword">byte</span>[] b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>利用ASM模拟修改class</strong> </p><p>下面的例子对Man这个类的方法做了一点处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassReader cr = <span class="keyword">new</span> ClassReader(Man.class.getClassLoader().getResourceAsStream(<span class="string">&quot;com/poi/tl/test/Man.class&quot;</span>));</span><br><span class="line">        ClassWriter cw = <span class="keyword">new</span> ClassWriter(<span class="number">0</span>);</span><br><span class="line">        ClassVisitor cv = <span class="keyword">new</span> ClassVisitor(ASM4, cw) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">(<span class="keyword">int</span> access, String name, String descriptor, String signature, String[] exceptions)</span> </span>&#123;</span><br><span class="line">                MethodVisitor mv = <span class="keyword">super</span>.visitMethod(access, name, descriptor, signature, exceptions);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> MethodVisitor(ASM4, mv) &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitCode</span><span class="params">()</span> </span>&#123; <span class="comment">//当读到class文件的方法之后 做一些处理</span></span><br><span class="line">                        visitMethodInsn(INVOKESTATIC, <span class="string">&quot;proxy&quot;</span>, <span class="string">&quot;before&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">                        <span class="keyword">super</span>.visitCode();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        cr.accept(cv, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = cw.toByteArray();</span><br><span class="line">        String path = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line"></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(path + <span class="string">&quot;/poi-tl-test/target/classes/com/poi/tl/test/Man_0.class&quot;</span>));</span><br><span class="line">        fos.write(bytes);</span><br><span class="line">        fos.flush();</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这个在吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>生成的Man_0的class文件反编译后的结果如下</strong></p><p><img src="/images/0083.png" alt="图5"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://asm.ow2.io/&quot;&gt;ASM官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASM是用来操作和分析java字节码的框架 它可以用来修改class文件 或者动态的生成class。一个class文件基本上由以下几个部分组成&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cla</summary>
      
    
    
    
    <category term="FAQ" scheme="http://example.com/categories/FAQ/"/>
    
    
    <category term="FAQ" scheme="http://example.com/tags/FAQ/"/>
    
  </entry>
  
  <entry>
    <title>访问者模式</title>
    <link href="http://example.com/2022/04/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/04/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-04-02T14:40:23.430Z</published>
    <updated>2022-04-06T12:42:39.025Z</updated>
    
    <content type="html"><![CDATA[<p>访问者模式是一种将数据结构与数据操作分离的设计模式 它适用于在内部组成模块固定的情况 访问者模式可以在不改变数据结构的条件下 定义这些元素的新的操作。下面的例子模拟的是组装台式机的时候 针对不同的客户(visitor)给与不同的优惠策略</p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        Teacher teacher = <span class="keyword">new</span> Teacher();</span><br><span class="line"></span><br><span class="line">        Computer c1 = <span class="keyword">new</span> Computer.ComputerBuilder()</span><br><span class="line">                .setCpu(<span class="keyword">new</span> Cpu(<span class="string">&quot;英特尔酷睿i5处理器&quot;</span>, <span class="number">1000</span>))</span><br><span class="line">                .setBoard(<span class="keyword">new</span> Board(<span class="string">&quot;华硕主板&quot;</span>, <span class="number">1500</span>))</span><br><span class="line">                .setMemory(<span class="keyword">new</span> Memory(<span class="string">&quot;金士顿16G内存条&quot;</span>, <span class="number">1200</span>)).build();</span><br><span class="line"></span><br><span class="line">        Computer c2 = <span class="keyword">new</span> Computer.ComputerBuilder()</span><br><span class="line">                .setCpu(<span class="keyword">new</span> Cpu(<span class="string">&quot;英特尔酷睿i7处理器&quot;</span>, <span class="number">1400</span>))</span><br><span class="line">                .setBoard(<span class="keyword">new</span> Board(<span class="string">&quot;微星主板&quot;</span>, <span class="number">1200</span>))</span><br><span class="line">                .setMemory(<span class="keyword">new</span> Memory(<span class="string">&quot;ADATA16G内存条&quot;</span>, <span class="number">1000</span>)).build();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;学生买电脑 配置:&quot;</span> + c1.getConfig() + <span class="string">&quot; 价格 : &quot;</span> + c1.getPrice(student));</span><br><span class="line">        System.out.println(<span class="string">&quot;老师买电脑 配置:&quot;</span> + c1.getConfig() + <span class="string">&quot; 价格 : &quot;</span> + c1.getPrice(teacher));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;================分隔线========================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;学生买电脑 配置:&quot;</span> + c2.getConfig() + <span class="string">&quot; 价格 : &quot;</span> + c2.getPrice(student));</span><br><span class="line">        System.out.println(<span class="string">&quot;老师买电脑 配置:&quot;</span> + c2.getConfig() + <span class="string">&quot; 价格 : &quot;</span> + c2.getPrice(teacher));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Cpu cpu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Memory memory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Board board;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Computer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得电脑的价格</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cpu.getPrice(visitor) + memory.getPrice(visitor) + board.getPrice(visitor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CPU : &quot;</span> + cpu.getName() + <span class="string">&quot;\t 内存 : &quot;</span> + memory.getName() + <span class="string">&quot;\t 主板 : &quot;</span> + board.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ComputerBuilder <span class="title">setCpu</span><span class="params">(Cpu cpu)</span> </span>&#123;</span><br><span class="line">            computer.setCpu(cpu);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ComputerBuilder <span class="title">setMemory</span><span class="params">(Memory memory)</span> </span>&#123;</span><br><span class="line">            computer.setMemory(memory);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ComputerBuilder <span class="title">setBoard</span><span class="params">(Board board)</span> </span>&#123;</span><br><span class="line">            computer.setBoard(board);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Computer <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> computer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电脑元件</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ComputerPart</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取元件的价格</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不同的客户</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取cpu价格</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(Cpu cpu)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取内存条价格</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(Memory memory)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取主板价格</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(Board board)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cpu</span> <span class="keyword">implements</span> <span class="title">ComputerPart</span> </span>&#123;</span><br><span class="line">    <span class="comment">//cpu 品牌名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cpu价格</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cpu</span><span class="params">(String name, <span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cpu 特有属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> visitor.getPrice(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span> <span class="keyword">implements</span> <span class="title">ComputerPart</span> </span>&#123;</span><br><span class="line">    <span class="comment">//内存条 品牌名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//内存条价格</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//内存条 特有属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Memory</span><span class="params">(String name, <span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> visitor.getPrice(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Board</span> <span class="keyword">implements</span> <span class="title">ComputerPart</span> </span>&#123;</span><br><span class="line">    <span class="comment">//主板 品牌名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主板价格</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主板 特有属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Board</span><span class="params">(String name, <span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> visitor.getPrice(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(Cpu cpu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) Math.round(cpu.getPrice() * <span class="number">0.8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(Memory memory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) Math.round(memory.getPrice() * <span class="number">0.75</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(Board board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) Math.round(board.getPrice() * <span class="number">0.9</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(Cpu cpu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) Math.round(cpu.getPrice() * <span class="number">0.8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(Memory memory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) Math.round(memory.getPrice() * <span class="number">0.8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(Board board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) Math.round(board.getPrice() * <span class="number">0.8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于电脑的组成部分相对固定 各个元件差别较小 所以利用访问者模式可以灵活的为不同的客户(学生/老师)提供不同的优惠策略 避免了if else的操作 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;访问者模式是一种将数据结构与数据操作分离的设计模式 它适用于在内部组成模块固定的情况 访问者模式可以在不改变数据结构的条件下 定义这些元素的新的操作。下面的例子模拟的是组装台式机的时候 针对不同的客户(visitor)给与不同的优惠策略&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>多线程与高并发(一)</title>
    <link href="http://example.com/2022/03/31/%E9%AB%98%E5%B9%B6%E5%8F%91-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B8%80/"/>
    <id>http://example.com/2022/03/31/%E9%AB%98%E5%B9%B6%E5%8F%91-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B8%80/</id>
    <published>2022-03-31T14:49:15.189Z</published>
    <updated>2022-04-06T12:40:34.644Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、sleep与wait、notify的区别"><a href="#一、sleep与wait、notify的区别" class="headerlink" title="一、sleep与wait、notify的区别"></a>一、sleep与wait、notify的区别</h3><ul><li>sleep 是抱着锁睡觉 在sleep的时候 它不会释放锁 而且sleep会使线程进入time_watting状态</li><li>wait 也是会使线程进入等待 但是wait会释放锁 它会使线程进入wating状态 同时wait与notify一样都是object的方法 且只有在调用线程拥有某个对象的独占锁时，才能够调用该对象的wait(),notify()和notifyAll()方法。这一点通常不会被程序员注意，因为程序验证通常是在对象的同步方法或同步代码块中调用它们的。如果尝试在未获取对象锁时调用这三个方法，那么你将得到一个”java.lang.IllegalMonitorStateException”</li><li>notify 会唤醒其他线程去抢锁 但是执行notify并不会立即释放当前线程的锁 另外与wait一样 notify也是object的方法且只有在调用线程拥有某个对象的独占锁时，才能够调用该对象的notify方法 notify会使得被处于waiting状态的线程重新进入到runnable状态 </li></ul><p>下面的代码可以证明wait是释放了锁的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  System.out.println(<span class="string">&quot;t1开始执行&quot;</span>);</span><br><span class="line">                  <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                      System.out.println(<span class="string">&quot;wait开始执行&quot;</span>);</span><br><span class="line">                      lock.wait(); <span class="comment">//只有在同步代码块中 使用lock.wait()才不会报错 因为此时t1线程具有lock对象的独占锁</span></span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  System.out.println(<span class="string">&quot;t1执行结束&quot;</span>);</span><br><span class="line">              &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;t2开始执行&quot;</span>);</span><br><span class="line">                        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                        System.out.println(<span class="string">&quot;开始唤醒t1&quot;</span>);</span><br><span class="line">                        lock.notifyAll(); <span class="comment">//只有在同步代码块中 使用lock.wait()才不会报错 因为此时t2线程具有lock对象的独占锁 调用notify 并不会导致当前线程释放锁</span></span><br><span class="line">                        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                        System.out.println(<span class="string">&quot;t2同步代码块逻辑执行完毕&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;t2执行结束&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">       t1.start();</span><br><span class="line">       Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">       t2.start();</span><br><span class="line">       Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、异常跟锁"><a href="#二、异常跟锁" class="headerlink" title="二、异常跟锁"></a>二、异常跟锁</h3><p>在程序当中 如果抛出了异常 锁是会被释放的 除非你try catch</p><p><strong>Synchorinzed锁升级</strong> 最开始的时候 如果锁对象是在JVM启动4秒之前 则是这个对象的锁的状态是无锁 如果是4秒之后创建的对象 则这个对象的锁的状态是匿名偏向 如果此时有线程进入 那么该对象的状态变成偏向锁 偏向锁内部实际上是没有锁的 只是一个标志 如果此时有其他线程来争抢 则会撤销偏向锁 升级为自旋锁 如果某一个线程自旋了10次还未获得锁 则升级为重量级锁</p><h3 id="三-AtomicInteger-源码分析"><a href="#三-AtomicInteger-源码分析" class="headerlink" title="三 AtomicInteger 源码分析"></a>三 AtomicInteger 源码分析</h3><p>Atomic类底层都是利用CAS机制实现的 java中提供了一个类Unsafe 利用Unsafe类可以直接操作内存 下面是AtomicInteger 和 Unsafe类的相应源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicInteger</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6214790243416807050L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> valueOffset;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//这个代码的意思其实就是获取了AtomicInteger.class这个class对象的value字段在内存地址中的偏移量</span></span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicInteger.class.getDeclaredField(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//省略部分代码</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndSet</span><span class="params">(<span class="keyword">int</span> newValue)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//所以这里需要传this进来 可以通过this获取当前对象在堆内存中的内存地址 再加上value这个字段的内存偏移量 就可以得到这个对象的value字段的内存地址 并且把新值传进来</span></span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndSetInt(<span class="keyword">this</span>, valueOffset, newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面是Unsafe类的相关源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Unsafe</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Unsafe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//var1 就是当前对象</span></span><br><span class="line">    <span class="comment">//var2 是value字段的内存偏移量</span></span><br><span class="line">    <span class="comment">//var4 是新值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndSetInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> var5;</span><br><span class="line">        <span class="keyword">do</span> &#123; </span><br><span class="line">            <span class="comment">//根据对象 和 value字段的偏移量 获取value字段对应的值(CAS操作中的当前值E)</span></span><br><span class="line">            var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">        &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var4)); <span class="comment">//compareAndSwapInt这是个原子操作 会先比较内存中value字段对应的值是不是var5 如果是 则把var4设置到value字段中 并返回var5 </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var5;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试Synchorinized、AtomicInteger、LongAdder的性能</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger count_1 = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count_2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LongAdder count_3 = <span class="keyword">new</span> LongAdder();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        count_1();</span><br><span class="line">        count_2();</span><br><span class="line">        count_3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">count_1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        List&lt;Thread&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        CountDownLatch cd = <span class="keyword">new</span> CountDownLatch(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                            sleep();</span><br><span class="line">                            count_1.incrementAndGet();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                        cd.countDown();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            list.add(t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Long start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (Thread t : list) &#123;</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cd.await();</span><br><span class="line">        Long end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;AtomicInter 计算结果 = &quot;</span> + count_1.get() + <span class="string">&quot; 耗时 &quot;</span> + (end - start) + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">count_2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        List&lt;Thread&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">        CountDownLatch cd = <span class="keyword">new</span> CountDownLatch(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">   sleep(); </span><br><span class="line">                            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                                count_2++;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                        cd.countDown();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            list.add(t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Long start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (Thread t : list) &#123;</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cd.await();</span><br><span class="line">        Long end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;i++计算结果 = &quot;</span> + count_2 + <span class="string">&quot; 耗时 &quot;</span> + (end - start) + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">count_3</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        List&lt;Thread&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        CountDownLatch cd = <span class="keyword">new</span> CountDownLatch(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                            sleep();</span><br><span class="line">                            count_3.increment();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                        cd.countDown();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            list.add(t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Long start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (Thread t : list) &#123;</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cd.await();</span><br><span class="line">        Long end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;LongAdder 计算结果 = &quot;</span> + count_3 + <span class="string">&quot; 耗时 &quot;</span> + (end - start) + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从实测的结果来看同步快执行时间短的情况下 三者相差不大</p><p><strong>ReentrantLock</strong> 可重入锁 就是是对于同一个线程来说 如果获得了可冲入锁 就不需要再次获取了 synchronized就是可重入锁的一种 下面的示例 如果synchronized不是可重入锁的话 那么 t1会死锁 t2也会死锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">           Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   m1();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line"></span><br><span class="line">           Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                m1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        sleep(<span class="number">1000</span>);</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getId() + <span class="string">&quot;执行m1方法&quot;</span>);</span><br><span class="line">        sleep(<span class="number">3000</span>);</span><br><span class="line">        m2();</span><br><span class="line">        System.out.println(Thread.currentThread().getId() + <span class="string">&quot;m1方法执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getId() + <span class="string">&quot;执行m2方法&quot;</span>);</span><br><span class="line">        sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getId() + <span class="string">&quot;m2方法执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> ttl)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(ttl);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是用ReentrantLock来代替synchronized</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">           Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   m1();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line"></span><br><span class="line">           Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                m1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        sleep(<span class="number">1000</span>);</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(Thread.currentThread().getId() + <span class="string">&quot;执行m1方法&quot;</span>);</span><br><span class="line">            sleep(<span class="number">3000</span>);</span><br><span class="line">            m2();</span><br><span class="line">            System.out.println(Thread.currentThread().getId() + <span class="string">&quot;m1方法执行结束&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(Thread.currentThread().getId() + <span class="string">&quot;执行m2方法&quot;</span>);</span><br><span class="line">            sleep(<span class="number">3000</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getId() + <span class="string">&quot;m2方法执行结束&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> ttl)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(ttl);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>tryLock用法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                m1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">boolean</span> locked = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            locked = lock.tryLock(<span class="number">5</span>, TimeUnit.SECONDS); <span class="comment">//会阻塞5秒钟 如果5秒内没有获得锁则继续执行下面的内容</span></span><br><span class="line">            System.out.println(<span class="string">&quot;执行方法&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;尝试获得锁失败&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (locked) &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        t1.join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(<span class="string">&quot;m1开始执行&quot;</span>);</span><br><span class="line">            sleep(<span class="number">6000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;m1执行结束&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> ttl)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(ttl);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>公平锁</strong> 可以通过对ReentrantLock设置参数使它变成一个公平锁 公平锁的原理实际上是当锁被释放后  它会先检查锁的等待队列 如果等待队列中有线程在等待那么它会优先从等待队列里面取 所有公平锁的有序是指的在等待队列里的线程抢锁的有序 至于不同的线程进入等待队列的这个顺序是无法保证的 所以下面例子可以看到绝大多数情况下它都是一个固定的输出 但是偶尔也会有乱序的情况 但是这只能说明 线程进入等待队列的顺序是错乱的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>); <span class="comment">//设置为true表示这是一个公平锁</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    lock.lock();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;获得锁&quot;</span>);</span><br><span class="line">                    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (lock.isLocked()) &#123;</span><br><span class="line">                            lock.unlock();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        t3.join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(<span class="string">&quot;m1开始执行&quot;</span>);</span><br><span class="line">            sleep(<span class="number">6000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;m1执行结束&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> ttl)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(ttl);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-CountDownLatch"><a href="#四-CountDownLatch" class="headerlink" title="四 CountDownLatch"></a>四 <strong>CountDownLatch</strong></h3><p>CountDownLatch与线程的join方法具有同样的效果 下面的两种方式是等价的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">        List&lt;Thread&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread(count::incrementAndGet);</span><br><span class="line">            list.add(t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Thread t : list) &#123;</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Thread t : list) &#123;</span><br><span class="line">            t.join();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(count.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CountDownLatch cd = <span class="keyword">new</span> CountDownLatch(<span class="number">100</span>);</span><br><span class="line">        AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">        List&lt;Thread&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    count.incrementAndGet();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    cd.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            list.add(t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Thread t : list) &#123;</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cd.await();</span><br><span class="line">        System.out.println(count.get());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="五-CyclicBarrier"><a href="#五-CyclicBarrier" class="headerlink" title="五 CyclicBarrier"></a>五 <strong>CyclicBarrier</strong></h3><p>CyclicBarrier也叫同步屏障，在JDK1.5被引入，可以让一组线程达到一个屏障时被阻塞，直到最后一个线程达到屏障时，所以被阻塞的线程才能继续执行。CyclicBarrier好比一扇门，默认情况下关闭状态，堵住了线程执行的道路，直到所有线程都就位，门才打开，让所有线程一起通过。</p><ul><li><p><strong>构造方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties, Runnable barrierAction)</span></span></span><br></pre></td></tr></table></figure><ul><li>parties 是参与线程的个数</li><li>第二个构造方法有一个 Runnable 参数，这个参数的意思是最后一个到达线程要做的任务</li></ul></li><li><p><strong>重要方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, BrokenBarrierException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">await</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException, BrokenBarrierException, TimeoutException</span></span><br></pre></td></tr></table></figure><ul><li>线程调用 await() 表示自己已经到达栅栏</li><li>BrokenBarrierException 表示栅栏已经被破坏，破坏的原因可能是其中一个线程 await() 时被中断或者超时</li></ul></li><li><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">20</span>, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;执行runnable&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        count.incrementAndGet();</span><br><span class="line">                        cyclicBarrier.await();</span><br><span class="line">                        System.out.println(Thread.currentThread().getId() + <span class="string">&quot;继续执行&quot;</span>);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            t.start();</span><br><span class="line">            sleep(<span class="number">10</span>); <span class="comment">//阻塞只是为了保证 每个线程启动的顺序</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(count.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> ttl)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(ttl);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六-phaser"><a href="#六-phaser" class="headerlink" title="六 phaser"></a>六 phaser</h3><p>在Phaser中，它把多个线程协作执行的任务划分为多个阶段，编程时需要明确各个阶段的任务，每个阶段都可以有任意个参与者，线程都可以随时注册并参与到某个阶段。Phaser相对于CyclicBarrier来说是一个分阶段的栅栏 它的可操作粒度会比CyclicBarrier要小</p><p>下面的示例是以结婚为主题 结婚分为多个步骤 1、所有人先到场 、2、新郎、新娘 举行婚礼仪式 3、吃饭 4、其他人离开 新郎、新娘洞房</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MarriagePhaser phaser = <span class="keyword">new</span> MarriagePhaser();</span><br><span class="line">        phaser.bulkRegister(<span class="number">7</span>); <span class="comment">//简单理解就是当有7个线程进入到这个phaser中的时候 会触发执行phaser的onAdvance方法</span></span><br><span class="line">        <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, phaser).start();</span><br><span class="line">        <span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>, phaser).start();</span><br><span class="line">        <span class="keyword">new</span> Person(<span class="string">&quot;王五&quot;</span>, phaser).start();</span><br><span class="line">        <span class="keyword">new</span> Person(<span class="string">&quot;赵六&quot;</span>, phaser).start();</span><br><span class="line">        <span class="keyword">new</span> Person(<span class="string">&quot;钱七&quot;</span>, phaser).start();</span><br><span class="line">        <span class="keyword">new</span> Person(<span class="string">&quot;新郎&quot;</span>, phaser).start();</span><br><span class="line">        <span class="keyword">new</span> Person(<span class="string">&quot;新娘&quot;</span>, phaser).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> ttl)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(ttl);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MarriagePhaser</span> <span class="keyword">extends</span> <span class="title">Phaser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * onAdvance 表示当某个阶段的线程数达到预期后 执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phase</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registeredParties</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onAdvance</span><span class="params">(<span class="keyword">int</span> phase, <span class="keyword">int</span> registeredParties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (phase) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span> :  <span class="comment">//arrive();</span></span><br><span class="line">                System.out.println(<span class="string">&quot;所有人到齐了&quot;</span> + registeredParties);</span><br><span class="line">                System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> : <span class="comment">//nothing();</span></span><br><span class="line">                System.out.println(<span class="string">&quot;新郎、新娘举行婚礼&quot;</span> + registeredParties);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span> : <span class="comment">//ceremony();</span></span><br><span class="line">                System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;婚宴开席&quot;</span> + registeredParties);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span> : <span class="comment">//eat();</span></span><br><span class="line">                System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;婚宴散席 客人离开&quot;</span> + registeredParties);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span> : <span class="comment">//leave();</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span> : <span class="comment">//nothing();</span></span><br><span class="line">                System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;新郎，新娘洞房&quot;</span> + registeredParties);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span> : <span class="comment">//hug();</span></span><br><span class="line">                System.out.println(<span class="string">&quot;婚礼结束&quot;</span> + registeredParties);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String personName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Phaser phaser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        arrive();</span><br><span class="line">        nothing(); <span class="comment">//这个方法没有含义 只是为了调整打印语句的流程</span></span><br><span class="line">        ceremony();</span><br><span class="line">        eat();</span><br><span class="line">        leave();</span><br><span class="line">        nothing(); <span class="comment">//这个方法没有含义 只是为了调整打印语句的流程</span></span><br><span class="line">        hug();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">arrive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Client.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(personName + <span class="string">&quot;到达婚礼现场&quot;</span>);</span><br><span class="line">        phaser.arriveAndAwaitAdvance(); <span class="comment">//标识当前线程已经到了某个阶段 并且等待进入下一阶段</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nothing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Client.sleep(<span class="number">1000</span>);</span><br><span class="line">        phaser.arriveAndAwaitAdvance(); <span class="comment">//标识当前线程已经到了某个阶段 并且等待进入下一阶段</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ceremony</span><span class="params">()</span> </span>&#123; <span class="comment">//举行婚礼</span></span><br><span class="line">        Client.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">if</span> (personName.equals(<span class="string">&quot;新郎&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;新郎为新娘戴上戒指&quot;</span>);</span><br><span class="line">            phaser.arriveAndAwaitAdvance(); <span class="comment">//标识当前线程已经到了某个阶段 并且等待进入下一阶段</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (personName.equals(<span class="string">&quot;新娘&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;新娘为新郎戴上戒指&quot;</span>);</span><br><span class="line">            phaser.arriveAndAwaitAdvance(); <span class="comment">//标识当前线程已经到了某个阶段 并且等待进入下一阶段</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(personName + <span class="string">&quot;参加婚礼 并送上祝福&quot;</span>);</span><br><span class="line">        phaser.arriveAndAwaitAdvance(); <span class="comment">//标识当前线程已经到了某个阶段 并且等待进入下一阶段</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Client.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;婚宴开始 &quot;</span> + personName + <span class="string">&quot;开始吃饭&quot;</span>);</span><br><span class="line">        phaser.arriveAndAwaitAdvance(); <span class="comment">//标识当前线程已经到了某个阶段 并且等待进入下一阶段</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Client.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">if</span> (personName.equals(<span class="string">&quot;新郎&quot;</span>) || personName.equals(<span class="string">&quot;新娘&quot;</span>)) &#123;</span><br><span class="line">            phaser.arriveAndAwaitAdvance(); <span class="comment">//标识当前线程已经到了某个阶段 并且等待进入下一阶段</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;散席 &quot;</span> + personName + <span class="string">&quot;离开现场&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hug</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (personName.equals(<span class="string">&quot;新郎&quot;</span>) || personName.equals(<span class="string">&quot;新娘&quot;</span>)) &#123;</span><br><span class="line">            Client.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(personName + <span class="string">&quot;洞房&quot;</span>);</span><br><span class="line">            phaser.arriveAndAwaitAdvance(); <span class="comment">//标识当前线程已经到了某个阶段 并且等待进入下一阶段</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            phaser.arriveAndDeregister(); <span class="comment">// registeredParties 值会减一 arriveAndDeregister只能在最后一个阶段</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七-ReadWriteLock"><a href="#七-ReadWriteLock" class="headerlink" title="七 ReadWriteLock"></a>七 ReadWriteLock</h3><p>读写锁 实际上就是共享锁(读锁)和排他锁(写锁) </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock reentrantLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReadWriteLock readWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock(); <span class="comment">//实例化一个读写锁</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Lock readLock = readWriteLock.readLock(); <span class="comment">//读锁 读锁允许所有的读线程(需要获取读锁的线程)进入 排斥写线程进入</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Lock writeLock = readWriteLock.writeLock(); <span class="comment">//写锁 排斥读线程和写线程</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread(() -&gt; read(readLock));</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread(() -&gt; write(writeLock, <span class="number">1</span>));</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sleep(<span class="number">20000</span>); <span class="comment">//理论上的执行时间为3秒 而不是12秒 如果用reentrantLock则需要12秒</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(Lock lock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Lock lock, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;write val &quot;</span> + val);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> ttl)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(ttl);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="八-Semaphore"><a href="#八-Semaphore" class="headerlink" title="八 Semaphore"></a>八 Semaphore</h3><p>Semaphore是信号量的意思 一个信号量可以允许一个线程执行 一个信号量类似于一个锁 semaphore一般可以用来做限流 比如买票窗口 无论买的人有多少 只会同时开放几个窗口来处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">2</span>);  <span class="comment">//permits 一共可以有多少个信号量</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore.acquire(); <span class="comment">//阻塞方法 获取一个信号量(获取一把锁) 会将semaphore设置的permits的值减一</span></span><br><span class="line">                System.out.println(<span class="string">&quot;T1 running ....&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;T1 end&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                semaphore.release(); <span class="comment">//会将semaphore设置的permits的值增加一(释放一把锁)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore.acquire();</span><br><span class="line">                System.out.println(<span class="string">&quot;T2 running ....&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;T2 end&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                semaphore.release(); <span class="comment">//会将semaphore设置的permits的值增加一</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore.acquire();</span><br><span class="line">                System.out.println(<span class="string">&quot;T3 running ....&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;T3 end&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                semaphore.release(); <span class="comment">//会将semaphore设置的permits的值增加一</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore.acquire();</span><br><span class="line">                System.out.println(<span class="string">&quot;T4 running ....&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;T4 end&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                semaphore.release(); <span class="comment">//会将semaphore设置的permits的值增加一</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、sleep与wait、notify的区别&quot;&gt;&lt;a href=&quot;#一、sleep与wait、notify的区别&quot; class=&quot;headerlink&quot; title=&quot;一、sleep与wait、notify的区别&quot;&gt;&lt;/a&gt;一、sleep与wait、notify的</summary>
      
    
    
    
    <category term="高并发" scheme="http://example.com/categories/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="高并发" scheme="http://example.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>迭代器模式</title>
    <link href="http://example.com/2022/03/31/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/03/31/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-31T13:19:28.160Z</published>
    <updated>2022-04-06T12:42:23.122Z</updated>
    
    <content type="html"><![CDATA[<p>计算机的物理存储结构其实只有2种 就是数组(连续存储)和链表(跳着存储) 其他的数据结构其实底层都是由这两种数据结构实现的<br>迭代器模式又叫游标模式 它提供一种按顺序访问集合或容器的方法。所以这其实是一种容器或者集合的专属设计模式 迭代器模式最关键的就是需要设计一个Iterator接口 然后容器去实现这个接口。</p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;f&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;g&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;h&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;i&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; iterator = list.getIterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Iterator&lt;String&gt; iterator2 = list.getIterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator2.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator2.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object[] elements = <span class="keyword">new</span> Object[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == elements.length) &#123;</span><br><span class="line">            elements = Arrays.copyOf(elements, elements.length * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        elements[size] = o;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">getIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayListIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">ArrayListIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> currentIndex;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> size &gt; currentIndex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            T val = (T)elements[currentIndex];</span><br><span class="line">            currentIndex++;</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;计算机的物理存储结构其实只有2种 就是数组(连续存储)和链表(跳着存储) 其他的数据结构其实底层都是由这两种数据结构实现的&lt;br&gt;迭代器模式又叫游标模式 它提供一种按顺序访问集合或容器的方法。所以这其实是一种容器或者集合的专属设计模式 迭代器模式最关键的就是需要设计一个It</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>CAS原理解析</title>
    <link href="http://example.com/2022/03/30/%E9%AB%98%E5%B9%B6%E5%8F%91-CAS%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2022/03/30/%E9%AB%98%E5%B9%B6%E5%8F%91-CAS%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</id>
    <published>2022-03-30T13:29:00.930Z</published>
    <updated>2022-04-06T12:41:02.042Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-CAS基本概念"><a href="#一-CAS基本概念" class="headerlink" title="一 CAS基本概念"></a>一 CAS基本概念</h3><p>CAS（Compare And Swap）也叫做比较与交换，是一种无锁原子算法，映射到操作系统就是一条cmpxchg硬件汇编指令，通过硬件命令保证了原子性。其作用是让CPU将内存值更新为新值，但是有个条件，内存值必须与期望值相同。CAS操作无需用户态和内核态切换，直接在用户态对内存进行读写操作，这意味着不会进行上下文切换。它包含3个参数CAS（V，E，N），V表示待更新的内存值，E表示预期值，N表示新值，当V值等于E值时，才会将V值更新成N值，如果V值和E值不等，操作失败或者重新再来，这就是一次CAS的操作。</p><p><img src="/images/0072.png" alt="图1"></p><p>简单说，CAS需要你额外给出一个期望值，也就是你认为这个变量现在应该是什么样子的，如果变量不是你想象的那样，说明它已经被别人修改过了，你只需要重新读取，设置期望值，再次尝试修改就好了。设置一个期望值的目的：通过内存值与期望值的比较，防止自己的修改覆盖了别人的修改。</p><h3 id="二-CAS如何保证原子性"><a href="#二-CAS如何保证原子性" class="headerlink" title="二 CAS如何保证原子性"></a>二 CAS如何保证原子性</h3><p>原子性是指一个或多个操作在CPU执行过程中不被中断的特性，要么执行，要么不执行，不能执行到一半，即原子性操作是不可被中断的一个或一系列操作。为了保证CAS的原子性，CPU提供了下面两种方式</p><ul><li><p><strong>总线锁定</strong></p><p>总线（BUS）是计算机组件间数据传输方式，也就是说通过总线，CPU与其他组件连接传输数据，就是靠总线完成的，比如CPU对内存的读写</p><p><img src="/images/0073.png" alt="图2"></p><p>总线锁定是指CPU使用了<strong>总线锁</strong>，所谓总线锁就是使用CPU提供的LOCK#信号，<strong>当CPU在总线上输出LOCK#信号时，其他CPU的总线请求将被阻塞。</strong></p><p><img src="/images/0074.png" alt="图3"></p></li><li><p><strong>缓存锁定</strong></p><p>总线锁定方式虽然保持了原子性，但是在锁定期间，总线锁定阻止了被阻塞处理器和所有内存之间的通信，而输出LOCK#信号的CPU<strong>可能只需要锁住特定的一块内存区域</strong>，因此总线锁定开销较大。</p><p>所以现代CPU为了提升性能，通过<strong>锁定范围缩小的思想</strong>设计出<strong>缓存行锁定（缓存行是CPU高速缓存存储的最小单位）</strong></p><p>所谓<strong>缓存锁定</strong>是指<strong>CPU对缓存行进行锁定</strong>，当缓存行中的共享变量回写到内存时，其他CPU会通过总线嗅探机制感知到该共享变量是否发生变化，如果发生变化，让自己对应的共享变量缓存行失效，重新从内存读取最新的数据，缓存锁定是基于<strong>缓存一致性机制</strong>来实现的，因为缓存一致性机制会阻止两个以上CPU同时修改同一个共享变量（<strong>现代CPU基本都支持和使用缓存锁定机制</strong>）<strong>缓存锁定</strong>是某个CPU对缓存数据进行更改时，会通知缓存了该数据的CPU抛弃缓存的数据或者从内存重新读取</p></li></ul><p><strong>缓存一致性</strong></p><p>当程序在运行过程中，会将运算需要的数据从主存复制一份到CPU高速缓存中，那么CPU进行计算时就可以从它的高速缓存读取数据和向其中写入数据，当运算结束后，再将高速缓存中的数据刷新到主存中。</p><p>在多核CPU中，每个线程可能运行在不同的CPU中，因此每个线程运行时有自己的高速缓存。假如初始时 i 的值为0，那么我们希望两个线程执行完加1操作之后 i 的值变为2。但事实会是这样吗？</p><p>可能存在下面一种情况：初始时，两个线程分别读取i的值存入各自所在的CPU的高速缓存当中，然后线程1进行加1操作，然后把i的最新值1写入到内存。此时线程2的高速缓存当中i的值还是0，进行加1操作后，i的值为1，然后线程2把i的值写入内存。最终结果i的值是1，而不是2。这就是著名的<strong>缓存一致性问题</strong>。通常称这种被多个线程访问的变量为共享变量。</p><p>也就是说，<strong>如果一个变量在多个CPU中都存在缓存（一般在多线程编程时才会出现），那么就可能存在缓存不一致的问题。</strong></p><p>为了解决缓存不一致问题，通常来说有以下<strong>2种解决方法：</strong><br>1）通过在<strong>总线加LOCK锁</strong>的方式；<br>2）通过<strong>缓存一致性协议</strong>；</p><p>在早期的CPU中，是通过在总线上加LOCK锁的形式来解决缓存不一致的问题。<strong>因为CPU和其他部件进行通信都是通过总线来进行的，如果对总线加LOCK锁的话，也就是说阻塞了其他CPU通过总线对其它部件访问（如内存），从而使得只能有一个CPU能使用这个变量的内存。</strong>比如上面例子中，如果一个线程在执行i = i +1，如果在执行这段代码的过程中，在总线上发出了LOCK锁的信号，那么只有等待这段代码完全执行完毕之后，其他CPU才能从变量 i 所在的内存读取变量，然后进行相应的操作。这样就解决了缓存不一致的问题。</p><p>但是上面的方式会有一个问题，由于在锁住总线期间，其他CPU无法访问内存，导致效率低下。所以就出现了缓存一致性协议。该协议保证了每个缓存中使用的共享变量的副本是一致的。它的核心思想是：<strong>当CPU向内存写入数据时，如果发现操作的变量是共享变量，即在其他CPU中也存在该变量的副本，会发出信号通知其他CPU将该变量的缓存行置为无效状态，因此当其他CPU需要读取这个变量时，发现自己缓存中缓存该变量的缓存是无效的，那么它就会从内存重新读取。</strong></p><h3 id="三-CAS问题"><a href="#三-CAS问题" class="headerlink" title="三 CAS问题"></a>三 CAS问题</h3><p>CAS和锁都解决了并发中的同步问题，和锁相比CAS没有阻塞、线程上下文切换、死锁。所以CAS要比锁拥有更优越的性能，但是CAS同样存在缺点。CAS的问题如下：</p><ul><li><p><strong>只能保证一个共享变量的原子操作</strong></p><p>CAS只能针对一个共享变量使用，如果是多个共享变量最好使用锁了，当然也是可以将多个变量整合一个变量。</p></li><li><p><strong>在并发量大的情况下，CAS将消耗大量的CPU资源</strong></p><p>在并发量大的情况下，很容发生多个线程反复尝试更新某一个变量，却又一直更新不成功，会消耗大量的CPU资源</p></li><li><p><strong>ABA问题</strong></p><p>CAS需要检查待更新的内存值与预期值是否相等，其本质是要检查待更新的内存值有没有被修改过，如果没有则更新，但是如果一个值原来是A，后来被修改成了B，再被更新为A，在CAS检查时，识别不出来数据被修改过。</p><p>如果只是简单的数据结构，确实不会有什么问题，如果是复杂的数据结构可能就会产生问题。以链表数据结构为例，两个线程通过CAS去删除头节点，假设现在链表上有A-&gt;B节点</p><p><img src="/images/0075.png" alt="图4"></p></li></ul><p>1、线程1欲删除A节点，B节点成为头节点，正要执行CAS（A,A,B）时，时间片用完，切换到线程2<br>2、线程2删除A、B节点<br>3、线程2加入C、A节点<br>4、线程1重现获取时间片，执行CAS（A,A,B）<br>5、丢失C节点</p><p>要解决ABA问题也非常简单，只要追加版本号（version）即可，每次改变时version+1，即A —&gt; B —&gt; A，变成1A —&gt; 2B —&gt; 3A，在Java中提供了AtomicStampedRdference可以实现这个方案（<strong>面试只要问了C A S，就一定会问ABA，这块一定要搞明白</strong>）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-CAS基本概念&quot;&gt;&lt;a href=&quot;#一-CAS基本概念&quot; class=&quot;headerlink&quot; title=&quot;一 CAS基本概念&quot;&gt;&lt;/a&gt;一 CAS基本概念&lt;/h3&gt;&lt;p&gt;CAS（Compare And Swap）也叫做比较与交换，是一种无锁原子算法，映射</summary>
      
    
    
    
    <category term="高并发" scheme="http://example.com/categories/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="高并发" scheme="http://example.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>并发编程三大特性</title>
    <link href="http://example.com/2022/03/26/%E9%AB%98%E5%B9%B6%E5%8F%91-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/"/>
    <id>http://example.com/2022/03/26/%E9%AB%98%E5%B9%B6%E5%8F%91-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</id>
    <published>2022-03-26T08:29:03.971Z</published>
    <updated>2022-04-08T15:45:50.217Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-可见性"><a href="#一-可见性" class="headerlink" title="一 可见性"></a>一 可见性</h3><p>线程的可见性是指 是指当一个线程修改了共享变量的值，其它线程能够适时得知这个修改。用volatile关键字可以保障线程的可见性volatile 不仅能够保证基本数据类的线程可见性 也可以保证引用类型或者数组本身的可见性 对于引用类型的成员变量的可见性也是可以保证的 volatile有两个作用 1、保证线程的可见性 2、进制CPU指令重排</p><p>先看一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>; <span class="comment">//线程共享变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;thread start&quot;</span>);</span><br><span class="line">                <span class="keyword">while</span> (running) &#123; <span class="comment">//t1的内存缓存中缓存的running变量的副本</span></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;thread end&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        running = <span class="keyword">false</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;running is false&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码无论running是不是false t1线程都不会终止 会一直循环 原因是每个线程在初始化的时候 都会从主线程将自己需要的变量(上面代码中的running)从主线程中copy一份到自己的缓存中 后续每次读这个变量都是从自己的缓存空间中去读 这就是为什么running明明已经是false了但是线程没有停止。</p><p><strong>用volatile修饰running变量</strong></p><p>下面的程序就可以正常退出了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;thread start&quot;</span>);</span><br><span class="line">                <span class="keyword">while</span> (running) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;thread end&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        running = <span class="keyword">false</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;running is false&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>某些语句是可以触发线程内存缓存与主线程内存缓存的同步刷新</strong></p><p>其实就是说除了用volatile 修饰变量保证线程可见性之外 有一些语句也是可以达到类似的效果的 比如synchronized关键字 当线程执行到有synchronized关键字标识的代码块的时候 也会触发与主线程之间的同步</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;thread start&quot;</span>);</span><br><span class="line">                <span class="keyword">while</span> (running) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (Client.class) &#123; <span class="comment">//当t1线程执行到这里的时候 会从主线程重新同步running的状态</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;thread running&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;thread end&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        running = <span class="keyword">false</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;running is false&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>volatile保证引用类型成员变量的可见性</strong></p><p>下面的代码中A类的running成员变量并没有用volatile修饰 但线程仍然可以停止 (以前有的书上说 volatile只能保证引用类型本身的可见性 不能同时保证其成员变量的可见性 这个结论实测是错误的)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> A a = <span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;thread start&quot;</span>);</span><br><span class="line">                <span class="keyword">while</span> (a.running) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;thread end&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        a.running = <span class="keyword">false</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;running is false&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> running = <span class="keyword">true</span>; <span class="comment">//没有用volatile修饰</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-有序性"><a href="#二-有序性" class="headerlink" title="二 有序性"></a>二 有序性</h3><p>先看下面的代码 这段代码要跑很久 很多次才可能出现预期的结果 主要是为了说明 即便是单线程 执行顺序也不一定就是你代码的顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">            y = <span class="number">0</span>;</span><br><span class="line">            a = <span class="number">0</span>;</span><br><span class="line">            b = <span class="number">0</span>;</span><br><span class="line">            CountDownLatch cd = <span class="keyword">new</span> CountDownLatch(<span class="number">2</span>);</span><br><span class="line">            Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    a = <span class="number">1</span>; </span><br><span class="line">                    x= b;</span><br><span class="line">                    cd.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    b = <span class="number">1</span>;</span><br><span class="line">                    y= a;</span><br><span class="line">                    cd.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            t1.start();</span><br><span class="line">            t2.start();</span><br><span class="line">            cd.await();</span><br><span class="line">            String result = <span class="string">&quot;第&quot;</span> + i +<span class="string">&quot;次  ( x = &quot;</span> + x + <span class="string">&quot; y = &quot;</span> + y + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) &#123; <span class="comment">//如果x==0 且y==0的时候只能证明一种情况 在t1 和t2线程中 一定是先执行 x=b 和 y=a</span></span><br><span class="line">                System.out.println(result);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行结果</strong></p><p>为了跑出来这个结果 跑了大概1个小时</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">第16924783次</span>  <span class="string">( x = 0 y = 0)</span></span><br></pre></td></tr></table></figure><p>下图对t1和t2两个线程可能的执行情况做了排列组合 可以发现如果是x=0 且y=0的情况下 那么一定是  一定是先执行 x=b 和 y=a 先执行了</p><p><img src="/images/0060.png" alt="图1"></p><p>之所以会出现在单线程中都可能乱序的情况 是因为cpu在执行指令的时候 为了提高效率 会进行指令重排(将前后两条指令没有依赖关系的代码 可以进行指令重排) 这种程度上的指令重排 不会影响单线程的最终一致性 </p><p><strong>有序性示例二</strong></p><p>下面的代码存在有序性的问题 因为number=42 与ready=true没有依赖关系 所以理论上他们有可能被cpu进行指令重排 那么会导致最后System.out.println(number);打印的结果是0而不是42</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span>  ready = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (!ready) &#123;</span><br><span class="line">                    Thread.yield(); <span class="comment">//调用这个方法 会使得当前线程让掉CPU的时间片 其他线程(主线程)有一定概率可以抢到这个时间片</span></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(number); <span class="comment">//有一种可能的结果是0 因为 ready = true; 先于 number = 42;执行了</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t.start();</span><br><span class="line">        number = <span class="number">42</span>;</span><br><span class="line">        ready = <span class="keyword">true</span>;</span><br><span class="line">        t.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>jclasslib Bytecode Viewer</strong></p><p>jclasslib Bytecode Viewer 是idea的一个插件 可以用来查看字节码信息 类似于通过<code>javac</code>和<code>javap</code> -verbose 查看字节码</p><p><img src="/images/0061.png" alt="图2"></p><p><strong>this对象逸出问题</strong></p><p>所谓this对象逸出其实就是其他线程通过this(隐式调用)访问了还没有构造好的对象。下面这段代码理论上是可能由于指令重排序导致打印的结果为0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="keyword">this</span>.num)); <span class="comment">//不论这里加不加this都一样</span></span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面是 Test test = new Test()的字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="keyword">new</span> #<span class="number">7</span> &lt;com/poi/tl/test/Test&gt;  <span class="comment">//申请内存</span></span><br><span class="line"><span class="number">3</span> dup <span class="comment">//是将栈顶数值复制一份并送入至栈顶</span></span><br><span class="line"><span class="number">4</span> invokespecial #<span class="number">8</span> &lt;com/poi/tl/test/Test.&lt;init&gt; : ()V&gt; <span class="comment">//调用Test的构造方法(当然还包括一些其他的内容比如静态代码块之类的 这里不过多解释 只要知道这一步会调用构造方法就行了)</span></span><br><span class="line"><span class="number">7</span> astore_1 <span class="comment">//将test字面量与Test对象进行关联 也就是把刚刚新建的Test对象的内存地址赋给test变量</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>这里invokespecial 与 astore_1 可能会发生指令重排 astore_1 先于 invokespecial 执行 这样的话 t1这个线程就有可能在Test还没有执行完构造方法的时候(num还没有初始化的时候 此时num=0) 就执行了System.out.println(this.num) 从而输出0 而不是9 <strong>为了避免this对象逸出问题 一般不建议在构造方法中启动新的线程 你可以去new这个线程 但是不要去启动</strong></p><p><strong>对象在内存中的存储布局</strong></p><p>一个对象在内存中的布局包括3个部分 </p><ul><li><strong>markword</strong> 对象头 占8个字节 这里主要包含一些锁信息、gc信息以及hashCode的信息</li><li><strong>class pointer</strong> 类型指针 占4个字节</li><li><strong>实例数据</strong> 这个就是类中的一些数据 主要是成员变量</li></ul><p>下图是对象在内存中布局的结构图 如果是数组 会多个四个字节</p><p><img src="/images/0062.png" alt="图3"></p><p>可以通过jol-core来获取一个对象的大小 jol-core的依赖如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jol<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jol-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过下面的代码可以查看某个对象的大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num2 = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Test t = <span class="keyword">new</span> Test();</span><br><span class="line">        String s = ClassLayout.parseInstance(t).toPrintable();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行结果如下</strong></p><p>前12个字节固定不变是对象头和类型指针 第13-16个字节是num变量占的大小(一个int占4字节) 第17-20字节是第二个变量num2占的大小 由于20个字节不能被8整除 所以 补了4个字节 一共是24个字节</p><p><img src="/images/0063.png" alt="图4"></p><p><strong>JVM规范要求任何虚拟机都要实现下面的四种JVM内存屏障</strong> 实际上JVM就是通过这四类屏障来阻止指令重排</p><ul><li><strong>LoadLoad屏障</strong> 对于这样的语句 Load1; LoadLoad; Load2;(这里的Load指的是JVM的读指令 具体是哪一个指令无所谓 只要是与读数据相关的指令就可以了)在Load2及后续读操作要读取的数据被访问之前，保证load2读取的数据被读取完毕</li><li><strong>StoreStore屏障</strong> 对于这样的语句Store1;StoreStore;Store2;(这里的Store是指的写指令) 在Store2及后续写入操作执行前，保证Store2的写入操作对其他处理器可见</li><li><strong>LoadStore屏障</strong> 对于这样的语句 Load1;LoadStore;Store2; 在Store2及其后续写入操作被刷出前;保证Load1要读取的数据被读取完毕</li><li><strong>StoreLoad屏障</strong> 对于这样的语句 Store1;StoreLoad;Load2;在Store2及其后续所有操作执行前;保证Store1的写入对其所有处理器可见</li></ul><h3 id="三-原子性"><a href="#三-原子性" class="headerlink" title="三 原子性"></a>三 原子性</h3><p>有关原子性的一些基本概念</p><ul><li><strong>race condition</strong> 竞争条件 指的是多个线程访问共享数据时产生竞争</li><li><strong>unconsistency</strong> 数据不一致 指并发访问之下产生的非期望的结果</li><li><strong>monitor</strong> 在操作系统中管程 在java中监视器 在java中其实就是用来做锁的那个对象</li><li><strong>critical section</strong> 临界区 其实就是锁住的代码块 如果临界区执行时间长 语句多 叫做锁的粒度比较粗</li></ul><p><img src="/images/0064.png" alt="图5"></p><p>jvm中具备原子性的八大操作</p><ul><li>lock 主内存 标识变量为线程所独占</li><li>unlock 主内存 解锁线程独占变量</li><li>read 主内存 读取内存到线程缓存(工作内存)</li><li>load 工作内存 read后的值放入线程本地变量副本</li><li>use 工作内存 传值给执行引擎</li><li>assign 工作内存  执行引擎结果赋值给线程本地变量</li><li>store 工作内存 存值到主内存 给write备用</li><li>write 主内存 写变量值</li></ul><p><strong>上锁的本质就是将并发编程序列化 volatile 保障线程的可见性和有序性 synchronized 保障线程的可见性和原子性</strong> </p><p><strong>悲观锁与乐观锁</strong></p><ul><li><strong>悲观锁</strong> 悲观的认为这个操作会被别的线程打断 不管有没有别的线程在竞争 都先把锁加上 synchronized就是一种悲观锁</li><li><strong>乐观锁</strong> 乐观锁又叫自旋锁或者无锁 CAS操作就是乐观锁 乐观的认为这个操作不会被打断</li></ul><p><strong>CAS</strong> 全称叫做 compare and swap 或者 compare and exchange CAS 操作是一个原子性的操作 为了保证CAS的原子性在CPU层级其实还是加了锁的 CAS实现的最核心的CPU指令为 lock cmpchg 指令 但是它比JVM级别的锁效率要高 CAS简单来说就是在修改一个值之前先把这个值读进来 然后进行原子操作 在写入之前再读一次 发现这次读的值和原来读的值一样 就写入 否则不做修改</p><p><img src="/images/0065.png" alt="图6"></p><p><strong>CAS的ABA问题</strong> 就是说一个线程读取的当前值E是0(从内存中) 然后计算结果值V为1 然后比较E和N的时候 发现当前最新值N还是0 但是此时的0 有两种可能的结果 1个是在这段时间没有其他线程进行操作 还是原来的版本 所以此时当前线程将N更新为1是没有问题的 但是还有一种结果是 当前的新值N是由于其他的线程改动多次后造成的 简单来说就是此0非彼0</p><p>对于CAS的ABA问题 如果对于简单数据类型来说 一般不需要处理 但是对于引用数据类型来说 就需要主要了 因为引用的地址没变 但是引用对象的属性可能发生了改变 解决ABA问题最好的办法就是多加一个version 用version进行计算和比较 而不用变量本身的值去做计算和比较 </p><p><strong>乐观锁与悲观锁的效率</strong>  对于悲观锁来说 它会将竞争锁的线程放到队列中等待 等待的过程是不消耗CPU的 而对于乐观锁来说 对于竞争锁的线程来说 会不断的去尝试或的锁 这个过程是要消耗CPU的 基于这种特性 所以在不同的场景下用不同的锁</p><ul><li>临界区执行时间比较长 且 等待的线程很多(并发要求比较高) 的时候 用悲观锁</li><li>对于临界区执行时间较短 且等待的线程不多的情况下 建议用乐观锁 在实际开发过程中建议优先用synchronized因为它虽然是悲观锁 但是jdk做了很多优化 性能相对来说已经很不错了。</li></ul><h3 id="synchronized详解"><a href="#synchronized详解" class="headerlink" title="synchronized详解"></a>synchronized详解</h3><p>JDK早期 synchronized叫做重量级锁 是因为JDK早期 利用synchronized关键字申请锁资源的时候 必须要经过操作系统内核(kernel)</p><p>JDK markword 包含哪些内容 如下图(64位系统的 32位系统会不一样)</p><p><img src="/images/0066.png" alt="图7"></p><p>上面这张图表示在java对象布局中 markword一共占8个字节 其中最后一个的字节的最后两个bit是锁标志位 markword的第最后一个字节的最后两位01 且 倒数第三位是0  表示是一个没有锁的普通对象 如果是101 表示这个对象加了偏向锁 如果最后两位是00 则是加了自旋锁 如果是最后两位10则是加了重量级锁 如果是最后两位11则是代表对象正在GC</p><p>可以用下面这段代码来比较一个普通对象在有锁或者无锁状态下的markword的变化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object o = <span class="keyword">new</span> Object();</span><br><span class="line">        System.out.println(ClassLayout.parseInstance(o).toPrintable());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line">            System.out.println(ClassLayout.parseInstance(o).toPrintable());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下图是上面代码的执行结果 注意输出的对象布局 markword的8个字节是倒着的 所以也就是说 下图显示的第一个字节就是markword的最后一个字节 下面的两次打印 一次是001 表示无锁 还有一次是00 表示轻量级锁</p><p><img src="/images/0067.png" alt="图8"></p><p><strong>synchronized锁升级</strong> 下面是synchronized锁升级的流程图</p><p><img src="/images/0068.png" alt="图9"></p><p><strong>用户空间锁与重量级锁</strong> </p><ul><li><strong>偏向锁</strong>、<strong>自旋锁(轻量级锁/无锁)</strong> 都是在用户空间完成 不需要向内核申请<ul><li><strong>偏向锁</strong> 偏向锁实际上就是将当前线程(第一个访问锁对象的线程)的id(java中是线程id 底层C++的实现是线程指针)写到写到锁对象(监视器 或者叫做synchronized锁住的那个对象)的markword当中 这种锁就叫偏向锁 偏向锁实际上是没有竞争条件的 因为就一个线程访问锁对象 当有多个线程访问锁对象的时候 会形成轻度竞争 从而将锁升级为自旋锁可以看上面的图 </li><li><strong>自旋锁</strong> 当存在竞争条件时 偏向锁会被撤销 存在竞争条件的多个线程 开始自旋 所谓自旋就是先在自己的线程栈中生成一个LR(LockRecord) 然后获得锁的线程会把LR写到锁对象的markword中 其他没有竞争到锁的线程 此时会继续自旋</li></ul></li><li><strong>重量级锁</strong> 重量级锁也叫做互斥锁 是需要向内核申请的 当自旋锁自旋10次都没拿到锁 那么就会自动升级为重量级锁 在重量级锁的时候 其他线程会进入队列等待 不会消耗CPU资源</li></ul><p><img src="/images/0069.png" alt="图10"></p><p><strong>锁重入</strong></p><p>Synchronized是可重入锁 对于可重入锁 重入的次数必须记录 因为要解锁几次必须得对应 对于偏向锁来说 重入的次数记录在线程栈中 没重入一次LR(LockRecord) 个数加 1 轻量级锁和偏向锁的处理基本一样都是LockRecord加1 如果是重量级锁则是记录在ObjectMonitor的某一个字段上</p><p><strong>自旋锁什么时候升级为重量级锁</strong> 如果有线程超过10次自旋 或者自旋的线程数超过CPU核数的一半 就会升级为重量级锁 JDK1.6之前 可以通过jvm 参数-XXPreBlockSpin来调整自旋的次数 JDK1.6之后加入了自适应自旋 自旋的次数由JVM自己控制 所以这个参数无效了</p><p><strong>偏向锁是否一定比自旋锁效率高</strong> 不一定 在明确的指导会有多线程竞争的情况下 偏向锁肯定会涉及到锁撤销 这时候直接使用自旋锁 效率会更高 JVM启动时会有很多线程竞争 所以默认情况 在JVM启动时是不会打开偏向锁的  过一段时间后再打开偏向锁 可以通过JVM参数-XX:BiasedLockingStartupDelay来控制  默认情况下是进程开始启动4秒后打开偏向锁 可以用下面的代码测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">//        Object o = new Object();</span></span><br><span class="line"><span class="comment">//        System.out.println(ClassLayout.parseInstance(o).toPrintable());</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        Object o = <span class="keyword">new</span> Object(); <span class="comment">//4秒后创建的对象才会默认开启偏向锁</span></span><br><span class="line">        System.out.println(ClassLayout.parseInstance(o).toPrintable());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/0070.png" alt="图11"></p><p>再看看下面这段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">//        Object o = new Object();</span></span><br><span class="line"><span class="comment">//        System.out.println(ClassLayout.parseInstance(o).toPrintable());</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        Object o = <span class="keyword">new</span> Object(); <span class="comment">//4秒后创建的对象才会默认开启偏向锁</span></span><br><span class="line">        <span class="keyword">synchronized</span> (o) &#123; <span class="comment">//多了一个获取锁的操作</span></span><br><span class="line">             System.out.println(Thread.currentThread().getId());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ClassLayout.parseInstance(o).toPrintable());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/0071.png" alt="图12"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-可见性&quot;&gt;&lt;a href=&quot;#一-可见性&quot; class=&quot;headerlink&quot; title=&quot;一 可见性&quot;&gt;&lt;/a&gt;一 可见性&lt;/h3&gt;&lt;p&gt;线程的可见性是指 是指当一个线程修改了共享变量的值，其它线程能够适时得知这个修改。用volatile关键字可以保障线</summary>
      
    
    
    
    <category term="高并发" scheme="http://example.com/categories/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="高并发" scheme="http://example.com/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="http://example.com/2022/03/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/03/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-26T04:35:38.687Z</published>
    <updated>2022-04-06T12:43:03.110Z</updated>
    
    <content type="html"><![CDATA[<p>观察者模式 又叫发布/订阅模式 或者也叫 源/监听器模式 一个源对象(被观察者)可以被多个监听器(观察者)监听</p><p>下面的示例是模拟微信公众号发文 而各个关注者可以收到消息的案例</p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//公众号 也就是被观察者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OfficialAccount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;OASubscription&gt; oaSubscriptions = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OfficialAccount</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registry</span><span class="params">(OASubscription OASubscription)</span> </span>&#123;</span><br><span class="line">        oaSubscriptions.add(OASubscription);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户&quot;</span>+ OASubscription.getName() + <span class="string">&quot;关注了公众号&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">(String text)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;公众号发送文章《&quot;</span>+text+<span class="string">&quot;》&quot;</span>);</span><br><span class="line">        <span class="comment">//订阅者订阅消息</span></span><br><span class="line">        oaSubscriptions.forEach(subscription -&gt; &#123;</span><br><span class="line">            subscription.subscription(<span class="keyword">new</span> Event.EventBuilder&lt;OfficialAccount&gt;().addSource(<span class="keyword">this</span>).addMsg(text).build());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消息订阅的接口(也就是所谓的抽象的监听器接口)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subscription</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">subscription</span><span class="params">(Event&lt;T&gt; event)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公众号消息订阅对象 也就是具体的监听器接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OASubscription</span> <span class="keyword">implements</span> <span class="title">Subscription</span>&lt;<span class="title">OfficialAccount</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscription</span><span class="params">(Event&lt;OfficialAccount&gt; event)</span> </span>&#123;</span><br><span class="line">        OfficialAccount account = event.getSource(); <span class="comment">//获取公众号</span></span><br><span class="line">        System.out.println(<span class="string">&quot;订阅者 : &quot;</span> + name + <span class="string">&quot;收到公众号-&quot;</span>+account.getName() + <span class="string">&quot;发来的文章《&quot;</span> + event.getMsg()+<span class="string">&quot;》&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消息类 也就是事件类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Event</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消息来源(被观察者)</span></span><br><span class="line">    <span class="keyword">private</span> T source;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消息内容</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EventBuilder</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Event&lt;T&gt; event = <span class="keyword">new</span> Event&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Event&lt;T&gt; <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> event;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> EventBuilder&lt;T&gt; <span class="title">addSource</span><span class="params">(T source)</span> </span>&#123;</span><br><span class="line">            event.source = source;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> EventBuilder&lt;T&gt; <span class="title">addMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">            event.msg = msg;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个名为java技术栈的公众号 (被观察者也称之为源)</span></span><br><span class="line">        OfficialAccount account = <span class="keyword">new</span> OfficialAccount(<span class="string">&quot;java技术栈&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建三个学生</span></span><br><span class="line">        OASubscription user1 = <span class="keyword">new</span> OASubscription();</span><br><span class="line">        user1.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">        OASubscription user2 = <span class="keyword">new</span> OASubscription();</span><br><span class="line">        user2.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">        OASubscription user3 = <span class="keyword">new</span> OASubscription();</span><br><span class="line">        user3.setName(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟学生关注公众号</span></span><br><span class="line">        account.registry(user1);</span><br><span class="line">        account.registry(user2);</span><br><span class="line">        account.registry(user3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟公众号发布文章</span></span><br><span class="line">        account.publish(<span class="string">&quot;java入门示例-HelloWord&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">用户张三关注了公众号</span></span><br><span class="line"><span class="attr">用户李四关注了公众号</span></span><br><span class="line"><span class="attr">用户王五关注了公众号</span></span><br><span class="line"><span class="attr">公众号发送文章《java入门示例-HelloWord》</span></span><br><span class="line"><span class="meta">订阅者</span> : <span class="string">张三收到公众号-java技术栈发来的文章《java入门示例-HelloWord》</span></span><br><span class="line"><span class="meta">订阅者</span> : <span class="string">李四收到公众号-java技术栈发来的文章《java入门示例-HelloWord》</span></span><br><span class="line"><span class="meta">订阅者</span> : <span class="string">王五收到公众号-java技术栈发来的文章《java入门示例-HelloWord》</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;观察者模式 又叫发布/订阅模式 或者也叫 源/监听器模式 一个源对象(被观察者)可以被多个监听器(观察者)监听&lt;/p&gt;
&lt;p&gt;下面的示例是模拟微信公众号发文 而各个关注者可以收到消息的案例&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>责任链模式</title>
    <link href="http://example.com/2022/03/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/03/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-25T13:01:32.035Z</published>
    <updated>2022-04-06T12:45:19.940Z</updated>
    
    <content type="html"><![CDATA[<p>最基本的责任链模式其实很简单 用一个对象存(Chain)储所有的执行节点 并定义好顺序 然后在Chain中循环执行每一个节点的逻辑即可 这里不做演示 下面是利用责任链模式实现的一个类似SpringMVC中FilterChain的一个操作 它会接收用户的请求 并处理服务器的响应 </p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟用户请求对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟服务端响应对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义好Filter接口用于过滤请求和响应</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Request request, Response response, FilterChain filterChain)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//过滤器联调(责任链)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterChain</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Filter&gt; filters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Request request, Response response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == filters.size()) <span class="keyword">return</span>;</span><br><span class="line">        Filter filter = filters.get(index);</span><br><span class="line">        index++;</span><br><span class="line">        filter.doFilter(request, response, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterChain <span class="title">addFilter</span><span class="params">(Filter filter)</span> </span>&#123;</span><br><span class="line">        filters.add(filter);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个过滤器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterOne</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Request request, Response response, FilterChain filterChain)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;requst 经过第一个过滤器 msg = &quot;</span> + request.getMsg());</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">        System.out.println(<span class="string">&quot;response 经过第一个过滤器 msg = &quot;</span> + response.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个过滤器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterTwo</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Request request, Response response, FilterChain filterChain)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;requst 经过第二个过滤器 msg = &quot;</span> + request.getMsg());</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">        System.out.println(<span class="string">&quot;response 经过第二个过滤器 msg = &quot;</span> + response.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三个过滤器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterThree</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(Request request, Response response, FilterChain filterChain)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;requst 经过第三个过滤器 msg = &quot;</span> + request.getMsg());</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">        System.out.println(<span class="string">&quot;response 经过第三个过滤器 msg = &quot;</span> + response.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类 模拟用户请求</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Request request = <span class="keyword">new</span> Request();</span><br><span class="line">        request.setMsg(<span class="string">&quot;我是请求入参&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Response response = <span class="keyword">new</span> Response();</span><br><span class="line">        response.setMsg(<span class="string">&quot;我是响应出参&quot;</span>);</span><br><span class="line"></span><br><span class="line">        FilterChain filterChain = <span class="keyword">new</span> FilterChain();</span><br><span class="line">        filterChain.addFilter(<span class="keyword">new</span> FilterOne()).addFilter(<span class="keyword">new</span> FilterTwo()).addFilter(<span class="keyword">new</span> FilterThree());</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><p>过滤器的执行结果顺序如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">requst</span> <span class="string">经过第一个过滤器 msg = 我是请求入参</span></span><br><span class="line"><span class="attr">requst</span> <span class="string">经过第二个过滤器 msg = 我是请求入参</span></span><br><span class="line"><span class="attr">requst</span> <span class="string">经过第三个过滤器 msg = 我是请求入参</span></span><br><span class="line"><span class="attr">response</span> <span class="string">经过第三个过滤器 msg = 我是响应出参</span></span><br><span class="line"><span class="attr">response</span> <span class="string">经过第二个过滤器 msg = 我是响应出参</span></span><br><span class="line"><span class="attr">response</span> <span class="string">经过第一个过滤器 msg = 我是响应出参</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最基本的责任链模式其实很简单 用一个对象存(Chain)储所有的执行节点 并定义好顺序 然后在Chain中循环执行每一个节点的逻辑即可 这里不做演示 下面是利用责任链模式实现的一个类似SpringMVC中FilterChain的一个操作 它会接收用户的请求 并处理服务器的响</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
