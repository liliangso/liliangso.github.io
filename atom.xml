<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-04T02:22:01.752Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NIO基础</title>
    <link href="http://example.com/2022/08/17/Netty-NIO%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/08/17/Netty-NIO%E5%9F%BA%E7%A1%80/</id>
    <published>2022-08-17T15:24:20.615Z</published>
    <updated>2022-09-04T02:22:01.752Z</updated>
    
    <content type="html"><![CDATA[<h3 id="NIO-三大组件"><a href="#NIO-三大组件" class="headerlink" title="NIO 三大组件"></a>NIO 三大组件</h3><p>NIO 又叫非阻塞式IO(non-bloking io) 或者也叫New IO 它有三大组件 <strong>Channel</strong>、<strong>Buffer</strong>、<strong>Selector</strong></p><ul><li><p><strong>Channel</strong> </p><p>channel有点类似于stream 它代表的是读写数据的双向通道 可以从channel将数据读入buffer，也可以将buffer中的数据写入channel。而之前的stream 要么是输入，要么是输出。channel比stream更为底层</p><p>常见的channel有</p><ul><li>FileChannel</li><li>DatagramChannel(UDP传输时用)</li><li>SocketChannel</li><li>ServerSocketChannel</li></ul></li><li><p><strong>Buffer</strong></p><p>buffer是用来缓冲读写数据的 常见的buffer有</p><ul><li>ByteBuffer</li><li>ShortBuffer</li><li>IntBuffer</li><li>LongBuffer</li><li>FloatBuffer</li><li>DoubleBuffer</li></ul></li><li><p><strong>Selector</strong></p><p>selector 也称选择器 它的作用就是配合一个线程来管理多个channel,获取这些channel上发生的事件 这些channel工作在非阻塞模式下 不会让线程被阻塞在一个channel中 适合服务器的连接数多但是流量低的场景</p><p><img src="/images/0141.png" alt="图一"></p></li></ul><p><strong>Channel与ByteBuffer基本使用案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestByteBuffer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//获取FileChannel</span></span><br><span class="line">        <span class="comment">//1、可以通过输入/出流来间接的获取Channel</span></span><br><span class="line">        <span class="comment">//2、也可以通过RandomAccessFile来获取Channel</span></span><br><span class="line">        <span class="comment">//对于IDEA来说 maven项目 FileInputStream根路径是在maven的project(项目)的根路径 不是module的根路径 所以下面我接了一个module的名称netty-demo</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;netty-demo/data.txt&quot;</span>);</span><br><span class="line">        FileChannel fileChannel = fis.getChannel();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//准备缓冲区 ByteBuffer ByteBuffer不能实例化 需要通过静态方法获取</span></span><br><span class="line">            <span class="comment">//分配一个5字节的缓冲区</span></span><br><span class="line">            ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">            <span class="comment">//从Channel读取数据(方向要搞对 这实际上是至从channel去读 然后向缓冲区写 channel ---&gt; byteBuffer)</span></span><br><span class="line">            <span class="keyword">int</span> len = fileChannel.read(byteBuffer);</span><br><span class="line">            <span class="keyword">while</span> (len != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//打印读取的内容(byteBuffer中的内容)</span></span><br><span class="line">                <span class="comment">//给byteBuffer切换模式 先调flip方法表示接下来要从byteBuffer中读取数据了</span></span><br><span class="line">                byteBuffer.flip();</span><br><span class="line">                <span class="comment">//byteBuffer中是否还有数据没有读完</span></span><br><span class="line">                <span class="keyword">while</span> (byteBuffer.hasRemaining()) &#123;</span><br><span class="line">                    <span class="comment">//一个字节一个字节的从byteBuffer中读取数据</span></span><br><span class="line">                    <span class="keyword">byte</span> b = byteBuffer.get();</span><br><span class="line">                    System.out.println((<span class="keyword">char</span>)b);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//将byteBuffer切换为写模式</span></span><br><span class="line">                byteBuffer.clear();</span><br><span class="line">                <span class="comment">//重新从byteBuffer中读取数据</span></span><br><span class="line">                len = fileChannel.read(byteBuffer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fileChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">                fileChannel.close();</span><br><span class="line">            &#125;</span><br><span class="line">            fis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>data.txt内容</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123abcdef456</span><br></pre></td></tr></table></figure><p><strong>ByteBuffer结构</strong></p><p>ByteBuffer有以下重要属性</p><ul><li>capacity</li><li>position</li><li>limit</li></ul><p><img src="/images/0142.png" alt="图二"></p><p><img src="/images/0143.png" alt="图三"></p><p><img src="/images/0144.png" alt="图四"></p><p><strong>ByteBuffer使用示例与常见方法</strong></p><ul><li><p><strong>使用示例</strong></p><p>下面这个工具类可以更好的帮助我们来理解ByteBuffer在写入和读取的时候的bytebuffer中position与limit的变化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liliang.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.util.internal.MathUtil;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.internal.StringUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteBufferUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] BYTE2CHAR = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] HEXDUMP_TABLE = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">256</span> * <span class="number">4</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] HEXPADDING = <span class="keyword">new</span> String[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] HEXDUMP_ROWPREFIXES = <span class="keyword">new</span> String[<span class="number">65536</span> &gt;&gt;&gt; <span class="number">4</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] BYTE2HEX = <span class="keyword">new</span> String[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] BYTEPADDING = <span class="keyword">new</span> String[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">char</span>[] DIGITS = <span class="string">&quot;0123456789abcdef&quot;</span>.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">            HEXDUMP_TABLE[i &lt;&lt; <span class="number">1</span>] = DIGITS[i &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">0x0F</span>];</span><br><span class="line">            HEXDUMP_TABLE[(i &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>] = DIGITS[i &amp; <span class="number">0x0F</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the lookup table for hex dump paddings</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; HEXPADDING.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> padding = HEXPADDING.length - i;</span><br><span class="line">            StringBuilder buf = <span class="keyword">new</span> StringBuilder(padding * <span class="number">3</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; padding; j++) &#123;</span><br><span class="line">                buf.append(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            HEXPADDING[i] = buf.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the lookup table for the start-offset header in each row (up to 64KiB).</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; HEXDUMP_ROWPREFIXES.length; i++) &#123;</span><br><span class="line">            StringBuilder buf = <span class="keyword">new</span> StringBuilder(<span class="number">12</span>);</span><br><span class="line">            buf.append(StringUtil.NEWLINE);</span><br><span class="line">            buf.append(Long.toHexString(i &lt;&lt; <span class="number">4</span> &amp; <span class="number">0xFFFFFFFFL</span> | <span class="number">0x100000000L</span>));</span><br><span class="line">            buf.setCharAt(buf.length() - <span class="number">9</span>, <span class="string">&#x27;|&#x27;</span>);</span><br><span class="line">            buf.append(<span class="string">&#x27;|&#x27;</span>);</span><br><span class="line">            HEXDUMP_ROWPREFIXES[i] = buf.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the lookup table for byte-to-hex-dump conversion</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BYTE2HEX.length; i++) &#123;</span><br><span class="line">            BYTE2HEX[i] = <span class="string">&#x27; &#x27;</span> + StringUtil.byteToHexStringPadded(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the lookup table for byte dump paddings</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BYTEPADDING.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> padding = BYTEPADDING.length - i;</span><br><span class="line">            StringBuilder buf = <span class="keyword">new</span> StringBuilder(padding);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; padding; j++) &#123;</span><br><span class="line">                buf.append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            BYTEPADDING[i] = buf.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the lookup table for byte-to-char conversion</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BYTE2CHAR.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt;= <span class="number">0x1f</span> || i &gt;= <span class="number">0x7f</span>) &#123;</span><br><span class="line">                BYTE2CHAR[i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                BYTE2CHAR[i] = (<span class="keyword">char</span>) i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印所有内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> buffer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">debugAll</span><span class="params">(ByteBuffer buffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> oldlimit = buffer.limit();</span><br><span class="line">        buffer.limit(buffer.capacity());</span><br><span class="line">        StringBuilder origin = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">        appendPrettyHexDump(origin, buffer, <span class="number">0</span>, buffer.capacity());</span><br><span class="line">        System.out.println(<span class="string">&quot;+--------+-------------------- all ------------------------+----------------+&quot;</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;position: [%d], limit: [%d]\n&quot;</span>, buffer.position(), oldlimit);</span><br><span class="line">        System.out.println(origin);</span><br><span class="line">        buffer.limit(oldlimit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印可读取内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> buffer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">debugRead</span><span class="params">(ByteBuffer buffer)</span> </span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">        appendPrettyHexDump(builder, buffer, buffer.position(), buffer.limit() - buffer.position());</span><br><span class="line">        System.out.println(<span class="string">&quot;+--------+-------------------- read -----------------------+----------------+&quot;</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;position: [%d], limit: [%d]\n&quot;</span>, buffer.position(), buffer.limit());</span><br><span class="line">        System.out.println(builder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">appendPrettyHexDump</span><span class="params">(StringBuilder dump, ByteBuffer buf, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (MathUtil.isOutOfBounds(offset, length, buf.capacity())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(</span><br><span class="line">                    <span class="string">&quot;expected: &quot;</span> + <span class="string">&quot;0 &lt;= offset(&quot;</span> + offset + <span class="string">&quot;) &lt;= offset + length(&quot;</span> + length</span><br><span class="line">                            + <span class="string">&quot;) &lt;= &quot;</span> + <span class="string">&quot;buf.capacity(&quot;</span> + buf.capacity() + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dump.append(</span><br><span class="line">                <span class="string">&quot;         +-------------------------------------------------+&quot;</span> +</span><br><span class="line">                        StringUtil.NEWLINE + <span class="string">&quot;         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |&quot;</span> +</span><br><span class="line">                        StringUtil.NEWLINE + <span class="string">&quot;+--------+-------------------------------------------------+----------------+&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> startIndex = offset;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> fullRows = length &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> remainder = length &amp; <span class="number">0xF</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Dump the rows which have 16 bytes.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; fullRows; row++) &#123;</span><br><span class="line">            <span class="keyword">int</span> rowStartIndex = (row &lt;&lt; <span class="number">4</span>) + startIndex;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Per-row prefix.</span></span><br><span class="line">            appendHexDumpRowPrefix(dump, row, rowStartIndex);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Hex dump</span></span><br><span class="line">            <span class="keyword">int</span> rowEndIndex = rowStartIndex + <span class="number">16</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = rowStartIndex; j &lt; rowEndIndex; j++) &#123;</span><br><span class="line">                dump.append(BYTE2HEX[getUnsignedByte(buf, j)]);</span><br><span class="line">            &#125;</span><br><span class="line">            dump.append(<span class="string">&quot; |&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ASCII dump</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = rowStartIndex; j &lt; rowEndIndex; j++) &#123;</span><br><span class="line">                dump.append(BYTE2CHAR[getUnsignedByte(buf, j)]);</span><br><span class="line">            &#125;</span><br><span class="line">            dump.append(<span class="string">&#x27;|&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Dump the last row which has less than 16 bytes.</span></span><br><span class="line">        <span class="keyword">if</span> (remainder != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> rowStartIndex = (fullRows &lt;&lt; <span class="number">4</span>) + startIndex;</span><br><span class="line">            appendHexDumpRowPrefix(dump, fullRows, rowStartIndex);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Hex dump</span></span><br><span class="line">            <span class="keyword">int</span> rowEndIndex = rowStartIndex + remainder;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = rowStartIndex; j &lt; rowEndIndex; j++) &#123;</span><br><span class="line">                dump.append(BYTE2HEX[getUnsignedByte(buf, j)]);</span><br><span class="line">            &#125;</span><br><span class="line">            dump.append(HEXPADDING[remainder]);</span><br><span class="line">            dump.append(<span class="string">&quot; |&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Ascii dump</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = rowStartIndex; j &lt; rowEndIndex; j++) &#123;</span><br><span class="line">                dump.append(BYTE2CHAR[getUnsignedByte(buf, j)]);</span><br><span class="line">            &#125;</span><br><span class="line">            dump.append(BYTEPADDING[remainder]);</span><br><span class="line">            dump.append(<span class="string">&#x27;|&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dump.append(StringUtil.NEWLINE +</span><br><span class="line">                <span class="string">&quot;+--------+-------------------------------------------------+----------------+&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">appendHexDumpRowPrefix</span><span class="params">(StringBuilder dump, <span class="keyword">int</span> row, <span class="keyword">int</span> rowStartIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (row &lt; HEXDUMP_ROWPREFIXES.length) &#123;</span><br><span class="line">            dump.append(HEXDUMP_ROWPREFIXES[row]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dump.append(StringUtil.NEWLINE);</span><br><span class="line">            dump.append(Long.toHexString(rowStartIndex &amp; <span class="number">0xFFFFFFFFL</span> | <span class="number">0x100000000L</span>));</span><br><span class="line">            dump.setCharAt(dump.length() - <span class="number">9</span>, <span class="string">&#x27;|&#x27;</span>);</span><br><span class="line">            dump.append(<span class="string">&#x27;|&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">short</span> <span class="title">getUnsignedByte</span><span class="params">(ByteBuffer buffer, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">short</span>) (buffer.get(index) &amp; <span class="number">0xFF</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是ByteBuffer测试案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestByteBuffer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">       ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">       buffer.put((<span class="keyword">byte</span>) <span class="number">0x61</span>); <span class="comment">//16进制61 就是10进制的97 也是字符a</span></span><br><span class="line">       ByteBufferUtil.debugAll(buffer); <span class="comment">//观察byteBuffer的limit、position</span></span><br><span class="line">       buffer.put(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>&#125;); <span class="comment">//依次写入16进制的62、63、64 也就是b c d</span></span><br><span class="line">       ByteBufferUtil.debugAll(buffer); <span class="comment">//观察byteBuffer的limit、position</span></span><br><span class="line">       buffer.flip(); <span class="comment">//切换到读取模式</span></span><br><span class="line">       ByteBufferUtil.debugAll(buffer); <span class="comment">//观察byteBuffer的limit、position 此时position变成了0 limit变成了4</span></span><br><span class="line">       <span class="keyword">char</span> a = (<span class="keyword">char</span>) buffer.get();</span><br><span class="line">       ByteBufferUtil.debugAll(buffer); <span class="comment">//观察byteBuffer的limit、position</span></span><br><span class="line">       System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">       buffer.compact(); <span class="comment">//调用compact进入写入模式 它会把byteBuffer中未读取的数据向前移</span></span><br><span class="line">       ByteBufferUtil.debugAll(buffer); <span class="comment">//观察byteBuffer的limit、position 以及bytebuffer中内容的变化</span></span><br><span class="line">       buffer.put((<span class="keyword">byte</span>) <span class="number">0x65</span>); <span class="comment">//写入e</span></span><br><span class="line">       ByteBufferUtil.debugAll(buffer); <span class="comment">//观察byteBuffer的limit、position 以及bytebuffer中内容的变化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>byteBuffer分配内存的两种方式的比较</strong></p><p>byteBuffer的get方法会让position读指针向后走 如果想重复读取数据 可以调用 rewind方法将position的读指针重置为0 也可以调用get(int i )方法获取索引内容 但是这个方法不会移动postion的读指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//byteBuffer有两种分配内存的方式 分别是分配堆内存 与 分配直接内存</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestByteBufferAllocate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(ByteBuffer.allocate(<span class="number">16</span>).getClass()); <span class="comment">//HeapByteBuffer</span></span><br><span class="line">        System.out.println(ByteBuffer.allocateDirect(<span class="number">16</span>).getClass()); <span class="comment">//DirectByteBuffer</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * HeapByteBuffer 与 DirectByteBuffer的区别</span></span><br><span class="line"><span class="comment">         * HeapByteBuffer 是指的分配的是java的堆内存 读写效率较低 同时堆内存 会收到java垃圾回收机制的影响</span></span><br><span class="line"><span class="comment">         * DirectByteBuffer 是指的分配的是直接内存 读写效率较高(比堆内存 少一次数据拷贝) 直接内存不会被JAVA 垃圾回收器所管控</span></span><br><span class="line"><span class="comment">         * 同时 直接内存 容易造成内存泄漏(如果使用后不及时回收内存的话) 另外直接内存 在分配内存的时候 相对堆内存来说 效率更低</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>byteBuffer的读取与写入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestByteBufferReadWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//测试buffer的写入</span></span><br><span class="line">        <span class="comment">//第一种写入方式调用put方法</span></span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">97</span>);</span><br><span class="line">        <span class="comment">//第二种写入方式调用channel的read方法</span></span><br><span class="line">        FileChannel channel = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;netty-demo/data.txt&quot;</span>).getChannel();</span><br><span class="line">        <span class="keyword">int</span> len = channel.read(buffer);</span><br><span class="line">        <span class="keyword">while</span> (len != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//测试buffer的读取</span></span><br><span class="line">            <span class="comment">//第一种调用buffer的get方法</span></span><br><span class="line">            <span class="comment">//byteBuffer切换至读取模式</span></span><br><span class="line">            buffer.flip();</span><br><span class="line">            <span class="keyword">while</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">                <span class="keyword">char</span> b = (<span class="keyword">char</span>) buffer.get();</span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//byteBuffer切换至于写入模式</span></span><br><span class="line">            buffer.clear();</span><br><span class="line">            len = channel.read(buffer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二种调用channel的write方法</span></span><br><span class="line">        <span class="comment">//先切换到写模式</span></span><br><span class="line">        buffer.clear();</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">97</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">98</span>);</span><br><span class="line">        <span class="comment">//再切换至读取模式</span></span><br><span class="line">        buffer.flip();</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;netty-demo/data2.txt&quot;</span>);</span><br><span class="line">        FileChannel channel2 = fos.getChannel();</span><br><span class="line">        channel2.write(buffer);</span><br><span class="line">        <span class="comment">//查看data2.txt</span></span><br><span class="line">        channel.close();</span><br><span class="line">        channel2.close();</span><br><span class="line">        fos.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>byteBuffer与字符串的互相转换</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestByteBufferString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、字符串转ByteBuffer</span></span><br><span class="line">        String str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">15</span>);</span><br><span class="line">        byteBuffer.put(str.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        ByteBufferUtil.debugAll(byteBuffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、利用charset将字符串写入byteBuffer中</span></span><br><span class="line">        ByteBuffer buffer_2 = StandardCharsets.UTF_8.encode(str);</span><br><span class="line">        ByteBufferUtil.debugAll(buffer_2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、利用warp将字符串写入byteBuffer中</span></span><br><span class="line">        ByteBuffer buffer_3 = ByteBuffer.wrap(str.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        ByteBufferUtil.debugAll(buffer_3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、将byteBuffer中的字节数据转字符串</span></span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        <span class="keyword">int</span> len = byteBuffer.limit();</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[len];</span><br><span class="line">        byteBuffer.get(b);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(b, StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5、利用charset将byteBuffer中的字节数据转字符串</span></span><br><span class="line">        CharBuffer charBuffer = StandardCharsets.UTF_8.decode(buffer_2);</span><br><span class="line">        System.out.println(charBuffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>byteBuffer分散读取案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestScatteringRead</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 有这样的需求 如果已经一个文件的大小为9个字节 内容是onetwothree 现在希望一次读取一部分(按单词的长度来读取)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//通过RandomAccessFile这个类来随机访问一个文件来获取fileChannel 和 FileInputStream差不多</span></span><br><span class="line">        <span class="comment">//RandomAccessFile 第二个参数是mode 有  &quot;r&quot;, &quot;rw&quot;, &quot;rws&quot;, or &quot;rwd&quot; 这几个值 r表示只读 rw表示可读可写</span></span><br><span class="line">        FileChannel fileChannel = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;netty-demo/data2.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).getChannel();</span><br><span class="line">        ByteBuffer b1 = ByteBuffer.allocate(<span class="number">3</span>);</span><br><span class="line">        ByteBuffer b2 = ByteBuffer.allocate(<span class="number">3</span>);</span><br><span class="line">        ByteBuffer b3 = ByteBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//这个表示一次性将data2.txt中的内容分别读到b1、b2、b3三个byteBuffer中 每个buffer读入3个字节的内容</span></span><br><span class="line">        fileChannel.read(<span class="keyword">new</span> ByteBuffer[]&#123;b1, b2, b3&#125;);</span><br><span class="line"></span><br><span class="line">        b1.flip();</span><br><span class="line">        b2.flip();</span><br><span class="line">        b3.flip();</span><br><span class="line">        ByteBufferUtil.debugAll(b1); <span class="comment">//里面的内容是one</span></span><br><span class="line">        ByteBufferUtil.debugAll(b2); <span class="comment">//里面的内容是two</span></span><br><span class="line">        ByteBufferUtil.debugAll(b3); <span class="comment">//里面的内容是three</span></span><br><span class="line">        <span class="keyword">if</span>(fileChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">            fileChannel.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>byteBuffer集中写的案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGatheringWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 测试将多个byteBuffer同时写入文件中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ByteBuffer b1 = StandardCharsets.UTF_8.encode(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        ByteBuffer b2 = StandardCharsets.UTF_8.encode(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        ByteBuffer b3 = StandardCharsets.UTF_8.encode(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 注意b4关于flip执行多次的测试</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ByteBuffer b4 = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">        b4.put((<span class="keyword">byte</span>) <span class="number">65</span>);</span><br><span class="line">        b4.put((<span class="keyword">byte</span>) <span class="number">66</span>);</span><br><span class="line">        b4.put((<span class="keyword">byte</span>) <span class="number">67</span>);</span><br><span class="line"></span><br><span class="line">        b4.flip();</span><br><span class="line">        ByteBufferUtil.debugAll(b4); <span class="comment">//注意观察b4的limit 此时limit是3 是没有问题的</span></span><br><span class="line">        b4.flip();</span><br><span class="line">        ByteBufferUtil.debugAll(b4);<span class="comment">//第二次执行limit后 因为在上一次filp 后没有写入内容 所以此时b4的limit的值变成了0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//StandardCharsets构造的byteBuffer会自动为我们切换为读模式 不需要再手动的调用filp方法了</span></span><br><span class="line">        FileChannel fileChannel = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;netty-demo/data3.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>).getChannel();</span><br><span class="line"></span><br><span class="line">        fileChannel.write(<span class="keyword">new</span> ByteBuffer[]&#123;b1, b2, b3&#125;);</span><br><span class="line">        <span class="keyword">if</span>(fileChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">            fileChannel.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>byteBuffer综合运用示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestByteBufferExam</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * byteBuffer综合练习 需求如下</span></span><br><span class="line"><span class="comment">         * 网络上有多条数据发送给服务端 数据之间用\n进行分隔</span></span><br><span class="line"><span class="comment">         * 但是由于某种原因 在接收的时候 这些数据进行了重新组合 例如原始发送的3条数据为</span></span><br><span class="line"><span class="comment">         * Hello,world\n</span></span><br><span class="line"><span class="comment">         * I&#x27;m zhangsan\n</span></span><br><span class="line"><span class="comment">         * How are you?\n</span></span><br><span class="line"><span class="comment">         * 实际接收的时候 变成了两个byteBuffer 下面第一个buffer 其实就是网络中常见的黏包现象 两个传输的网络包黏在一起了 第二个buffer则是半包 一个完整的网络包被截断了</span></span><br><span class="line"><span class="comment">         * Hello,world\nI&#x27;m zhangsan\nHo</span></span><br><span class="line"><span class="comment">         * w are you?\n</span></span><br><span class="line"><span class="comment">         * 现在要你编写程序将程序恢复</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一步模拟网络编程中收到的两个byteBuffer</span></span><br><span class="line">        ByteBuffer source = ByteBuffer.allocate(<span class="number">32</span>);</span><br><span class="line">        source.put(<span class="string">&quot;Hello,world\nI&#x27;m zhangsan\nHo&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        split(source);</span><br><span class="line">        source.put(<span class="string">&quot;w are you?\n&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        split(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(ByteBuffer source)</span> </span>&#123;</span><br><span class="line">        source.flip();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; source.limit(); i++) &#123;</span><br><span class="line">            <span class="keyword">byte</span> b = source.get(i);</span><br><span class="line">            <span class="keyword">if</span>(b == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[i - source.position()];</span><br><span class="line">                source.get(bytes, <span class="number">0</span>, i - source.position());</span><br><span class="line">                source.get(); <span class="comment">//把\n读出来</span></span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(bytes, StandardCharsets.UTF_8));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调整为写入模式</span></span><br><span class="line">        source.compact();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>FileChannel文件编程</strong></p><p>FileChannel只能工作在阻塞模式下 它是不能配合Selector来使用的 此外也不能直接获取FileChannel 必须通过FileInputStream、FileOutputStream 或者RandomAccessFile来获取FileChannel 它们都有getChannel方法</p><ul><li>通过FileInputStream获取的channel只能读</li><li>通过FileOutputStream获取的channel只能写</li><li>通过RandomAccessFile是否能读/能写根据构造RandomAccessFile时的读写模式来决定的</li></ul><p>使用FileChannel后 channel必须关闭 不过调用了FileInputStream、FileOutputStream或者RandomAccessFile的close方法会间接的调用channel的close方法 注意在调用channel的write方法的时候 操作系统处于性能方面的考虑并不会直接将数据写入磁盘 而是先写入到缓存中 可以调用channel的force(true)方法将文件内容和元数据立即写入磁盘</p><ul><li><p><strong>FileChannel传输数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileChannelTransferTo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        FileChannel from = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;netty-demo/data.txt&quot;</span>).getChannel();</span><br><span class="line">        FileChannel to = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;netty-demo/data5.txt&quot;</span>).getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//FileChannel的transferTo方法 表示从from这个channel里传输数据到to这个channel里 传输数据的大小为from这个channel中包含的字节大小</span></span><br><span class="line">        <span class="comment">//其实也就是吧data.txt写到data5.txt中 方便而且效率比自己用FileInputStream和FileOutputStream要高 因为底层会使用操作系统的零拷贝进行优化</span></span><br><span class="line">        from.transferTo(<span class="number">0</span>, from.size(), to);</span><br><span class="line">        to.close();</span><br><span class="line">        <span class="keyword">if</span> (from != <span class="keyword">null</span>) &#123;</span><br><span class="line">            from.close();;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意transferTo方法传输文件是有上限的 一次最多传2个G 超过2个G 就不能这样用了</p></li><li><p><strong>FileChannel传输超过2G的文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileChannelTransferTo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        FileChannel from = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;netty-demo/data.txt&quot;</span>).getChannel();</span><br><span class="line">        FileChannel to = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;netty-demo/data5.txt&quot;</span>).getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//FileChannel的transferTo方法 表示从from这个channel里传输数据到to这个channel里 传输数据的大小为from这个channel中包含的字节大小</span></span><br><span class="line">        <span class="comment">//其实也就是吧data.txt写到data5.txt中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//remainSize 表示channel中剩余的(还没有传输的数据大小)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> remainSize = from.size(); remainSize &gt; <span class="number">0</span>;)&#123;</span><br><span class="line">            <span class="comment">//size 单次实际传输的数据大小</span></span><br><span class="line">            <span class="keyword">long</span> size = from.transferTo(from.size() - remainSize, remainSize, to);</span><br><span class="line">            <span class="comment">//剩余大小</span></span><br><span class="line">            remainSize -= size;</span><br><span class="line">            System.out.println(<span class="string">&quot;remainSize = &quot;</span> + remainSize);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        to.close();</span><br><span class="line">        <span class="keyword">if</span> (from != <span class="keyword">null</span>) &#123;</span><br><span class="line">            from.close();;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>Path</strong></p><p>Jdk7引入了Path和Paths类</p><p>Paths是工具类 用来获取Path实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPath</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Path source = Paths.get(<span class="string">&quot;1.txt&quot;</span>); <span class="comment">//相对路径 使用usr.dir 环境变量来定位 1.txt</span></span><br><span class="line">        Path source = Paths.get(<span class="string">&quot;d:\\1.txt&quot;</span>); <span class="comment">//绝对路径</span></span><br><span class="line">        Path source = Paths.get(<span class="string">&quot;d:/1.txt&quot;</span>); <span class="comment">//绝对路径</span></span><br><span class="line">        Path source = Paths.get(<span class="string">&quot;d:\\data&quot;</span>, <span class="string">&quot;projects&quot;</span>); <span class="comment">//绝对路径 代表d:\data\projects</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>WalkFileTree使用案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFilesWalkFileTree</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//walkFileTree 表示遍历文件夹 它有两个参数</span></span><br><span class="line">        <span class="comment">// start 表示 需要遍历的文件夹的路径</span></span><br><span class="line">        <span class="comment">// visitor 表示遍历到文件之后需要做的操作</span></span><br><span class="line">        Files.walkFileTree(Paths.get(<span class="string">&quot;/Users/xxx/code/test/netty-demo&quot;</span>), <span class="keyword">new</span> SimpleFileVisitor&lt;Path&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">preVisitDirectory</span><span class="params">(Path dir, BasicFileAttributes attrs)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//preVisitDirectory 进入文件夹前的操作</span></span><br><span class="line">                <span class="comment">//加入自己的逻辑 最后的返回值 super.preVisitDirectory(dir, attrs);不要去改动 否则会影响遍历的结果</span></span><br><span class="line">                System.out.println(<span class="string">&quot;进入文件夹:&quot;</span> + dir.toString());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.preVisitDirectory(dir, attrs);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//访问文件时的操作</span></span><br><span class="line">                <span class="comment">//加入自己的逻辑 最后的返回值 super.visitFile(file, attrs);不要去改动 否则会影响遍历的结果</span></span><br><span class="line">                System.out.println(<span class="string">&quot;file : &quot;</span> + file.getFileName());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.visitFile(file, attrs);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">visitFileFailed</span><span class="params">(Path file, IOException exc)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//访问文件失败的操作</span></span><br><span class="line">                System.out.println(<span class="string">&quot;访问文件失败:&quot;</span> + file.getFileName());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.visitFileFailed(file, exc);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">postVisitDirectory</span><span class="params">(Path dir, IOException exc)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//从文件夹出来以后的操作</span></span><br><span class="line">                System.out.println(<span class="string">&quot;退出文件夹:&quot;</span> + dir.toString());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.postVisitDirectory(dir, exc);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>利用WalkFileTree来删除多级目录</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFilesWalkFileTree</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//walkFileTree 表示遍历文件夹 它有两个参数</span></span><br><span class="line">        <span class="comment">// start 表示 需要遍历的文件夹的路径</span></span><br><span class="line">        <span class="comment">// visitor 表示遍历到文件之后需要做的操作</span></span><br><span class="line">        Files.walkFileTree(Paths.get(<span class="string">&quot;/Users/xx/code/test/netty-demo/target&quot;</span>), <span class="keyword">new</span> SimpleFileVisitor&lt;Path&gt;()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//访问文件时的操作</span></span><br><span class="line">                <span class="comment">//加入自己的逻辑 最后的返回值 super.visitFile(file, attrs);不要去改动 否则会影响遍历的结果</span></span><br><span class="line">                File f = file.toFile();</span><br><span class="line">                <span class="keyword">boolean</span> result = f.delete();</span><br><span class="line">                System.out.println(<span class="string">&quot;删除文件&quot;</span> + f.getAbsolutePath() + <span class="string">&quot; 结果:&quot;</span> + result);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.visitFile(file, attrs);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">postVisitDirectory</span><span class="params">(Path dir, IOException exc)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//从文件夹出来以后的操作</span></span><br><span class="line">                File f = dir.toFile();</span><br><span class="line">                <span class="keyword">boolean</span> result = f.delete();</span><br><span class="line">                System.out.println(<span class="string">&quot;删除目录&quot;</span> + f.getAbsolutePath() + <span class="string">&quot; 结果:&quot;</span> + result);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.postVisitDirectory(dir, exc);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>利用FileWalkTree拷贝多级目录</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileWalkTreeCopy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String source = <span class="string">&quot;/Users/xx/code/test/netty-demo/target&quot;</span>;</span><br><span class="line">        String target = <span class="string">&quot;/Users/xx/code/test/netty-demo/target2&quot;</span>;</span><br><span class="line">        <span class="comment">//遍历源文件夹</span></span><br><span class="line">        Files.walk(Paths.get(source)).forEach((path) -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String toPath = path.toString().replace(source, target);</span><br><span class="line">                <span class="keyword">if</span>(Files.isDirectory(path)) &#123;</span><br><span class="line">                    Files.createDirectory(Paths.get(toPath));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (Files.isRegularFile(path)) &#123;</span><br><span class="line">                    Files.copy(path, Paths.get(toPath));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;NIO-三大组件&quot;&gt;&lt;a href=&quot;#NIO-三大组件&quot; class=&quot;headerlink&quot; title=&quot;NIO 三大组件&quot;&gt;&lt;/a&gt;NIO 三大组件&lt;/h3&gt;&lt;p&gt;NIO 又叫非阻塞式IO(non-bloking io) 或者也叫New IO 它有三大组件</summary>
      
    
    
    
    <category term="Netty" scheme="http://example.com/categories/Netty/"/>
    
    
    <category term="Netty" scheme="http://example.com/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Transactional事务注解不生效的场景及原因</title>
    <link href="http://example.com/2022/08/10/FAQ-Transactional%E4%BA%8B%E5%8A%A1%E6%B3%A8%E8%A7%A3%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E5%9C%BA%E6%99%AF%E5%8F%8A%E5%8E%9F%E5%9B%A0/"/>
    <id>http://example.com/2022/08/10/FAQ-Transactional%E4%BA%8B%E5%8A%A1%E6%B3%A8%E8%A7%A3%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E5%9C%BA%E6%99%AF%E5%8F%8A%E5%8E%9F%E5%9B%A0/</id>
    <published>2022-08-10T01:33:45.562Z</published>
    <updated>2022-08-10T03:36:52.966Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-项目准备"><a href="#一-项目准备" class="headerlink" title="一 项目准备"></a>一 项目准备</h3><p>下面是 DB 数据和 DB 操作接口：</p><table><thead><tr><th>uid</th><th>uname</th><th>usex</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>女</td></tr><tr><td>2</td><td>李四</td><td>男</td></tr><tr><td>3</td><td>王五</td><td>男</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提供的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">// select * from user_test where uid = &quot;#&#123;uid&#125;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyUser <span class="title">selectUserById</span><span class="params">(Integer uid)</span></span>;</span><br><span class="line">    <span class="comment">// update user_test set uname =#&#123;uname&#125;,usex = #&#123;usex&#125; where uid = #&#123;uid&#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(MyUser user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基础测试代码，testSuccess() 是事务生效的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        MyUser user = <span class="keyword">new</span> MyUser();</span><br><span class="line">        user.setUid(id);</span><br><span class="line">        user.setUname(<span class="string">&quot;张三-testing&quot;</span>);</span><br><span class="line">        user.setUsex(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">        userDao.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyUser <span class="title">query</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        MyUser user = userDao.selectUserById(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正常情况</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSuccess</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Integer id = <span class="number">1</span>;</span><br><span class="line">        MyUser user = query(id);</span><br><span class="line">        System.out.println(<span class="string">&quot;原记录:&quot;</span> + user);</span><br><span class="line">        update(id);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;事务生效&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-事务不生效的几种-Case"><a href="#二-事务不生效的几种-Case" class="headerlink" title="二 事务不生效的几种 Case"></a>二 事务不生效的几种 Case</h3><p>主要有4种 </p><ul><li><strong>类内部访问</strong> A 类的 a1 方法没有标注 @Transactional，a2 方法标注 @Transactional，在 a1 里面调用 a2</li><li><strong>私有方法</strong> 将 @Transactional 注解标注在非 public 方法上</li><li><strong>异常不匹配</strong> @Transactional 未设置 rollbackFor 属性，方法返回 Exception 等异常</li><li><strong>多线程</strong> 主线程和子线程的调用，线程抛出异常</li></ul><h4 id="2-1-类内部访问"><a href="#2-1-类内部访问" class="headerlink" title="2.1 类内部访问"></a>2.1 类内部访问</h4><p>我们在类 UserController 中新增一个方法 testInteralCall()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInteralCall</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    testSuccess();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;事务不生效：类内部访问&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 testInteralCall() 没有标注 @Transactional，我们再看一下测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    UserController uc = (UserController) applicationContext.getBean(<span class="string">&quot;userController&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        uc.testSuccess();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        MyUser user =  uc.query(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改后的记录:&quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// 原记录:MyUser(uid=1, uname=张三, usex=女)</span></span><br><span class="line"><span class="comment">// 修改后的记录:MyUser(uid=1, uname=张三-testing, usex=女)</span></span><br></pre></td></tr></table></figure><p>从上面的输出可以看到，事务并没有回滚，这个是什么原因呢？</p><p>因为 @Transactional 的工作机制是基于 AOP 实现，AOP 是使用动态代理实现的，如果通过代理直接调用 testSuccess()，通过 AOP 会前后进行增强，增强的逻辑其实就是在 testSuccess() 的前后分别加上开启、提交事务的逻辑，后面的源码会进行剖析。</p><p>现在是通过 testInteralCall() 去调用 testSuccess()，testSuccess() 前后不会进行任何增强操作，也就是<strong>类内部调用，不会通过代理方式访问。</strong></p><p>如果还是不太清楚，推荐再看看这篇文章，里面有完整示例，非常完美诠释“类内部访问”不能前后增强的原因：<a href="https://blog.csdn.net/Ahuuua/article/details/123877835">https://blog.csdn.net/Ahuuua/article/details/123877835</a></p><h4 id="2-2-私有方法"><a href="#2-2-私有方法" class="headerlink" title="2.2 私有方法"></a>2.2 私有方法</h4><p>在私有方法上，添加 @Transactional 注解也不会生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testPirvateMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Integer id = <span class="number">1</span>;</span><br><span class="line">    MyUser user = query(id);</span><br><span class="line">    System.out.println(<span class="string">&quot;原记录:&quot;</span> + user);</span><br><span class="line">    update(id);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;测试事务生效&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接使用时，下面这种场景不太容易出现，因为 IDEA 会有提醒，文案为: Methods annotated with ‘@Transactional’ must be overridable，<strong>至于深层次的原理，见源码剖析</strong></p><h4 id="2-3-异常不匹配"><a href="#2-3-异常不匹配" class="headerlink" title="2.3 异常不匹配"></a>2.3 异常不匹配</h4><p>这里的 @Transactional 没有设置 rollbackFor = Exception.class 属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExceptionNotMatch</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Integer id = <span class="number">1</span>;</span><br><span class="line">    MyUser user = query(id);</span><br><span class="line">    System.out.println(<span class="string">&quot;原记录:&quot;</span> + user);</span><br><span class="line">    update(id);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;事务不生效：异常不匹配&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// 原记录:User[uid=1,uname=张三,usex=女]</span></span><br><span class="line"><span class="comment">// 修改后的记录:User[uid=1,uname=张三-test,usex=女]</span></span><br></pre></td></tr></table></figure><p>@Transactional 注解默认处理运行时异常，即只有抛出运行时异常时，才会触发事务回滚，否则并不会回滚，<strong>至于深层次的原理，见源码剖析</strong></p><h4 id="2-4-多线程"><a href="#2-4-多线程" class="headerlink" title="2.4 多线程"></a>2.4 多线程</h4><p>下面给出两个不同的姿势，一个是子线程抛异常，主线程 ok；一个是子线程 ok，主线程抛异常</p><ul><li><p><strong>父线程抛出异常</strong></p><p>父线程抛出异常，子线程不抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSuccess</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Integer id = <span class="number">1</span>;</span><br><span class="line">    MyUser user = query(id);</span><br><span class="line">    System.out.println(<span class="string">&quot;原记录:&quot;</span> + user);</span><br><span class="line">    update(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMultThread</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@SneakyThrows</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            testSuccess();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;测试事务不生效&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父线程抛出线程，事务回滚，因为子线程是独立存在，和父线程不在同一个事务中，所以子线程的修改并不会被回滚</p></li><li><p><strong>子线程抛出异常</strong></p><p>父线程不抛出异常，子线程抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSuccess</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Integer id = <span class="number">1</span>;</span><br><span class="line">    MyUser user = query(id);</span><br><span class="line">    System.out.println(<span class="string">&quot;原记录:&quot;</span> + user);</span><br><span class="line">    update(id);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;测试事务不生效&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMultThread</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@SneakyThrows</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            testSuccess();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于子线程的异常不会被外部的线程捕获，所以父线程不抛异常，事务回滚没有生效</p></li></ul><h3 id="三-源码解析"><a href="#三-源码解析" class="headerlink" title="三 源码解析"></a>三 源码解析</h3><p>下面我们从源码的角度，对 @Transactional 的执行机制和事务不生效的原因进行解读</p><p><strong>@Transactional 执行机制</strong></p><p>我们只看最核心的逻辑，代码中的 interceptorOrInterceptionAdvice 就是 TransactionInterceptor 的实例，入参是 this 对象红色方框有一段注释，大致翻译为 “它是一个拦截器，所以我们只需调用即可：在构造此对象之前，将静态地计算切入点”</p><p><img src="/images/0128.png" alt="图片"></p><p>this 是 ReflectiveMethodInvocation 对象，成员对象包含 UserController 类、testSuccess() 方法、入参和代理对象等</p><p><img src="/images/0129.png" alt="图片"></p><p>进入 invoke() 方法后</p><p><img src="/images/0130.png" alt="图片"></p><p><strong>前方高能！！！这里就是事务的核心逻辑，包括判断事务是否开启、目标方法执行、事务回滚、事务提交</strong></p><p><img src="/images/0131.png" alt="图片"></p><ul><li><p><strong>private 导致事务不生效原因</strong></p><p>在上面这幅图中，第一个红框区域调用了方法 getTransactionAttribute()，主要是为了获取 txAttr 变量，它是用于读取 @Transactional 的配置，如果这个 txAttr = null，后面就不会走事务逻辑，我们看一下这个变量的含义</p><p><img src="/images/0132.png" alt="图片"></p><p>我们直接进入 getTransactionAttribute()，重点关注获取事务配置的方法</p><p><img src="/images/0133.png" alt="图片"></p><p><strong>前方高能！！！这里就是 private 导致事务不生效的原因所在</strong>，allowPublicMethodsOnly() 一直返回 false，所以重点只关注 isPublic() 方法。</p><p><img src="/images/0134.png" alt="图片"></p><p>下面通过位与计算，判断是否为 Public，对应的几类修饰符如下</p><ul><li>PUBLIC: 1</li><li>PRIVATE: 2</li><li>PROTECTED: 4</li></ul><p><img src="/images/0135.png" alt="图片"></p><ul><li><p><strong>异常不匹配原因</strong></p><p>我们继续回到事务的核心逻辑，因为主方法抛出 Exception() 异常，进入事务回滚的逻辑<img src="/images/0136.png" alt="图片"></p><p>进入 rollbackOn() 方法，判断该异常是否能进行回滚，这个需要判断主方法抛出的 Exception() 异常，是否在 @Transactional 的配置中</p><p><img src="/images/0137.png" alt="图片"></p><p>我们进入 getDepth() 看一下异常规则匹配逻辑，因为我们对 @Transactional 配置了 rollbackFor = Exception.class，所以能匹配成功</p><p><img src="/images/0138.png" alt="图片"></p><p>示例中的 winner 不为 null，所以会跳过下面的环节。但是当 winner = null 时，也就是没有设置 rollbackFor 属性时，会走默认的异常捕获方式</p><p><img src="/images/0139.png" alt="图片"></p><p><strong>前方高能！！！这里就是异常不匹配原因的原因所在</strong>，我们看一下默认的异常捕获方式</p><p><img src="/images/0140.png" alt="图片"></p><p>从这里我们可以看出spring事务默认只会对RuntimeException 或 Error 进行回滚</p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-项目准备&quot;&gt;&lt;a href=&quot;#一-项目准备&quot; class=&quot;headerlink&quot; title=&quot;一 项目准备&quot;&gt;&lt;/a&gt;一 项目准备&lt;/h3&gt;&lt;p&gt;下面是 DB 数据和 DB 操作接口：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;uid&lt;/</summary>
      
    
    
    
    <category term="FAQ" scheme="http://example.com/categories/FAQ/"/>
    
    
    <category term="FAQ" scheme="http://example.com/tags/FAQ/"/>
    
  </entry>
  
  <entry>
    <title>nacos配置中心覆盖本地配置导致命令行参数不生效</title>
    <link href="http://example.com/2022/08/04/FAQ-nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E8%A6%86%E7%9B%96%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AE%E5%AF%BC%E8%87%B4%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E4%B8%8D%E7%94%9F%E6%95%88/"/>
    <id>http://example.com/2022/08/04/FAQ-nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E8%A6%86%E7%9B%96%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AE%E5%AF%BC%E8%87%B4%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E4%B8%8D%E7%94%9F%E6%95%88/</id>
    <published>2022-08-04T02:57:38.186Z</published>
    <updated>2022-08-04T03:17:39.400Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>服务所使用了nacos做配置中心在nacos中配置了server.port=1000 在项目启动时通过java -Dserver.por=1001 结果发现项目启动后端口仍然是1000 也就是说 <strong>我们通过-d的形式传递的命令行参数没有覆盖配置中心的配置</strong></p><p><strong>结论</strong></p><p>一般来说是都是配置中心的的propertySource 优先级&gt;命令行的PropertySource&gt;本地配置文件的PropertySource 其中命令行配置和本地配置文件配置统称<strong>本地配置</strong> </p><p>nacos 配置下如无特殊配置, 本地配置不会生效。若要本地配置生效，需要在本地的配置文件中 中作如下配置，这三个配置是矛盾的，根据需要选择(三选一)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">allow-override:</span> <span class="literal">true</span>     <span class="string">//</span> <span class="string">允许nacos被本地文件覆盖</span></span><br><span class="line">      <span class="attr">override-none:</span> <span class="literal">true</span>     <span class="string">//</span> <span class="string">nacos不覆盖任何本地文件</span></span><br><span class="line">      <span class="attr">override-system-properties:</span> <span class="literal">true</span>   <span class="string">//</span> <span class="string">nacos</span> <span class="string">覆盖系统属性。注意本地配置文件不是系统属性</span></span><br></pre></td></tr></table></figure><p><strong>本地配置优先级</strong></p><ul><li>1.命令行参数</li><li>2.来自java:comp/env的JNDI属性</li><li>3.Java系统属性（System.getProperties()）</li><li>4.操作系统环境变量</li><li>5.RandomValuePropertySource配置的random.*属性值</li><li>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</li><li>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</li><li>8.–spring.config.location=C:/application.properties（它在这里）</li><li>9.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</li><li>10.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</li><li>11.@Configuration注解类上的@PropertySource</li><li>12.通过SpringApplication.setDefaultProperties指定的默认属性</li></ul><p>bootstrap 优先级高于配置文件，但是项目内部配置文件高于 bootstrap，导入文件优先级高于默认配置</p><p><strong>建议</strong></p><p>无论是使用何种配置中心 如果需要对各个节点使用不同的配置 就不要在配置中心中配置该项配置了 全部用命令行参数的形式来控制</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;服务所使用了nacos做配置中心在nacos中配置了server.port=1000 在项目启动时通过java -Dserv</summary>
      
    
    
    
    <category term="FAQ" scheme="http://example.com/categories/FAQ/"/>
    
    
    <category term="FAQ" scheme="http://example.com/tags/FAQ/"/>
    
  </entry>
  
  <entry>
    <title>http响应状态码报400可能的原因</title>
    <link href="http://example.com/2022/07/29/FAQ-http%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81400%E5%B8%B8%E8%A7%81%E5%8E%9F%E5%9B%A0/"/>
    <id>http://example.com/2022/07/29/FAQ-http%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81400%E5%B8%B8%E8%A7%81%E5%8E%9F%E5%9B%A0/</id>
    <published>2022-07-29T07:01:07.807Z</published>
    <updated>2022-07-29T16:15:44.019Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><strong>最常见的可能就是请求入参与实际的入参参数不一致</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(path = &quot;/queryUserInfo&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryUserInfo</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name, <span class="meta">@RequestParam(&quot;name2&quot;)</span>String name2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  Thread.sleep(<span class="number">15000</span>);</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中需要2个参数分别为name 和 name2 实际请求如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##下面的两种请求由于缺少了name2这个参数 都会报400</span></span><br><span class="line">http://localhost:8787/queryUserInfo?name=张三</span><br><span class="line">http://localhost:8787/queryUserInfo?name=张三&amp;name3=李四</span><br></pre></td></tr></table></figure></li><li><p><strong>请求头中缺失Host</strong></p><p>Host头一般是nginx或者浏览器在请求的时候会默认带上 但是有些时候由于nginx配置问题 会导致nginx转发到服务端的时候Host头丢失 如果是这种情况也会导致响应400 如下图</p><p><img src="/images/0127.png" alt="image-20220729154943304"></p><p><strong>附录 nginx配置带上host请求头</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"> </span><br><span class="line">        proxy_set_header Host <span class="variable">$http_host</span>; <span class="comment">#这行配置就是设置Host请求头</span></span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line"> </span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://gatewayServ/;</span><br><span class="line">          <span class="comment">#  proxy_pass http://localhost:9012/;</span></span><br><span class="line">            proxy_redirect default;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>以上就是最常见的两种可能导致http报400的原因</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;最常见的可能就是请求入参与实际的入参参数不一致&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    <category term="FAQ" scheme="http://example.com/categories/FAQ/"/>
    
    
    <category term="FAQ" scheme="http://example.com/tags/FAQ/"/>
    
  </entry>
  
  <entry>
    <title>nginx负载均衡</title>
    <link href="http://example.com/2022/07/25/FAQ-nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://example.com/2022/07/25/FAQ-nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</id>
    <published>2022-07-25T08:19:01.684Z</published>
    <updated>2022-07-25T08:48:42.424Z</updated>
    
    <content type="html"><![CDATA[<h3 id="nginx负载均衡"><a href="#nginx负载均衡" class="headerlink" title="nginx负载均衡"></a>nginx负载均衡</h3><p>nginx实现负载均衡是通过upstream模块来实现负载均衡的 upstream模块可定义一个新的上下文，它包含了一组upstream服务器，<br>这些服务器可能被赋予了不同的权重、不同的类型甚至可以基于维护等原因被标记为down</p><p><strong>upstream模块常用的指令有</strong></p><ul><li><strong>负载均衡算法</strong> upstream模块的负载均衡算法主要有三种，轮调(round-robin)、ip哈希(ip_hash)和 最少连接(least_conn)三种。<ul><li><strong>ip_hash</strong> 基于客户端IP地址完成请求的分发，它可以保证来自于同一个客户端的请求始终被转发至同一个upstream服务器</li><li><strong>round-robin</strong> 基于权重的轮询。不需要明确注明，在各个节点中设置权重weight即可</li><li><strong>least_conn</strong> 最少连接调度算法</li></ul></li></ul><p>定义一个upstream服务器的地址，还可包括一系列可选参数 <strong>weight</strong>、<strong>max_fails</strong>、<strong>fail_timeout</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">某个server连接失败了max_fails次，则nginx会认为该server不工作了。</span><br><span class="line">同时，在接下来的 fail_timeout 时间内，nginx不再将请求分发给失效的server。</span><br><span class="line"></span><br><span class="line">fail_timeout默认为10s，max_fails默认为1。就是说，只要某个server只要失败过一次，就会计数，</span><br><span class="line">当台服务器重新上线时，检查它的失败次数，如果达到一次，就在10s内先不要发送请求给它。</span><br><span class="line"></span><br><span class="line">backup：用于fallback的目的，所有服务均故障时才启动此服务器，可以用它来设置一台  Sorry Server ；</span><br><span class="line">down：手动标记其不再处理任何请求；</span><br></pre></td></tr></table></figure><p><strong>upstream配置示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">upstream mywebs &#123;</span><br><span class="line">ip_hash; <span class="comment">#表示负载均衡使用ip_hash算法</span></span><br><span class="line">server 192.168.10.5:80  weight=1  max_fails=1 fail_timeout=3s; <span class="comment">#mywebs的第一个负载均衡节点</span></span><br><span class="line">server 192.168.10.6:80  weight=1  max_fails=1 fail_timeout=3s; <span class="comment">#mywebs的第二个负载均衡节点</span></span><br><span class="line">server 192.168.10.14:8080   backup; <span class="comment">#所有服务均故障时才启动此服务器</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen80;</span><br><span class="line">  server_name  www.baby.com;</span><br><span class="line">  access_log  /usr/<span class="built_in">local</span>/nginx/logs/new.com.access.log  main;</span><br><span class="line"></span><br><span class="line">location = /status &#123;</span><br><span class="line">stub_status on;</span><br><span class="line">allow 192.168.10.1;</span><br><span class="line">deny all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  location   /  &#123;</span><br><span class="line">proxy_pass http://mywebs; <span class="comment">#启用mywebs负载均衡池 http://www.baby.com的请求会被分发到mywebs中的负载均衡节点</span></span><br><span class="line">proxy_set_header X-Real-IP  <span class="variable">$remote_addr</span>;</span><br><span class="line">proxy_redirect off;</span><br><span class="line"><span class="comment">#proxy_set_header Host  $host;</span></span><br><span class="line"><span class="comment">#proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;</span></span><br><span class="line">proxy_connect_timeout 30;</span><br><span class="line">proxy_send_timeout 15;</span><br><span class="line">proxy_read_timeout 15;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;nginx负载均衡&quot;&gt;&lt;a href=&quot;#nginx负载均衡&quot; class=&quot;headerlink&quot; title=&quot;nginx负载均衡&quot;&gt;&lt;/a&gt;nginx负载均衡&lt;/h3&gt;&lt;p&gt;nginx实现负载均衡是通过upstream模块来实现负载均衡的 upstream模</summary>
      
    
    
    
    <category term="FAQ" scheme="http://example.com/categories/FAQ/"/>
    
    
    <category term="FAQ" scheme="http://example.com/tags/FAQ/"/>
    
  </entry>
  
  <entry>
    <title>Spring项目请求入参中List类型属性的元素过多时出现IndexOutOfBoundsException异常</title>
    <link href="http://example.com/2022/07/22/FAQ-Spring%E9%A1%B9%E7%9B%AE%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E4%B8%ADList%E7%9A%84%E5%85%83%E7%B4%A0%E8%BF%87%E5%A4%9A%E5%AF%BC%E8%87%B4IndexOutOfBoundsException%E5%BC%82%E5%B8%B8/"/>
    <id>http://example.com/2022/07/22/FAQ-Spring%E9%A1%B9%E7%9B%AE%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E4%B8%ADList%E7%9A%84%E5%85%83%E7%B4%A0%E8%BF%87%E5%A4%9A%E5%AF%BC%E8%87%B4IndexOutOfBoundsException%E5%BC%82%E5%B8%B8/</id>
    <published>2022-07-22T06:41:24.467Z</published>
    <updated>2022-07-22T09:38:35.483Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题</strong> </p><p>Spring工程采用form-data或x-www-form-urlencoded的方式提交数据 当提交的参数中数组或者List数量过大时抛出IndexOutOfBoundsException 异常信息如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.InvalidPropertyException: Invalid property <span class="string">&#x27;divisionList[256]&#x27;</span> of bean class [com.gome.bean.Presell]: Index of out of bounds <span class="keyword">in</span> property path <span class="string">&#x27;divisionList[256]&#x27;</span>; nested exception is java.lang.IndexOutOfBoundsException: Index: 256, Size: 256</span><br><span class="line">    org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:811)</span><br><span class="line">    org.springframework.beans.BeanWrapperImpl.getNestedBeanWrapper(BeanWrapperImpl.java:554)</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><p>在对应的Controller层重写这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 由于Spring在接受前台传入的List时，就会出现256的IndexOutOfBoundsException异常</span></span><br><span class="line"><span class="comment">  * 设置setAutoGrowCollectionLimit为1024</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> binder</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@see</span> [类、类#方法、类#成员]</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@InitBinder</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initListBinder</span><span class="params">(WebDataBinder binder)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 设置需要包裹的元素个数，默认为256</span></span><br><span class="line">  binder.setAutoGrowCollectionLimit(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实如果Content-Type类型不是formdata而是json则不会出现类似的问题</p><p><strong>原因</strong></p><p>首先根据异常栈查看BeanWrapperImpl的getPropertyValue方法 这个方法在其父类AbstractNestablePropertyAccessor中 其源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getPropertyValue</span><span class="params">(AbstractNestablePropertyAccessor.PropertyTokenHolder tokens)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">  String propertyName = tokens.canonicalName;</span><br><span class="line">  String actualName = tokens.actualName;</span><br><span class="line">  AbstractNestablePropertyAccessor.PropertyHandler ph = <span class="keyword">this</span>.getLocalPropertyHandler(actualName);</span><br><span class="line">  <span class="keyword">if</span> (ph != <span class="keyword">null</span> &amp;&amp; ph.isReadable()) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Object value = ph.getValue();</span><br><span class="line">      <span class="keyword">if</span> (tokens.keys != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!<span class="keyword">this</span>.isAutoGrowNestedPaths()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullValueInNestedPathException(<span class="keyword">this</span>.getRootClass(), <span class="keyword">this</span>.nestedPath + propertyName, <span class="string">&quot;Cannot access indexed value of property referenced in indexed property path &#x27;&quot;</span> + propertyName + <span class="string">&quot;&#x27;: returned null&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          value = <span class="keyword">this</span>.setDefaultValue(<span class="keyword">new</span> AbstractNestablePropertyAccessor.PropertyTokenHolder(tokens.actualName));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StringBuilder indexedPropertyName = <span class="keyword">new</span> StringBuilder(tokens.actualName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tokens.keys.length; ++i) &#123;</span><br><span class="line">          String key = tokens.keys[i];</span><br><span class="line">          <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullValueInNestedPathException(<span class="keyword">this</span>.getRootClass(), <span class="keyword">this</span>.nestedPath + propertyName, <span class="string">&quot;Cannot access indexed value of property referenced in indexed property path &#x27;&quot;</span> + propertyName + <span class="string">&quot;&#x27;: returned null&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">int</span> index;</span><br><span class="line">          <span class="keyword">if</span> (value.getClass().isArray()) &#123;</span><br><span class="line">            index = Integer.parseInt(key);</span><br><span class="line">            value = <span class="keyword">this</span>.growArrayIfNecessary(value, index, indexedPropertyName.toString());</span><br><span class="line">            value = Array.get(value, index);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> List) &#123;</span><br><span class="line">            index = Integer.parseInt(key);</span><br><span class="line">            List&lt;Object&gt; list = (List)value;</span><br><span class="line">            <span class="comment">//这个方法是给list添加元素 并且负责list扩容的</span></span><br><span class="line">            <span class="keyword">this</span>.growCollectionIfNecessary(list, index, indexedPropertyName.toString(), ph, i + <span class="number">1</span>);</span><br><span class="line">            value = list.get(index);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Set) &#123;</span><br><span class="line">            Set&lt;Object&gt; set = (Set)value;</span><br><span class="line">            <span class="keyword">int</span> index = Integer.parseInt(key);</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= set.size()) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> InvalidPropertyException(<span class="keyword">this</span>.getRootClass(), <span class="keyword">this</span>.nestedPath + propertyName, <span class="string">&quot;Cannot get element with index &quot;</span> + index + <span class="string">&quot; from Set of size &quot;</span> + set.size() + <span class="string">&quot;, accessed using property path &#x27;&quot;</span> + propertyName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Iterator&lt;Object&gt; it = set.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; it.hasNext(); ++j) &#123;</span><br><span class="line">              Object elem = it.next();</span><br><span class="line">              <span class="keyword">if</span> (j == index) &#123;</span><br><span class="line">                value = elem;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(value <span class="keyword">instanceof</span> Map)) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> InvalidPropertyException(<span class="keyword">this</span>.getRootClass(), <span class="keyword">this</span>.nestedPath + propertyName, <span class="string">&quot;Property referenced in indexed property path &#x27;&quot;</span> + propertyName + <span class="string">&quot;&#x27; is neither an array nor a List nor a Set nor a Map; returned value was [&quot;</span> + value + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Map&lt;Object, Object&gt; map = (Map)value;</span><br><span class="line">            Class&lt;?&gt; mapKeyType = ph.getResolvableType().getNested(i + <span class="number">1</span>).asMap().resolveGeneric(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>&#125;);</span><br><span class="line">            TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(mapKeyType);</span><br><span class="line">            Object convertedMapKey = <span class="keyword">this</span>.convertIfNecessary((String)<span class="keyword">null</span>, (Object)<span class="keyword">null</span>, key, mapKeyType, typeDescriptor);</span><br><span class="line">            value = map.get(convertedMapKey);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          indexedPropertyName.append(<span class="string">&quot;[&quot;</span>).append(key).append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException var14) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InvalidPropertyException(<span class="keyword">this</span>.getRootClass(), <span class="keyword">this</span>.nestedPath + propertyName, <span class="string">&quot;Index of out of bounds in property path &#x27;&quot;</span> + propertyName + <span class="string">&quot;&#x27;&quot;</span>, var14);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (TypeMismatchException | NumberFormatException var15) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InvalidPropertyException(<span class="keyword">this</span>.getRootClass(), <span class="keyword">this</span>.nestedPath + propertyName, <span class="string">&quot;Invalid index in property path &#x27;&quot;</span> + propertyName + <span class="string">&quot;&#x27;&quot;</span>, var15);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException var16) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InvalidPropertyException(<span class="keyword">this</span>.getRootClass(), <span class="keyword">this</span>.nestedPath + propertyName, <span class="string">&quot;Getter for property &#x27;&quot;</span> + actualName + <span class="string">&quot;&#x27; threw exception&quot;</span>, var16);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var17) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InvalidPropertyException(<span class="keyword">this</span>.getRootClass(), <span class="keyword">this</span>.nestedPath + propertyName, <span class="string">&quot;Illegal attempt to get property &#x27;&quot;</span> + actualName + <span class="string">&quot;&#x27; threw exception&quot;</span>, var17);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NotReadablePropertyException(<span class="keyword">this</span>.getRootClass(), <span class="keyword">this</span>.nestedPath + propertyName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要关注上面源码中的 this.growCollectionIfNecessary(list, index, indexedPropertyName.toString(), ph, i + 1); 这个方法控制扩容的 之所以会报IndexOutOfBoundsException就是因为当list的元素个数超过256以后 list不会扩容导致的 下面是growCollectionIfNecessary的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">growCollectionIfNecessary</span><span class="params">(Collection&lt;Object&gt; collection, <span class="keyword">int</span> index, String name, AbstractNestablePropertyAccessor.PropertyHandler ph, <span class="keyword">int</span> nestingLevel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isAutoGrowNestedPaths()) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = collection.size();</span><br><span class="line">            <span class="comment">//关注这个autoGrowCollectionLimit这个属性就是限制传参的list个数大小的</span></span><br><span class="line">            <span class="keyword">if</span> (index &gt;= size &amp;&amp; index &lt; <span class="keyword">this</span>.autoGrowCollectionLimit) &#123;</span><br><span class="line">                Class&lt;?&gt; elementType = ph.getResolvableType().getNested(nestingLevel).asCollection().resolveGeneric(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">if</span> (elementType != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i = collection.size(); i &lt; index + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">                        collection.add(<span class="keyword">this</span>.newValue(elementType, (TypeDescriptor)<span class="keyword">null</span>, name));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由于autoGrowCollectionLimit是AbstractNestablePropertyAccessor类的成员属性 这个属性在springMVC解析请求变量的时候进行赋值在通过DispatcherServlet一些列操作后 会在ModelAttributeMethodProcessor类的resolveArgument方法开始进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer, NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      Assert.state(mavContainer != <span class="keyword">null</span>, <span class="string">&quot;ModelAttributeMethodProcessor requires ModelAndViewContainer&quot;</span>);</span><br><span class="line">      Assert.state(binderFactory != <span class="keyword">null</span>, <span class="string">&quot;ModelAttributeMethodProcessor requires WebDataBinderFactory&quot;</span>);</span><br><span class="line">      String name = ModelFactory.getNameForParameter(parameter);</span><br><span class="line">      ModelAttribute ann = (ModelAttribute)parameter.getParameterAnnotation(ModelAttribute.class);</span><br><span class="line">      <span class="keyword">if</span> (ann != <span class="keyword">null</span>) &#123;</span><br><span class="line">          mavContainer.setBinding(name, ann.binding());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Object attribute = <span class="keyword">null</span>;</span><br><span class="line">      BindingResult bindingResult = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (mavContainer.containsAttribute(name)) &#123;</span><br><span class="line">          attribute = mavContainer.getModel().get(name);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              attribute = <span class="keyword">this</span>.createAttribute(name, parameter, binderFactory, webRequest);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (BindException var10) &#123;</span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">this</span>.isBindExceptionRequired(parameter)) &#123;</span><br><span class="line">                  <span class="keyword">throw</span> var10;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (parameter.getParameterType() == Optional.class) &#123;</span><br><span class="line">                  attribute = Optional.empty();</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              bindingResult = var10.getBindingResult();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (bindingResult == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">//关注这个方法 会去创建WebDataBinder</span></span><br><span class="line">          WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);</span><br><span class="line">          <span class="keyword">if</span> (binder.getTarget() != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (!mavContainer.isBindingDisabled(name)) &#123;</span><br><span class="line">                  <span class="keyword">this</span>.bindRequestParameters(binder, webRequest);</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">this</span>.validateIfApplicable(binder, parameter);</span><br><span class="line">              <span class="keyword">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; <span class="keyword">this</span>.isBindExceptionRequired(binder, parameter)) &#123;</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> BindException(binder.getBindingResult());</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (!parameter.getParameterType().isInstance(attribute)) &#123;</span><br><span class="line">              attribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          bindingResult = binder.getBindingResult();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Map&lt;String, Object&gt; bindingResultModel = bindingResult.getModel();</span><br><span class="line">      mavContainer.removeAttributes(bindingResultModel);</span><br><span class="line">      mavContainer.addAllAttributes(bindingResultModel);</span><br><span class="line">      <span class="keyword">return</span> attribute;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>下面是DefaultDataBinderFactory类createBinder方法的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> WebDataBinder <span class="title">createBinder</span><span class="params">(NativeWebRequest webRequest, <span class="meta">@Nullable</span> Object target, String objectName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//先看createBinderInstance方法 这里会进入DataBinder类 构造DataBinder </span></span><br><span class="line">        WebDataBinder dataBinder = <span class="keyword">this</span>.createBinderInstance(target, objectName, webRequest);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.initializer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.initializer.initBinder(dataBinder, webRequest);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//然后查看initBinder方法</span></span><br><span class="line">        <span class="keyword">this</span>.initBinder(dataBinder, webRequest);</span><br><span class="line">        <span class="keyword">return</span> dataBinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> WebDataBinder <span class="title">createBinderInstance</span><span class="params">(<span class="meta">@Nullable</span> Object target, String objectName, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//关注这个构造方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebRequestDataBinder(target, objectName);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>下面是WebRequestDataBinder类的父类DataBinder的构造方法 可以看到这个类也有一个autoGrowCollectionLimit且属性值为256</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DataBinder</span><span class="params">(<span class="meta">@Nullable</span> Object target, String objectName)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.ignoreUnknownFields = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">this</span>.ignoreInvalidFields = <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">this</span>.autoGrowNestedPaths = <span class="keyword">true</span>;</span><br><span class="line">       <span class="comment">//可以看到autoGrowCollectionLimit属性值是</span></span><br><span class="line">       <span class="keyword">this</span>.autoGrowCollectionLimit = <span class="number">256</span>;</span><br><span class="line">       <span class="keyword">this</span>.bindingErrorProcessor = <span class="keyword">new</span> DefaultBindingErrorProcessor();</span><br><span class="line">       <span class="keyword">this</span>.validators = <span class="keyword">new</span> ArrayList();</span><br><span class="line">       <span class="keyword">this</span>.target = ObjectUtils.unwrapOptional(target);</span><br><span class="line">       <span class="keyword">this</span>.objectName = objectName;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>再回到DefaultDataBinderFactory类的createBinder中 关注initBinder方法 initBinder方法的实现在InitBinderDataBinderFactory类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder dataBinder, NativeWebRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Iterator var3 = <span class="keyword">this</span>.binderMethods.iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(var3.hasNext()) &#123;</span><br><span class="line">        InvocableHandlerMethod binderMethod = (InvocableHandlerMethod)var3.next();</span><br><span class="line">        <span class="comment">//关注isBinderMethodApplicable方法 这个方法会读取InitBinder注解 如果方法包含了这个注解会进行下一步的处理</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isBinderMethodApplicable(binderMethod, dataBinder)) &#123;</span><br><span class="line">            <span class="comment">//再看这个方法 </span></span><br><span class="line">            Object returnValue = binderMethod.invokeForRequest(request, (ModelAndViewContainer)<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;dataBinder&#125;);</span><br><span class="line">            <span class="keyword">if</span> (returnValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;@InitBinder methods must not return a value (should be void): &quot;</span> + binderMethod);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>initBinder之后 DataBinder已经创建完成 再回到ModelAttributeMethodProcessor类的resolveArgument方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer, NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Assert.state(mavContainer != <span class="keyword">null</span>, <span class="string">&quot;ModelAttributeMethodProcessor requires ModelAndViewContainer&quot;</span>);</span><br><span class="line">        Assert.state(binderFactory != <span class="keyword">null</span>, <span class="string">&quot;ModelAttributeMethodProcessor requires WebDataBinderFactory&quot;</span>);</span><br><span class="line">        String name = ModelFactory.getNameForParameter(parameter);</span><br><span class="line">        ModelAttribute ann = (ModelAttribute)parameter.getParameterAnnotation(ModelAttribute.class);</span><br><span class="line">        <span class="keyword">if</span> (ann != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mavContainer.setBinding(name, ann.binding());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object attribute = <span class="keyword">null</span>;</span><br><span class="line">        BindingResult bindingResult = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (mavContainer.containsAttribute(name)) &#123;</span><br><span class="line">            attribute = mavContainer.getModel().get(name);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                attribute = <span class="keyword">this</span>.createAttribute(name, parameter, binderFactory, webRequest);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (BindException var10) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.isBindExceptionRequired(parameter)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> var10;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (parameter.getParameterType() == Optional.class) &#123;</span><br><span class="line">                    attribute = Optional.empty();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                bindingResult = var10.getBindingResult();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bindingResult == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//createBinder 流程已经完成了</span></span><br><span class="line">            WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);</span><br><span class="line">            <span class="keyword">if</span> (binder.getTarget() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!mavContainer.isBindingDisabled(name)) &#123;</span><br><span class="line">                    <span class="comment">//再看这个方法 这个方法最后会走到AbstractNestablePropertyAccessor类的构造方法也就是BeanWapperImpl的父类方法 </span></span><br><span class="line">                    <span class="keyword">this</span>.bindRequestParameters(binder, webRequest);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.validateIfApplicable(binder, parameter);</span><br><span class="line">                <span class="keyword">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; <span class="keyword">this</span>.isBindExceptionRequired(binder, parameter)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BindException(binder.getBindingResult());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!parameter.getParameterType().isInstance(attribute)) &#123;</span><br><span class="line">                attribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            bindingResult = binder.getBindingResult();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; bindingResultModel = bindingResult.getModel();</span><br><span class="line">        mavContainer.removeAttributes(bindingResultModel);</span><br><span class="line">        mavContainer.addAllAttributes(bindingResultModel);</span><br><span class="line">        <span class="keyword">return</span> attribute;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>再来看AbstractNestablePropertyAccessor类的构造方法 此时会走到下面这个构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">AbstractNestablePropertyAccessor</span><span class="params">(Object object, String nestedPath, AbstractNestablePropertyAccessor parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.autoGrowCollectionLimit = <span class="number">2147483647</span>;</span><br><span class="line">        <span class="keyword">this</span>.nestedPath = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.setWrappedInstance(object, nestedPath, parent.getWrappedInstance());</span><br><span class="line">        <span class="keyword">this</span>.setExtractOldValueForEditor(parent.isExtractOldValueForEditor());</span><br><span class="line">        <span class="keyword">this</span>.setAutoGrowNestedPaths(parent.isAutoGrowNestedPaths());</span><br><span class="line">        <span class="comment">//可以看到这个parent.getAutoGrowCollectionLimit()就是我们在Controller类中通过@InitBinder注解设置的</span></span><br><span class="line">        <span class="comment">//aAutoGrowCollectionLimit</span></span><br><span class="line">        <span class="keyword">this</span>.setAutoGrowCollectionLimit(parent.getAutoGrowCollectionLimit());</span><br><span class="line">        <span class="keyword">this</span>.setConversionService(parent.getConversionService());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;Spring工程采用form-data或x-www-form-urlencoded的方式提交数据 当提交的参数中数组或者List数量过大时抛出IndexOutOfBoundsException 异常信息如下&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="FAQ" scheme="http://example.com/categories/FAQ/"/>
    
    
    <category term="FAQ" scheme="http://example.com/tags/FAQ/"/>
    
  </entry>
  
  <entry>
    <title>nginx获取不到域名</title>
    <link href="http://example.com/2022/07/19/FAQ-nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0%E5%9F%9F%E5%90%8D/"/>
    <id>http://example.com/2022/07/19/FAQ-nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0%E5%9F%9F%E5%90%8D/</id>
    <published>2022-07-19T07:04:35.036Z</published>
    <updated>2022-07-20T06:58:29.428Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当采用nginx做负载均衡时 发现应用在通过request.getRequestURL()获取url得到的并非域名</span><br></pre></td></tr></table></figure><p><strong>原因</strong></p><p>nginx少了相关的配置 需要在nginx.conf中的server模块中添加如下配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line"></span><br><span class="line">Host包含客户端真实的域名和端口号；</span><br><span class="line">X-Forwarded-Proto表示客户端真实的协议（http还是https）；</span><br><span class="line">X-Real-IP表示客户端真实的IP；</span><br><span class="line">X-Forwarded-For这个Header和X-Real-IP类似，但它在多层代理时会包含真实客户端及中间每个代理服务器的IP。</span><br></pre></td></tr></table></figure><p>nginx配置如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"> </span><br><span class="line">        proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line"> </span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://gatewayServ/;</span><br><span class="line">          <span class="comment">#  proxy_pass http://localhost:9012/;</span></span><br><span class="line">            proxy_redirect default;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td c</summary>
      
    
    
    
    <category term="FAQ" scheme="http://example.com/categories/FAQ/"/>
    
    
    <category term="FAQ" scheme="http://example.com/tags/FAQ/"/>
    
  </entry>
  
  <entry>
    <title>mysql查看数据库以及表大小</title>
    <link href="http://example.com/2022/07/18/FAQ-Mysql%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%A5%E5%8F%8A%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%A4%A7%E5%B0%8F/"/>
    <id>http://example.com/2022/07/18/FAQ-Mysql%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%A5%E5%8F%8A%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%A4%A7%E5%B0%8F/</id>
    <published>2022-07-18T06:08:28.784Z</published>
    <updated>2022-07-18T06:18:30.141Z</updated>
    
    <content type="html"><![CDATA[<p><strong>查看mysql各个数据库的大小</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">table_schema as <span class="string">&#x27;数据库&#x27;</span>,</span><br><span class="line">sum(table_rows) as <span class="string">&#x27;记录数&#x27;</span>,</span><br><span class="line">sum(truncate(data_length/1024/1024, 2)) as <span class="string">&#x27;数据容量(MB)&#x27;</span>,</span><br><span class="line">sum(truncate(index_length/1024/1024, 2)) as <span class="string">&#x27;索引容量(MB)&#x27;</span></span><br><span class="line">from information_schema.tables</span><br><span class="line">group by table_schema</span><br><span class="line">order by sum(data_length) desc, sum(index_length) desc;</span><br></pre></td></tr></table></figure><p><strong>查看所有数据库各个表的大小</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">table_schema as <span class="string">&#x27;数据库&#x27;</span>,</span><br><span class="line">table_name as <span class="string">&#x27;表名&#x27;</span>,</span><br><span class="line">table_rows as <span class="string">&#x27;记录数&#x27;</span>,</span><br><span class="line">truncate(data_length/1024/1024, 2) as <span class="string">&#x27;数据容量(MB)&#x27;</span>,</span><br><span class="line">truncate(index_length/1024/1024, 2) as <span class="string">&#x27;索引容量(MB)&#x27;</span></span><br><span class="line">from information_schema.tables</span><br><span class="line">order by data_length desc, index_length desc;</span><br></pre></td></tr></table></figure><p><strong>查看指定的某个数据库的大小</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 修改table_schema为你希望查看的数据库 这里查的是mysql的数据库大小</span></span><br><span class="line">select</span><br><span class="line">table_schema as <span class="string">&#x27;数据库&#x27;</span>,</span><br><span class="line">sum(table_rows) as <span class="string">&#x27;记录数&#x27;</span>,</span><br><span class="line">sum(truncate(data_length/1024/1024, 2)) as <span class="string">&#x27;数据容量(MB)&#x27;</span>,</span><br><span class="line">sum(truncate(index_length/1024/1024, 2)) as <span class="string">&#x27;索引容量(MB)&#x27;</span></span><br><span class="line">from information_schema.tables</span><br><span class="line"><span class="built_in">where</span> table_schema=<span class="string">&#x27;mysql&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>查看某个数据库的各个表的大小</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 修改table_schema为你希望查看的数据库 这里查的是mysql数据库中各个表的大小</span></span><br><span class="line">select</span><br><span class="line">table_schema as <span class="string">&#x27;数据库&#x27;</span>,</span><br><span class="line">table_name as <span class="string">&#x27;表名&#x27;</span>,</span><br><span class="line">table_rows as <span class="string">&#x27;记录数&#x27;</span>,</span><br><span class="line">truncate(data_length/1024/1024, 2) as <span class="string">&#x27;数据容量(MB)&#x27;</span>,</span><br><span class="line">truncate(index_length/1024/1024, 2) as <span class="string">&#x27;索引容量(MB)&#x27;</span></span><br><span class="line">from information_schema.tables</span><br><span class="line"><span class="built_in">where</span> table_schema=<span class="string">&#x27;mysql&#x27;</span></span><br><span class="line">order by data_length desc, index_length desc;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;查看mysql各个数据库的大小&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;sp</summary>
      
    
    
    
    <category term="FAQ" scheme="http://example.com/categories/FAQ/"/>
    
    
    <category term="FAQ" scheme="http://example.com/tags/FAQ/"/>
    
  </entry>
  
  <entry>
    <title>mysql重置root密码</title>
    <link href="http://example.com/2022/07/18/FAQ-Mysql%E9%87%8D%E7%BD%AEroot%E5%AF%86%E7%A0%81/"/>
    <id>http://example.com/2022/07/18/FAQ-Mysql%E9%87%8D%E7%BD%AEroot%E5%AF%86%E7%A0%81/</id>
    <published>2022-07-18T03:32:07.797Z</published>
    <updated>2022-07-18T03:52:35.416Z</updated>
    
    <content type="html"><![CDATA[<p>要重置mysql的root密码需要以下几个步骤</p><ul><li><p><strong>1、以root账户登录mysql服务器</strong></p></li><li><p><strong>2、找到mysql的my.cnf配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 这个配置文件一般在/etc/my.cnf下可以通过下面的命令来查找my.cnf</span></span><br><span class="line">mysql --<span class="built_in">help</span>|grep <span class="string">&#x27;my.cnf&#x27;</span> 查看mysql默认读取的my.cnf，按照从前到后的优先级排序，前面的不存在，则读取后面的。通常配置在/etc/my.cnf。</span><br></pre></td></tr></table></figure></li><li><p><strong>3、修改my.cnf</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 对my.cnf文件做如下修改 </span></span><br><span class="line">首先找到[mysqld]这个配置项 在这个配置项下面添加</span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure></li><li><p><strong>4、重启mysql服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 重启mysql服务有如下几个命令 每个命令都可以</span></span><br><span class="line">service mysqld restart</span><br><span class="line">mysqld restart</span><br></pre></td></tr></table></figure></li><li><p><strong>5、重置root密码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1、先用root用户登录</span></span><br><span class="line">mysql -uroot -p (直接点击回车，密码为空)</span><br><span class="line"><span class="comment">## 2、重置root密码</span></span><br><span class="line">use mysql;</span><br><span class="line"><span class="comment">## mysql 5.7以后用这个命令</span></span><br><span class="line">update user <span class="built_in">set</span> authentication_string=password(<span class="string">&#x27;123456&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="comment">## 刷新权限</span></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p><strong>6、将最开始修改的配置文件my.cnf中的skip-grant-tables删除</strong></p></li><li><p><strong>7、重启mysql</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 建议重启mysql </span></span><br></pre></td></tr></table></figure></li><li><p><strong>8、当你登陆mysql之后你会发现，当你执行命令时会出现</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1820 (HY000): You must reset your password using ALTER USER statement；</span><br></pre></td></tr></table></figure><p>这是提示你需要修改密码 执行下面的代码 进行重置密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET PASSWORD = PASSWORD(<span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;要重置mysql的root密码需要以下几个步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;1、以root账户登录mysql服务器&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2、找到mysql的my.cnf配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="FAQ" scheme="http://example.com/categories/FAQ/"/>
    
    
    <category term="FAQ" scheme="http://example.com/tags/FAQ/"/>
    
  </entry>
  
  <entry>
    <title>Redis Long类型反序列化成Integer类型引发的类型转换异常的处理</title>
    <link href="http://example.com/2022/07/01/FAQ-Redis%E5%AD%98Long%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BC%82%E5%B8%B8/"/>
    <id>http://example.com/2022/07/01/FAQ-Redis%E5%AD%98Long%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BC%82%E5%B8%B8/</id>
    <published>2022-07-01T07:06:18.868Z</published>
    <updated>2022-07-01T07:44:14.454Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Long handleId = xxx;</span><br><span class="line"><span class="comment">//写入Long类型</span></span><br><span class="line">redisTemplate.opsForValue().set(key, handleId, ttl, TimeUnit.MILLISECONDS);</span><br><span class="line"><span class="comment">//读取Long类型数据 下面代码在实际运行过程中或报错 因为redisTemplate.opsForValue().get(key);取出来的实际上</span></span><br><span class="line"><span class="comment">//是一个Integer类型 是无法转为Long类型的</span></span><br><span class="line">Long val = (Long) redisTemplate.opsForValue().get(key);</span><br></pre></td></tr></table></figure><p>其中redis value的序列化方式为jackson序列化 Jackson2JsonRedisSerializer 下面是redisConfig的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">  RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">  template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//参照StringRedisTemplate内部实现指定序列化器</span></span><br><span class="line">  template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">  template.setKeySerializer(keySerializer());</span><br><span class="line">  template.setHashKeySerializer(keySerializer());</span><br><span class="line">  <span class="comment">//指定value序列化器</span></span><br><span class="line">  template.setValueSerializer(valueSerializer());</span><br><span class="line">  template.setHashValueSerializer(valueSerializer());</span><br><span class="line">  <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Jackson2JsonRedisSerializer序列化 注意此时Jackson2JsonRedisSerializer的泛型为Object</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> RedisSerializer&lt;Object&gt; <span class="title">valueSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer =</span><br><span class="line">    <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class="line">  ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">  objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">  objectMapper.configure(MapperFeature.USE_ANNOTATIONS, <span class="keyword">false</span>);</span><br><span class="line">  objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="keyword">false</span>);</span><br><span class="line">  objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="keyword">false</span>);</span><br><span class="line">  <span class="comment">// 此项必须配置，否则会报java.lang.ClassCastException: java.util.LinkedHashMap cannot be cast to XXX</span></span><br><span class="line">  objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);</span><br><span class="line">  objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">  jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line">  <span class="keyword">return</span> jackson2JsonRedisSerializer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将Long val = (Long) redisTemplate.opsForValue().get(key); 用Number接收 代码如下</span></span><br><span class="line">Number val = (Number) redisTemplate.opsForValue().get(key);</span><br><span class="line"><span class="keyword">if</span>(val != <span class="keyword">null</span>) &#123;</span><br><span class="line">  <span class="keyword">long</span> l = val.longValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结论</strong> 要么以后少在Redis中直接存Long类型 如果非要存Long类型 反序列化的时候 先用Number接收再转</p><p><strong>原因</strong> 导致Long类型反序列化成Integer类型的原因如下</p><p>可以看到 <strong>DefaultValueOperations</strong>类的序列化和反序列化的源码 Redis对于值的序列化和反序列化都是通过该类去实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步断点DefaultValueOperations类的get方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultValueOperations</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractOperations</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ValueOperations</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">//根据key获取值</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.execute(<span class="keyword">new</span> AbstractOperations&lt;K, V&gt;.ValueDeserializingRedisCallback(key) &#123;</span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">byte</span>[] inRedis(<span class="keyword">byte</span>[] rawKey, RedisConnection connection) &#123;</span><br><span class="line">                <span class="keyword">return</span> connection.get(rawKey);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步 继续断点跟进inRedis方法 会进入AbstractOperations类的doInRedis方法</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractOperations</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueDeserializingRedisCallback</span> <span class="keyword">implements</span> <span class="title">RedisCallback</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object key;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValueDeserializingRedisCallback</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">doInRedis</span><span class="params">(RedisConnection connection)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">byte</span>[] result = <span class="keyword">this</span>.inRedis(AbstractOperations.<span class="keyword">this</span>.rawKey(<span class="keyword">this</span>.key), connection);</span><br><span class="line">      <span class="comment">//断点跟进 this.deserializeValue(result);</span></span><br><span class="line">      <span class="keyword">return</span> AbstractOperations.<span class="keyword">this</span>.deserializeValue(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">byte</span>[] inRedis(<span class="keyword">byte</span>[] var1, RedisConnection var2);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function">V <span class="title">deserializeValue</span><span class="params">(<span class="keyword">byte</span>[] value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用你在redis config中指定的valueSerializer的反序列化方法 由于我使用的序列化器为</span></span><br><span class="line">    <span class="comment">//Jackson2JsonRedisSerializer所以接下来断点进入Jackson2JsonRedisSerializer类</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.valueSerializer() == <span class="keyword">null</span> ? value : <span class="keyword">this</span>.valueSerializer().deserialize(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三步 断点进入Jackson2JsonRedisSerializer类 结合之前redisConfig配置类中声明的Jackson2JsonRedisSerializer的</span></span><br><span class="line"><span class="comment">//泛型 T此时实际上是Object类型 对于Object类型 如果判断某个值是一个数值类型 会自动转为Integer类型 所以导致了类型的丢失</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jackson2JsonRedisSerializer</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">RedisSerializer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">deserialize</span><span class="params">(<span class="meta">@Nullable</span> <span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> SerializationException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (SerializationUtils.isEmpty(bytes)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.objectMapper.readValue(bytes, <span class="number">0</span>, bytes.length, <span class="keyword">this</span>.javaType);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var3) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SerializationException(<span class="string">&quot;Could not read JSON: &quot;</span> + var3.getMessage(), var3);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c</summary>
      
    
    
    
    <category term="FAQ" scheme="http://example.com/categories/FAQ/"/>
    
    
    <category term="FAQ" scheme="http://example.com/tags/FAQ/"/>
    
  </entry>
  
  <entry>
    <title>SQL执行顺序</title>
    <link href="http://example.com/2022/06/28/FAQ-SQL%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <id>http://example.com/2022/06/28/FAQ-SQL%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</id>
    <published>2022-06-28T08:30:22.585Z</published>
    <updated>2022-07-01T07:00:26.592Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/0126.png" alt="SQL执行顺序"></p><p>从这个顺序中我们可以发现，所有的查询语句都是从 <strong>FROM</strong> 开始执行的。在实际执行过程中，每个步骤都会为下一个步骤生成一个虚拟表，这个虚拟表将作为下一个执行步骤的输入。 接下来，我们详细的介绍下每个步骤的具体执行过程。</p><ul><li><p><strong>一 FROM 执行笛卡尔积</strong></p><p>FROM 才是 SQL 语句执行的第一步，并非 SELECT 。对FROM子句中的前两个表执行笛卡尔积(交叉联接），生成虚拟表VT1，获取不同数据源的数据集。FROM子句执行顺序为从后往前、从右到左，FROM 子句中写在最后的表(基础表 driving table)将被最先处理，即最后的表为驱动表，当FROM 子句中包含多个表的情况下，我们需要选择数据最少的表作为基础表。</p></li><li><p><strong>ON 应用ON过滤器</strong></p><p>对虚拟表VT1 应用ON筛选器，ON 中的逻辑表达式将应用到虚拟表 VT1中的各个行，筛选出满足ON 逻辑表达式的行，生成虚拟表 VT2 </p></li><li><p><strong>JOIN 添加外部行</strong></p><p>如果指定了OUTER JOIN保留表中未找到匹配的行将作为外部行添加到虚拟表 VT2，生成虚拟表 VT3。保留表如下：<br>LEFT OUTER JOIN把左表记为保留表<br>RIGHT OUTER JOIN把右表记为保留表<br>FULL OUTER JOIN把左右表都作为保留表<br>在虚拟表 VT2表的基础上添加保留表中被过滤条件过滤掉的数据，非保留表中的数据被赋予NULL值，最后生成虚拟表 VT3<br>如果FROM子句包含两个以上的表，则对上一个联接生成的结果表和下一个表重复执行步骤1~3，直到处理完所有的表为止</p></li><li><p><strong>WHERE 条件筛选</strong> </p><p>对虚拟表 VT3应用WHERE筛选器。根据指定的条件对数据进行筛选，并把满足的数据插入虚拟表 VT4。由于数据还没有分组，因此现在还不能在WHERE过滤器中使用聚合函数对分组统计的过滤。同时，由于还没有进行列的选取操作，因此在SELECT中使用列的别名也是不被允许的。</p></li><li><p> <strong>GROUP BY 分组</strong> </p></li></ul><p>  按GROUP BY子句中的列/列表将虚拟表 VT4中的行唯一的值组合成为一组，生成虚拟表VT5。如果应用了GROUP BY，那么后面的所有步骤都只能得到的虚拟表VT5的列或者是聚合函数（count、sum、avg等）。原因在于最终的结果集中只为每个组包含一行。同时，从这一步开始，后面的语句中都可以使用SELECT中的别名。</p><ul><li><p><strong>AGG_FUNC 计算聚合函数</strong> </p><p>计算 max 等聚合函数。SQL Aggregate 函数计算从列中取得的值，返回一个单一的值。常用的 Aggregate 函数包涵以下几种</p><ul><li>AVG：返回平均值</li><li>COUNT：返回行数</li><li>FIRST：返回第一个记录的值</li><li>LAST：返回最后一个记录的值</li><li>MAX： 返回最大值</li><li>MIN：返回最小值</li><li>SUM： 返回总和</li></ul></li><li><p><strong>WITH 应用ROLLUP或CUBE</strong></p><p>对虚拟表 VT5应用ROLLUP或CUBE选项，生成虚拟表 VT6。CUBE 和 ROLLUP 区别如下：<br>CUBE 生成的结果数据集显示了所选列中值的所有组合的聚合。<br>ROLLUP 生成的结果数据集显示了所选列中值的某一层次结构的聚合。</p></li><li><p><strong>HAVING 应用HAVING过滤器</strong> </p><p>对虚拟表VT6应用HAVING筛选器。根据指定的条件对数据进行筛选，并把满足的数据插入虚拟表VT7 HAVING 语句在SQL中的主要作用与WHERE语句作用是相同的，但是HAVING是过滤聚合值，在 SQL 中增加 HAVING 子句原因就是，WHERE 关键字无法与聚合函数一起使用，HAVING子句主要和GROUP BY子句配合使用。</p></li><li><p><strong>SELECT 选出指定列</strong></p><p>将虚拟表 VT7中的在SELECT中出现的列筛选出来，并对字段进行处理，计算SELECT子句中的表达式，产生虚拟表 VT8</p></li><li><p><strong>DISTINCT 行去重</strong></p><p>将重复的行从虚拟表 VT8中移除，产生虚拟表 VT9。DISTINCT用来删除重复行，只保留唯一的。事实上如果应用了group by子句那么distinct是多余的，原因同样在于，分组的时候是将列中唯一的值分成一组，同时只为每一组返回一行记录，那么所有的记录都将是不相同的</p></li><li><p><strong>ORDER BY 排列</strong></p><p>将虚拟表 VT9中的行按ORDER BY 子句中的列/列表排序，生成游标 VC10 ；此时返回的一个游标，而不是虚拟表。sql是基于集合的理论的，集合不会预先对他的行排序，它只是成员的逻辑集合，成员的顺序是无关紧要的。对表进行排序的查询可以返回一个对象，这个对象包含特定的物理顺序的逻辑组织。这个对象就叫游标。正因为返回值是游标，那么使用order by 子句查询不能应用于表表达式。排序是很需要成本的，除非你必须要排序，否则最好不要指定order by，最后，在这一步中是第一个也是唯一一个可以使用select列表中别名的步骤。</p></li><li><p><strong>LIMIT/OFFSET 指定返回行</strong></p><p>从VC10的开始处选择指定数量行，生成虚拟表 <strong>VT11</strong>，并返回调用者</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/0126.png&quot; alt=&quot;SQL执行顺序&quot;&gt;&lt;/p&gt;
&lt;p&gt;从这个顺序中我们可以发现，所有的查询语句都是从 &lt;strong&gt;FROM&lt;/strong&gt; 开始执行的。在实际执行过程中，每个步骤都会为下一个步骤生成一个虚拟表，这个虚拟表将</summary>
      
    
    
    
    <category term="FAQ" scheme="http://example.com/categories/FAQ/"/>
    
    
    <category term="FAQ" scheme="http://example.com/tags/FAQ/"/>
    
  </entry>
  
  <entry>
    <title>vi命令批量替换</title>
    <link href="http://example.com/2022/06/21/FAQ-VI%E6%89%B9%E9%87%8F%E6%9B%BF%E6%8D%A2/"/>
    <id>http://example.com/2022/06/21/FAQ-VI%E6%89%B9%E9%87%8F%E6%9B%BF%E6%8D%A2/</id>
    <published>2022-06-21T04:49:42.807Z</published>
    <updated>2022-06-21T04:59:21.472Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vi批量替换"><a href="#vi批量替换" class="headerlink" title="vi批量替换"></a>vi批量替换</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## VI中的批量替换 首先要按ESC : 进入vi命令编辑</span></span><br><span class="line">1)替换文件全部内容(把abc替换成123)</span><br><span class="line">%s<span class="comment">#abc#123#g (如果被替换的字符中有#，可用/替换,:%s/abc/123/g 反之如果被替换的字符中有/也可以用#来替换/)</span></span><br><span class="line">2)替换第20~30行中的内容</span><br><span class="line">20,30s<span class="comment">#abc#123#g</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;vi批量替换&quot;&gt;&lt;a href=&quot;#vi批量替换&quot; class=&quot;headerlink&quot; title=&quot;vi批量替换&quot;&gt;&lt;/a&gt;vi批量替换&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</summary>
      
    
    
    
    <category term="FAQ" scheme="http://example.com/categories/FAQ/"/>
    
    
    <category term="FAQ" scheme="http://example.com/tags/FAQ/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot多数据源事务不生效</title>
    <link href="http://example.com/2022/06/20/FAQ-SpringBoot%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E4%BA%8B%E5%8A%A1%E4%B8%8D%E7%94%9F%E6%95%88%E5%8E%9F%E5%9B%A0/"/>
    <id>http://example.com/2022/06/20/FAQ-SpringBoot%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E4%BA%8B%E5%8A%A1%E4%B8%8D%E7%94%9F%E6%95%88%E5%8E%9F%E5%9B%A0/</id>
    <published>2022-06-20T14:19:22.923Z</published>
    <updated>2022-06-20T14:32:28.492Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>当SpringBoot应用中包含多数据源的时候 发现@Transactional注解标注的事务没有生效 经排查数据库引擎是支持事务的 且spring事务配置没有问题 </p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>多数据源的时候事务回滚需要在@Transactional注解中指明事务管理器 如以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional(transactionManager = &quot;masterTransactionManager&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BaseResult&lt;Long&gt; <span class="title">add</span><span class="params">(AParam param)</span> </span>&#123;</span><br><span class="line">xx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者是在对应的config类中手动指定每个数据源的事务管理器 如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Bean(name = &quot;transactionManager&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">transactionManager</span><span class="params">(<span class="meta">@Qualifier(&quot;dataSource&quot;)</span> DataSource masterDataSource)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(masterDataSource);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有多个数据源 就指定多个事务管理器</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;当SpringBoot应用中包含多数据源的时候 发现@Transactional注解标注的事务没有生效 经排查数据库引擎是支持事务的 且sp</summary>
      
    
    
    
    <category term="FAQ" scheme="http://example.com/categories/FAQ/"/>
    
    
    <category term="FAQ" scheme="http://example.com/tags/FAQ/"/>
    
  </entry>
  
  <entry>
    <title>git切换ssh与http协议</title>
    <link href="http://example.com/2022/06/20/FAQ-git%E5%88%87%E6%8D%A2%E5%8D%8F%E8%AE%AE/"/>
    <id>http://example.com/2022/06/20/FAQ-git%E5%88%87%E6%8D%A2%E5%8D%8F%E8%AE%AE/</id>
    <published>2022-06-20T14:15:09.616Z</published>
    <updated>2022-06-20T14:33:26.260Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git切换ssh与http协议"><a href="#git切换ssh与http协议" class="headerlink" title="git切换ssh与http协议"></a>git切换ssh与http协议</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1.查看当前项目使用的git协议是http还是git</span></span><br><span class="line">git remote -v</span><br><span class="line"><span class="comment">## 2.增加新的协议 如果原来是http协议则加入git协议 如果原来是git协议 则加入http协议</span></span><br><span class="line">git remote set-url --add origin https://gitee.com/zjZSTU/zjzstu.gitee.io.git</span><br><span class="line"><span class="comment">## 3.删除原来的协议</span></span><br><span class="line">git remote set-url --delete origin git@gitee.com:zjZSTU/zjzstu.gitee.io.git</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;git切换ssh与http协议&quot;&gt;&lt;a href=&quot;#git切换ssh与http协议&quot; class=&quot;headerlink&quot; title=&quot;git切换ssh与http协议&quot;&gt;&lt;/a&gt;git切换ssh与http协议&lt;/h3&gt;&lt;figure class=&quot;highli</summary>
      
    
    
    
    <category term="FAQ" scheme="http://example.com/categories/FAQ/"/>
    
    
    <category term="FAQ" scheme="http://example.com/tags/FAQ/"/>
    
  </entry>
  
  <entry>
    <title>Redis集群部署异常</title>
    <link href="http://example.com/2022/06/08/FAQ-Redis%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%E5%BC%82%E5%B8%B8/"/>
    <id>http://example.com/2022/06/08/FAQ-Redis%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%E5%BC%82%E5%B8%B8/</id>
    <published>2022-06-08T14:05:10.132Z</published>
    <updated>2022-06-08T14:28:25.896Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在完成redis集群部署以后 redis槽点分配都是正常的(执行redis-cli -a 123456 --cluster create 192.168.14.210:7001 192.168.14.210:8001 192.168.14.211:7002 192.168.14.211:8002 192.168.14.212:7003 192.168.14.212:8003 --cluster-replicas 1 正常)</span><br><span class="line">但是去查看从节点的日志的时候发现 从节点日志报错 错误信息如下</span><br><span class="line">MASTER aborted replication with an error: NOAUTH Authentication required</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><p>从字面意义上来说就是redis在进行主从复制的时候报错(需要密码) 检查redis.conf文件 发现requirepass是已经配置了的 之所以报这个错误 是因为如果master节点开启了安全机制并设置了密码的话，就需要在从节点配置文件中配置masterauth参数，该参数就是master节点的密码（即master节点中requirepass参数的值），否则的话，master节点会拒绝同步请求。建议每个节点都配置上masterauth</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##</span></span><br><span class="line">requirepass 123456</span><br><span class="line"><span class="comment">##</span></span><br><span class="line">masterauth 123456</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c</summary>
      
    
    
    
    <category term="FAQ" scheme="http://example.com/categories/FAQ/"/>
    
    
    <category term="FAQ" scheme="http://example.com/tags/FAQ/"/>
    
  </entry>
  
  <entry>
    <title>文件上传报错</title>
    <link href="http://example.com/2022/06/06/FAQ-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8A%A5%E9%94%99/"/>
    <id>http://example.com/2022/06/06/FAQ-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8A%A5%E9%94%99/</id>
    <published>2022-06-06T02:07:38.361Z</published>
    <updated>2022-06-06T02:37:21.078Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文件上传报错信息如下"><a href="#文件上传报错信息如下" class="headerlink" title="文件上传报错信息如下"></a>文件上传报错信息如下</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.io.IOException: Connection reset by peer</span><br></pre></td></tr></table></figure><h3 id="可能的原因"><a href="#可能的原因" class="headerlink" title="可能的原因"></a>可能的原因</h3><ul><li><p>可能是由于请求头未设置Expect:100-continue 由于没有设置这个请求当文件上传大小超过了nginx设置的文件上传大小的时候就会出现java.io.IOException: Connection reset by peer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addHeader(<span class="string">&quot;Expect&quot;</span>,<span class="string">&quot;100-continue&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>如果确认文件大小没有超过nginx设置的大小 那么还有一种可能是因为nginx磁盘满了 这是因为当nginx请求超过一定大小后就会默认给你缓存起来 配置如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">配置请求体缓存区大小</span><br><span class="line">client_body_buffer_size 10m;</span><br><span class="line">配置客户端上传限制最大值</span><br><span class="line">client_max_body_size 20m;</span><br><span class="line">配置客户端下载限制最大值</span><br><span class="line">proxy_max_temp_file_size 5000m;</span><br><span class="line">设置临时文件存放路径(可选配置) 设置临时文件存放路径。只有当上传的请求体超出缓存区大小时，才会写到临时文件 中,注意临时路径要有写入权限</span><br><span class="line">client_body_temp_path /data/temp;</span><br></pre></td></tr></table></figure></li><li><p>如果确认nginx磁盘没有问题 还有一种可能是服务器的并发连接数超过了服务器允许的最大连接数</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;文件上传报错信息如下&quot;&gt;&lt;a href=&quot;#文件上传报错信息如下&quot; class=&quot;headerlink&quot; title=&quot;文件上传报错信息如下&quot;&gt;&lt;/a&gt;文件上传报错信息如下&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    <category term="FAQ" scheme="http://example.com/categories/FAQ/"/>
    
    
    <category term="FAQ" scheme="http://example.com/tags/FAQ/"/>
    
  </entry>
  
  <entry>
    <title>JVM调优(六)</title>
    <link href="http://example.com/2022/05/10/JVM-JVM%E8%B0%83%E4%BC%9806/"/>
    <id>http://example.com/2022/05/10/JVM-JVM%E8%B0%83%E4%BC%9806/</id>
    <published>2022-05-10T14:53:27.104Z</published>
    <updated>2022-06-09T13:15:23.844Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-垃圾"><a href="#一-垃圾" class="headerlink" title="一 垃圾"></a>一 垃圾</h3><p>没有引用指向的对象 被称之为垃圾</p><h3 id="二-引用计数法"><a href="#二-引用计数法" class="headerlink" title="二 引用计数法"></a>二 引用计数法</h3><p>引用计数法其实不能算作一种垃圾清除的算法 它的作用是用来判断某个对象是否是一个垃圾对象 它的原理很简单就是当有一个引用指向某个对象的时候 则该对象的引用次数加1 当某个引用不再指向该对象的时候 该对象的引用次数减1 直到指向该对象的引用的数量为0时 该对象就成为垃圾对象 但是引用计数法无法解决对象之间循环引用的问题 A–&gt;B–&gt;A 这种情况下A与B都是垃圾后也是无法被回收的</p><h3 id="三-可达性分析算法"><a href="#三-可达性分析算法" class="headerlink" title="三 可达性分析算法"></a>三 可达性分析算法</h3><p>可达性分析算法也叫根搜索算法 从 GC Roots开始向下搜索，搜索所走过的路径称为引用链。当一个对象到 GC Roots 没有任何引用链相连时，则证明此对象是可以被回收的。</p><p><strong>GC的根包括如下4个对象</strong></p><ul><li><strong>线程栈变量</strong></li><li><strong>静态变量</strong></li><li><strong>常量池</strong></li><li><strong>JNI指针</strong></li></ul><h3 id="四-垃圾清除的算法"><a href="#四-垃圾清除的算法" class="headerlink" title="四 垃圾清除的算法"></a>四 垃圾清除的算法</h3><p><strong>引用计数</strong> 和 <strong>可达性分析算法</strong>只是用来找到哪些对象是垃圾对象 真正清除垃圾的算法主要有以下几种</p><ul><li><strong>标记清除法</strong> 当找到垃圾对象之后 打一个标记 然后再对这些被标记的对象进行清除 标记清除算法相对简单 适用于存活对象比较多的情况  但是缺点也很明显 两遍扫描 效率比较低 而且容易产生内存碎片 </li><li><strong>复制算法</strong> 复制算法会将内存一分为二 将有用的对象拷贝到新的内存块中去 然后把现有的内存清理掉</li><li><strong>标记压缩算法</strong> </li></ul><h3 id="五-JVM内存分代模型"><a href="#五-JVM内存分代模型" class="headerlink" title="五 JVM内存分代模型"></a>五 JVM内存分代模型</h3><p>对于JDK1.7来说包括 新生代+老年代+永久代 对于JDK1.8来说则是新生代+老年代+元空间</p><p>永久代/元空间里面存放的主要是Class对象以及字符串常量等 永久代必须指定大小限制 元空间可以设置也可以不设置 如果不设置元空间的内存大小受限于物理内存</p><p>需要注意的是并不是所有的垃圾回收器都会有分代模型 对于Epsilon ZGC、Shenandoah 都是不分代的 对于G1垃圾收集器则只是在逻辑上进行分代 物理上不分代 对于G1以前的垃圾收集器如CMS则是物理上都进行了分代</p><p>新生代进行垃圾回收适合采用复制算法 老年代进行垃圾回收适合采用标记清除或者标记压缩算法</p><p><img src="/images/0125.png" alt="图1"></p><p><strong>一个对象被创建出来后 并不是直接丢到堆中 而是会先尝试去栈上分配 栈上分配不了 才会到eden区</strong> </p><p><strong>一个对象如何从年轻代进入到老年代</strong> </p><ul><li>可以通过JVM参数-XX:MaxTenuringThreshold指定YGC的次数 如果不指定 当JVM的垃圾收集器是Parallel Scavenge 或者 G1的时候 默认是15次YGC还没被回收 则进入老年代 如果采用的是CMS垃圾收集器 则默认是6次</li><li>还有一种情况是动态年龄计算 就是指当发生一次YGC的时候 发现进入到Survior区的对象已经占了Surivor区内存的一半以上了 则会将Survior区中年龄最大的一些对象也丢到老年代中去</li><li>当一个对象是一个特别大的对象的时候 也会直接进入老年代</li></ul><h3 id="六-常见的垃圾收集器"><a href="#六-常见的垃圾收集器" class="headerlink" title="六 常见的垃圾收集器"></a>六 常见的垃圾收集器</h3><ul><li><strong>Serial</strong> 用于年轻代 是一种串行收集的垃圾收集器 </li><li><strong>PS</strong> 用于年轻代 区别于 <strong>Serial</strong> 他是一种并行回收的垃圾收集器</li><li><strong>ParNew</strong> 用于年轻代 配合CMS的并行回收</li><li><strong>CMS</strong> 用于老年代 是一种并行的垃圾收集器</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-垃圾&quot;&gt;&lt;a href=&quot;#一-垃圾&quot; class=&quot;headerlink&quot; title=&quot;一 垃圾&quot;&gt;&lt;/a&gt;一 垃圾&lt;/h3&gt;&lt;p&gt;没有引用指向的对象 被称之为垃圾&lt;/p&gt;
&lt;h3 id=&quot;二-引用计数法&quot;&gt;&lt;a href=&quot;#二-引用计数法&quot; class</summary>
      
    
    
    
    <category term="JVM" scheme="http://example.com/categories/JVM/"/>
    
    
    <category term="JVM" scheme="http://example.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM调优(五)</title>
    <link href="http://example.com/2022/05/05/JVM-JVM%E8%B0%83%E4%BC%9805/"/>
    <id>http://example.com/2022/05/05/JVM-JVM%E8%B0%83%E4%BC%9805/</id>
    <published>2022-05-05T13:14:11.430Z</published>
    <updated>2022-06-08T14:29:31.800Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-JVM-Runtime-Data-Area"><a href="#一-JVM-Runtime-Data-Area" class="headerlink" title="一 JVM Runtime Data Area"></a>一 JVM Runtime Data Area</h3><p>JVM运行时数据区(也就是通常说的JVM内存模型)</p><p><img src="/images/0116.png" alt="图1"></p><ul><li><p><strong>Program Counter</strong> 这里指的是程序计数器 存放当前线程执行到哪一条指令了(每个线程都会有自己的程序计数器 因为要适应线程切换的场景) </p></li><li><p><strong>JVM stacks</strong> 虚拟机栈 里面存放的是一个个的栈帧(栈帧也叫Frame 一个线程进入一个方法就会开辟一个栈帧)(每个线程会有自己的虚拟机栈)</p><ul><li><p><strong>栈帧(Frame)</strong> </p><ul><li><p><strong>局部变量表(Local Variables)</strong> 局部变量表是一组变量值存储空间 用于存放方法参数和方法内部定义的局部变量。在Java程序被编译成Class文件时，就在方法的Code属性的max_locals数据项中确定了该方法所需要分配的最大局部变量表的容量</p><p><img src="/images/0117.png" alt="图2"></p></li><li><p><strong>操作数栈(Operand Stacks)</strong> 主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间</p></li><li><p><strong>动态链接(Dynamic linking)</strong> 动态链接就是将指令中的符号引用转化为真实的方法地址</p></li><li><p><strong>返回值地址(Return address)</strong> 比如a方法 调用b方法 当b方法执行完以后 需要回到a方法中 这个就是返回值地址</p></li></ul></li></ul></li><li><p><strong>Heap</strong> 堆主要存放对象属于线程共享的内存区</p></li><li><p><strong>Direct Memory</strong> 直接内存 JVM可以直接访问的内核空间的内存 (OS 管理的内存)</p></li><li><p><strong>Method Area</strong> 方法区 存放class文件(不是clsss对象 是class文件的二进制码)、以及常量池等 (方法区也是线程共享的) 在JDK1.8以前 方法区也被称之为永久代 1.8及以后则被称之为元空间  JDK1.8之前 方法区是不会被回收的 Fullgc 也无法回收 且1.8之前方法区只能在项目启动时设定 而在JDK1.8及以后元空间是可以被回收的 且元空间的内存也是可以动态变的 它默认的最大值就是可用物理内存的最大值</p><ul><li><strong>常量池</strong> 常量池实际上是跟随着class文件的(class文件中本身就存在了常量池)</li></ul></li><li><p><strong>Native Method Stacks</strong> 本地方法栈 这个一般不用管</p></li></ul><p><strong>示例程序</strong></p><p><img src="/images/0118.png" alt="图3"></p><p><strong>字节码指令分析</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> 0 bipush 8 <span class="comment">## 这个表示将8这个数压入操作数栈中</span></span><br><span class="line"> 2 istore_1 <span class="comment">## 把栈顶元素(也就是刚刚压入的那个8)存到局部变量表中下标为1的变量(也就是i)中</span></span><br><span class="line"> 3 iinc 1 by 1 <span class="comment">## 表示把局部变量表下标为1的变量的值加1 此时局部变量表对应的值是9</span></span><br><span class="line"> 6 iload_1 <span class="comment">## 把局部变量表中下标为1的变量的值读到操作数栈中 9</span></span><br><span class="line"> 7 istore_1 <span class="comment">## 把栈顶元素(也就是刚刚压入的那个9)存到局部变量表中下标为1的变量(也就是i)中</span></span><br><span class="line"> 8 bipush 9</span><br><span class="line">10 istore_2</span><br><span class="line">11 getstatic <span class="comment">#2 &lt;java/lang/System.out : Ljava/io/PrintStream;&gt;</span></span><br><span class="line">14 iload_1</span><br><span class="line">15 invokevirtual <span class="comment">#3 &lt;java/io/PrintStream.println : (I)V&gt;</span></span><br><span class="line">18 <span class="built_in">return</span></span><br></pre></td></tr></table></figure><p><img src="/images/0119.png" alt="图4"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> 0 bipush 8 <span class="comment">## 同上</span></span><br><span class="line"> 2 istore_1  <span class="comment">## 同上</span></span><br><span class="line"> 3 iload_1  <span class="comment">## 同上 此时栈顶元素值为8</span></span><br><span class="line"> 4 iinc 1 by 1 <span class="comment">## 此时局部变量表下标为1的值累加1后值是9 栈顶元素是8</span></span><br><span class="line"> 7 istore_1 <span class="comment">## 把栈顶元素赋值给局部变量表下标为1的变量(i) 所以此时i是8而不是9</span></span><br><span class="line"> 8 bipush 9</span><br><span class="line">10 istore_2</span><br><span class="line">11 getstatic <span class="comment">#2 &lt;java/lang/System.out : Ljava/io/PrintStream;&gt;</span></span><br><span class="line">14 iload_1</span><br><span class="line">15 invokevirtual <span class="comment">#3 &lt;java/io/PrintStream.println : (I)V&gt;</span></span><br><span class="line">18 <span class="built_in">return</span></span><br></pre></td></tr></table></figure><h3 id="二-JVM-指令分析"><a href="#二-JVM-指令分析" class="headerlink" title="二 JVM 指令分析"></a>二 JVM 指令分析</h3><ul><li><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Client client = <span class="keyword">new</span> Client();</span><br><span class="line">        client.m1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>main方法的字节码</strong></p><p><img src="/images/0120.png" alt="图5"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span> <span class="keyword">new</span> #<span class="number">2</span> &lt;com/poi/tl/test/Client&gt; <span class="comment">//#2 代表常量池的第二个位置 new 指令 会把Client类实例化为一个对象 放到堆内存中 此时Client对象的成员变量都是默认值(这里还不是初值) 然后会把这个对象的内存地址压入到操作数栈的栈顶</span></span><br><span class="line"> <span class="number">3</span> dup <span class="comment">//dup是把操作数栈栈顶的元素拷贝并把拷贝后的值压入操作数栈 此时栈顶有两个值 都是Client对象的堆内存地址</span></span><br><span class="line"> <span class="number">4</span> invokespecial #<span class="number">3</span> &lt;com/poi/tl/test/Client.&lt;init&gt; : ()V&gt; <span class="comment">//执行Client的构造方法 此时会为成员变量赋初值 在调用构造方法的时候 会把操作数栈栈顶的元素(Client的内存地址)弹出去 所以执行完这一步操作数栈里就只有一个元素了 这个值就是Client对象的内存 这也是为new操作后啥要先dup 然后执行invokespecial的原因</span></span><br><span class="line"> <span class="number">7</span> astore_1 <span class="comment">//把栈顶元素弹出去 赋值给局部变量表的第一个值(client) 到这里完成了Client client = new Client();</span></span><br><span class="line"> <span class="number">8</span> aload_1 <span class="comment">//加载局部变量表的第一个变量的值(client对象的内存地址) 到操作数栈</span></span><br><span class="line"> <span class="number">9</span> invokevirtual #<span class="number">4</span> &lt;com/poi/tl/test/Client.m1 : ()V&gt; <span class="comment">//弹出操作数栈栈顶元素(client内存地址)执行m1方法</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">return</span> <span class="comment">//main方法结束</span></span><br></pre></td></tr></table></figure></li><li><p><strong>main方法的局部变量表</strong></p><p><img src="/images/0121.png" alt="图6"></p></li><li><p><strong>m1方法的字节码</strong></p><p><img src="/images/0122.png" alt="图7"></p></li><li><p><strong>m1方法的局部变量表</strong></p><p><img src="/images/0123.png" alt="图8"></p></li><li><p><strong>dup指令解释</strong></p><p><img src="/images/0124.png" alt="图9"></p></li></ul><h3 id="三-JVM指令集"><a href="#三-JVM指令集" class="headerlink" title="三 JVM指令集"></a>三 JVM指令集</h3><p>详细的JVM指令都代表啥含义请见<a href="https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-6.html">JVM指令集解释</a> 常见的invoke指令如下</p><ul><li><strong>invokestatic</strong> 执行静态方法时执行的指令</li><li>**invokevirtual ** 执行非静态方法(私有方法除外) 自带多态 也就是说子类在执行重写的父类的某个方法的时候 可以利用这条指令 找到本类的方法而不是父类的原方法 一般执行非静态方法都是使用的这条指令</li><li><strong>invokeinterface</strong> 执行接口的方法调用这条指令</li><li><strong>invokespecial</strong> 执行构造方法和私有方法的时候用invokeSpecial</li><li><strong>invokedynamic</strong> 执行反射或者lambda表达式、scala等动态语言的时候会用这条指令(因为动态语言和反射会产生新的类) 很复杂！</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-JVM-Runtime-Data-Area&quot;&gt;&lt;a href=&quot;#一-JVM-Runtime-Data-Area&quot; class=&quot;headerlink&quot; title=&quot;一 JVM Runtime Data Area&quot;&gt;&lt;/a&gt;一 JVM Runtime Dat</summary>
      
    
    
    
    <category term="JVM" scheme="http://example.com/categories/JVM/"/>
    
    
    <category term="JVM" scheme="http://example.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM调优(四)</title>
    <link href="http://example.com/2022/04/26/JVM-JVM%E8%B0%83%E4%BC%9804/"/>
    <id>http://example.com/2022/04/26/JVM-JVM%E8%B0%83%E4%BC%9804/</id>
    <published>2022-04-25T16:02:36.121Z</published>
    <updated>2022-05-05T13:12:56.909Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-CPU级别的内存屏障"><a href="#一-CPU级别的内存屏障" class="headerlink" title="一 CPU级别的内存屏障"></a>一 CPU级别的内存屏障</h3><p>cpu级别的内存屏障 根据各个CPU厂商的不同 实现方式也有不同 以Inter x86的CPU来说 它的CPU内存屏障是依靠下面三个指令实现的</p><ul><li><strong>sfence</strong> store fence 表示在sfence指令前的写操作必须在sfence指令后的写操作执行前完成</li><li><strong>lfence</strong> load fence 表示在lfence指令前的读操作必须在lfence指令后的读操作执行前完成</li><li><strong>mefence</strong> modify/mix fence 表示在mfence指令执行前的读写操作必须在mfence指令的读写操作执行前完成</li></ul><h3 id="二-volatile-实现细节"><a href="#二-volatile-实现细节" class="headerlink" title="二 volatile 实现细节"></a>二 volatile 实现细节</h3><p>在JVM层面 volatile关键字被加了JVM的内存屏障(此处并不是CPU级别的内存屏障) 如下面表示的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#volatile写操作的内存屏障</span></span><br><span class="line">StoreStoreBarrier</span><br><span class="line">volatile 写操作</span><br><span class="line">StoreLoadBarrier</span><br><span class="line"><span class="comment">#volatile读操作的内存屏障</span></span><br><span class="line">LoadLoadBarrier</span><br><span class="line">volatile 读操作</span><br><span class="line">LoadStoreBarrier</span><br></pre></td></tr></table></figure><ul><li><strong>LoadLoad屏障</strong> 对于这样的语句 Load1; LoadLoad; Load2;(这里的Load指的是JVM的读指令 具体是哪一个指令无所谓 只要是与读数据相关的指令就可以了)在Load2及后续读操作要读取的数据被访问之前，保证load2读取的数据被读取完毕</li><li><strong>StoreStore屏障</strong> 对于这样的语句Store1;StoreStore;Store2;(这里的Store是指的写指令) 在Store2及后续写入操作执行前，保证Store2的写入操作对其他处理器可见</li><li><strong>LoadStore屏障</strong> 对于这样的语句 Load1;LoadStore;Store2; 在Store2及其后续写入操作被刷出前;保证Load1要读取的数据被读取完毕</li><li><strong>StoreLoad屏障</strong> 对于这样的语句 Store1;StoreLoad;Load2;在Store2及其后续所有操作执行前;保证Store1的写入对其所有处理器可见</li></ul><h3 id="三-synchronized-实现细节"><a href="#三-synchronized-实现细节" class="headerlink" title="三 synchronized 实现细节"></a>三 synchronized 实现细节</h3><p>将下面的类编译成为字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Client.class) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>test方法的字节码如下 从字节码层面可以看到加了synchronized关键字的方法主要多了2个指令 <strong>monitorenter</strong> 和 <strong>monitorexit</strong> 当抛出异常后 会自动释放锁 所以字节码会有两个 <strong>monitorexit</strong></p><p><img src="/images/0114.png" alt="图1"></p><h3 id="四-对象的创建过程"><a href="#四-对象的创建过程" class="headerlink" title="四 对象的创建过程"></a>四 对象的创建过程</h3><ul><li>将class文件load到内存</li><li>类加载-&gt;链接-&gt;初始化</li><li>申请对象内存 new操作符</li><li>为成员变量赋默认值</li><li>执行构造方法&lt;init&gt;<ul><li>成员变量按顺序赋初值</li><li>执行构造方法语句</li></ul></li></ul><h3 id="五-对象的内存布局"><a href="#五-对象的内存布局" class="headerlink" title="五 对象的内存布局"></a>五 对象的内存布局</h3><ul><li><p><strong>观察虚拟机配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过下面的命令可以观察虚拟机的配置</span></span><br><span class="line">java -XX:+PrintCommandLineFlags -version</span><br></pre></td></tr></table></figure></li><li><p><strong>普通对象</strong></p><ul><li>对象头 markword 占8个字节</li><li>ClassPointer指针(类型指针) 占8个字节 -XX:+UseCompressedClassPointers 为4个字节 不开启为8个字节</li><li>实例数据<ul><li>引用类型 -XX:+UseCompressedOops 为4个字节 不开启为8个字节</li></ul></li><li>Padding 对齐 为8的倍数</li></ul></li><li><p><strong>数组对象</strong></p><ul><li>对象头 markword 占8个字节</li><li>ClassPointer指针(类型指针) 占8个字节 -XX:+UseCompressedClassPointers 为4个字节 不开启为8个字节</li><li>数组长度 4字节</li><li>数组数据</li><li>Padding 对齐 为8的倍数</li></ul><p>可以通过jol-core来获取一个对象的大小 jol-core的依赖如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jol<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jol-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过下面的代码可以查看某个对象的大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num2 = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Test t = <span class="keyword">new</span> Test();</span><br><span class="line">        String s = ClassLayout.parseInstance(t).toPrintable();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行结果如下</strong></p><p>前12个字节固定不变是对象头和类型指针 第13-16个字节是num变量占的大小(一个int占4字节) 第17-20字节是第二个变量num2占的大小 由于20个字节不能被8整除 所以 补了4个字节 一共是24个字节</p><p><img src="/images/0115.png" alt="图2"></p></li></ul><h3 id="六-对象怎么定位"><a href="#六-对象怎么定位" class="headerlink" title="六 对象怎么定位"></a><strong>六 对象怎么定位</strong></h3><p>一个对象的定位可以通过句柄池或者直接指针来定位 这个取决于不同的虚拟机实现</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-CPU级别的内存屏障&quot;&gt;&lt;a href=&quot;#一-CPU级别的内存屏障&quot; class=&quot;headerlink&quot; title=&quot;一 CPU级别的内存屏障&quot;&gt;&lt;/a&gt;一 CPU级别的内存屏障&lt;/h3&gt;&lt;p&gt;cpu级别的内存屏障 根据各个CPU厂商的不同 实现方式也有</summary>
      
    
    
    
    <category term="JVM" scheme="http://example.com/categories/JVM/"/>
    
    
    <category term="JVM" scheme="http://example.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>free命令中的buffer和cache的区别</title>
    <link href="http://example.com/2022/04/25/FAQ-free%E5%91%BD%E4%BB%A4%E4%B8%ADbuffer%E5%92%8Ccache%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2022/04/25/FAQ-free%E5%91%BD%E4%BB%A4%E4%B8%ADbuffer%E5%92%8Ccache%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-04-25T10:57:45.890Z</published>
    <updated>2022-04-25T11:08:20.566Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-命令"><a href="#一-命令" class="headerlink" title="一 命令"></a>一 命令</h3><p>执行free命令 会出现下面的显示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># free -m</span></span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:          7869       7651        218          1        191       5081</span><br><span class="line">-/+ buffers/cache:       2378       5490</span><br><span class="line">Swap:          478        139        339</span><br></pre></td></tr></table></figure><p>可以发现 </p><ul><li>对于第一行显示来说 total = used + free</li><li>第一行的 buffers + cached + free 等于第二行的free 为什么会出现这种情况呢 因为buffers和cache其实也是内存的一部分，这部分特殊的内存是可以回收的，甚至如果需要我们还可以将这部分buffers和cache给释放出来</li></ul><h3 id="二-free-中buffer-和-cache-的区别"><a href="#二-free-中buffer-和-cache-的区别" class="headerlink" title="二 free 中buffer 和 cache 的区别"></a>二 free 中buffer 和 cache 的区别</h3><p>首先他们都是占用的内存</p><ul><li>buffer ：作为buffer cache的内存，是块设备的读写缓冲区 </li><li>cache：作为page cache的内存， 文件系统的cache </li></ul><p>如果 cache 的值很大，说明cache住的文件数很多。如果频繁访问到的文件都能被cache住，那么磁盘的读IO 必会非常小</p><p><strong>如何释放Cache Memory</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">To free pagecache:</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/vm/drop_caches</span><br><span class="line">To free dentries and inodes:</span><br><span class="line"><span class="built_in">echo</span> 2 &gt; /proc/sys/vm/drop_caches</span><br><span class="line">To free pagecache, dentries and inodes:</span><br><span class="line"><span class="built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"> </span><br><span class="line"><span class="comment">#注意，释放前最好sync一下，防止丢失数据，但是一般情况下没有必要手动释放内存</span></span><br></pre></td></tr></table></figure><h3 id="三-总结"><a href="#三-总结" class="headerlink" title="三 总结"></a>三 总结</h3><p><strong>buffer是即将要被写入磁盘的，而cache是被从磁盘中读出来的</strong></p><ul><li>buffer是由各种进程分配的，被用在如输入队列等方面。一个简单的例子如某个进程要求有多个字段读入，在所有字段被读入完整之前，进程把先前读入的字段放在buffer中保存</li><li>cache经常被用在磁盘的I/O请求上，如果有多个进程都要访问某个文件，于是该文件便被做成cache以方便下次被访问，这样可提高系统性能</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-命令&quot;&gt;&lt;a href=&quot;#一-命令&quot; class=&quot;headerlink&quot; title=&quot;一 命令&quot;&gt;&lt;/a&gt;一 命令&lt;/h3&gt;&lt;p&gt;执行free命令 会出现下面的显示&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    <category term="FAQ" scheme="http://example.com/categories/FAQ/"/>
    
    
    <category term="FAQ" scheme="http://example.com/tags/FAQ/"/>
    
  </entry>
  
</feed>
